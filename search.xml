<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程-CycliBarrier</title>
      <link href="/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-CycliBarrier/"/>
      <url>/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-CycliBarrier/</url>
      
        <content type="html"><![CDATA[<h2 id="类说明："><a href="#类说明：" class="headerlink" title="类说明："></a>类说明：</h2><p>一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。</p><h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><p>需要所有的子任务都完成时，才执行主任务，这个时候就可以选择使用CyclicBarrier。</p><h2 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h2><pre><code>public class CyclicBarrierTest {    public static void main(String[] args) throws IOException, InterruptedException {        //如果将参数改为4，但是下面只加入了3个选手，这永远等待下去        //Waits until all parties have invoked await on this barrier.         CyclicBarrier barrier = new CyclicBarrier(3);        ExecutorService executor = Executors.newFixedThreadPool(3);        executor.submit(new Thread(new Runner(barrier, &quot;1号选手&quot;)));        executor.submit(new Thread(new Runner(barrier, &quot;2号选手&quot;)));        executor.submit(new Thread(new Runner(barrier, &quot;3号选手&quot;)));        executor.shutdown();    }}class Runner implements Runnable {    // 一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)    private CyclicBarrier barrier;    private String name;    public Runner(CyclicBarrier barrier, String name) {        super();        this.barrier = barrier;        this.name = name;    }    @Override    public void run() {        try {            Thread.sleep(1000 * (new Random()).nextInt(8));            System.out.println(name + &quot; 准备好了...&quot;);            // barrier的await方法，在所有参与者都已经在此 barrier 上调用 await 方法之前，将一直等待。            barrier.await();        } catch (InterruptedException e) {            e.printStackTrace();        } catch (BrokenBarrierException e) {            e.printStackTrace();        }        System.out.println(name + &quot; 起跑！&quot;);    }}</code></pre><p>输出结果：<br>​<br>    3号选手 准备好了…<br>    2号选手 准备好了…<br>    1号选手 准备好了…<br>    1号选手 起跑！<br>    2号选手 起跑！<br>    3号选手 起跑！</p><h2 id="场景２"><a href="#场景２" class="headerlink" title="场景２"></a>场景２</h2><p>有四个游戏玩家玩游戏，游戏有三个关卡，每个关卡必须要所有玩家都到达后才能允许通过。其实这个场景里的玩家中如果有玩家A先到了关卡1，他必须等到其他所有玩家都到达关卡1时才能通过，也就是说线程之间需要相互等待。</p><h2 id="与countdownlatch区别"><a href="#与countdownlatch区别" class="headerlink" title="与countdownlatch区别"></a>与countdownlatch区别</h2><p>这和CountDownLatch的应用场景有区别，CountDownLatch里的线程是到了运行的目标后继续干自己的其他事情，而这里的线程需要等待其他线程后才能继续完成下面的工作。</p>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> CyclicBarrier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程-Semaphore</title>
      <link href="/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-Semaphore/"/>
      <url>/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-Semaphore/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>   Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，保证合理的使用公共资源。</p><p>   线程可以通过acquire()方法来获取信号量的许可，当信号量中没有可用的许可的时候，线程阻塞，直到有可用的许可为止。线程可以通过release()方法释放它持有</p><p>   的信号量的许可。</p><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p> Semaphore经常用于限制获取某种资源的线程数量。下面举个例子，比如说操场上有5个跑道，一个跑道一次只能有一个学生在上面跑步，一旦所有跑道在使用，那么后面的学生就需要等待，直到有一个学生不跑了</p><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><pre><code>public class SemaphoreTest {   private static final int THREAD_COUNT = 10;   private static ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);   // 创建5个许可，允许5个并发执行   private static Semaphore s = new Semaphore(5);   public static void main(String[] args) {           //创建10个线程执行任务           for (int i = 0; i &lt; THREAD_COUNT; i++) {               executorService.execute(new Runnable() {                   @Override                   public void run() {                       try {                           //同时只能有5个线程并发执行保存数据的任务                           s.acquire();                           System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot; 保存数据&quot;);                           Thread.sleep(2000);                           //5个线程保存完数据，释放1个许可，其他的线程才能获取许可，继续执行保存数据的任务                           s.release();                           System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot; 释放许可&quot;);                       } catch (InterruptedException e) {                           e.printStackTrace();                       }                   }               });           }           executorService.shutdown();       }   }</code></pre><p>结果：10个线程保存数据，但是只允许5个线程并发的执行，当5个线程都保存完数据以后，释放许可，其他线程才能拿到许可继续保存数据，直到10个线程都保存完数据释放许可为止。</p>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> Semaphpore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程-CountDownLatch</title>
      <link href="/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-CountDownLatch/"/>
      <url>/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-CountDownLatch/</url>
      
        <content type="html"><![CDATA[<h2 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h2><p>在一些应用场合中，需要等待某个条件达到要求后才能做后面的事情；同时当线程都完成后也会触发事件，以便进行后面的操作。这个时候就可以使用CountDownLatch。CountDownLatch最重要的方法是countDown()和await()，前者主要是倒数一次，后者是等待倒数到0，如果没有到达0，就只有阻塞等待了。</p><h2 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h2><p>应用程序的主线程希望在负责启动框架服务的线程已经完成之后再执行。在例子中，模拟了一个应用的启动类，具体实现如下。</p><p>Service.java：所有服务的基类，具体实现在execute方法实现。</p><pre><code>class Service implements Runnable {private CountDownLatch latch;public Service(CountDownLatch latch) {    this.latch = latch;}@Overridepublic void run() {    try {        execute();    } finally {        if (latch != null)            latch.countDown();    }}public void execute() {}}</code></pre><p>HealthCheckService.java：服务具体实现类，类似的还有DatabaseCheckerService，这里我们使用TimeUnit.SECONDS.sleep模拟长时间的操作。</p><pre><code>class HealthCheckService extends Service {public HealthCheckService(CountDownLatch latch) {    super(latch);}@Overridepublic void execute() {    try {        TimeUnit.SECONDS.sleep(2);    } catch (InterruptedException e) {        e.printStackTrace();    }}</code></pre><p>}<br>Application.java：应用启动类，使用线程池执行每个服务的任务。负责初始化闭锁，然后等待，直到所有服务都被检测完。</p><pre><code>class Application {    private CountDownLatch latch;    public void startUp() throws Exception {        latch = new CountDownLatch(2);        List&lt;Service&gt; services = new ArrayList&lt;&gt;();        services.add(new DatabaseCheckerService(latch));        services.add(new HealthCheckService(latch));        Executor executor = Executors.newFixedThreadPool(services.size());        for (Service service : services) {            executor.execute(service);        }        latch.await();        System.out.println(&quot;all service is start up&quot;);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> CountDownLatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程-5种状态</title>
      <link href="/2019/02/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B-5%E7%A7%8D%E7%8A%B6%E6%80%81/"/>
      <url>/2019/02/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B-5%E7%A7%8D%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>当new出线程对象，并没有调用该对象的start方法，这是线程处于创建状态。 </p><h2 id="就绪"><a href="#就绪" class="headerlink" title="就绪"></a>就绪</h2><p>当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，只是告诉CPU我已经进入了等待被调用的状态了，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。 </p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。 </p><h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><p>线程正在运行的时候，被暂停，通常是为了等待某个事件的发生(比如说某项资源就绪)之后再继续运行。sleep，suspend，wait等方法都可以导致线程阻塞。 </p><h2 id="死亡"><a href="#死亡" class="headerlink" title="死亡"></a>死亡</h2><p>如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪。</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="1-Thread-类中的start-和-run-方法有什么区别？"><a href="#1-Thread-类中的start-和-run-方法有什么区别？" class="headerlink" title="1.Thread 类中的start() 和 run() 方法有什么区别？"></a>1.Thread 类中的start() 和 run() 方法有什么区别？</h2><p>当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。</p>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty-实战2（长连接心跳）</title>
      <link href="/2019/02/19/Netty-%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%BF%83%E8%B7%B3%EF%BC%882%EF%BC%89/"/>
      <url>/2019/02/19/Netty-%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%BF%83%E8%B7%B3%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>netty服务端通过一个Map保存所有连接上来的客户端SocketChannel,客户端的Id作为Map的key。每次服务器端如果要向某个客户端发送消息，只需根据ClientId取出对应的SocketChannel,往里面写入message即可。心跳检测通过IdleEvent事件，定时向服务端放送Ping消息，检测SocketChannel是否终断。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="Client模块"><a href="#Client模块" class="headerlink" title="Client模块"></a>Client模块</h2><h3 id="NettyClientBootstrap"><a href="#NettyClientBootstrap" class="headerlink" title="NettyClientBootstrap"></a>NettyClientBootstrap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.AskMsg;</span><br><span class="line">import com.yao.module.AskParams;</span><br><span class="line">import com.yao.module.Constants;</span><br><span class="line">import com.yao.module.LoginMsg;</span><br><span class="line">import io.netty.bootstrap.Bootstrap;</span><br><span class="line">import io.netty.channel.ChannelFuture;</span><br><span class="line">import io.netty.channel.ChannelInitializer;</span><br><span class="line">import io.netty.channel.ChannelOption;</span><br><span class="line">import io.netty.channel.EventLoopGroup;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line">import io.netty.handler.codec.serialization.ClassResolvers;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectDecoder;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectEncoder;</span><br><span class="line">import io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line">import io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class="line">import io.netty.util.concurrent.EventExecutorGroup;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class NettyClientBootstrap &#123;</span><br><span class="line">    private int port;</span><br><span class="line">    private String host;</span><br><span class="line">    private SocketChannel socketChannel;</span><br><span class="line">    private static final EventExecutorGroup group = new DefaultEventExecutorGroup(20);</span><br><span class="line">    public NettyClientBootstrap(int port, String host) throws InterruptedException &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">        this.host = host;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line">    private void start() throws InterruptedException &#123;</span><br><span class="line">        EventLoopGroup eventLoopGroup=new NioEventLoopGroup();</span><br><span class="line">        Bootstrap bootstrap=new Bootstrap();</span><br><span class="line">        bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">        bootstrap.option(ChannelOption.SO_KEEPALIVE,true);</span><br><span class="line">        bootstrap.group(eventLoopGroup);</span><br><span class="line">        bootstrap.remoteAddress(host,port);</span><br><span class="line">        bootstrap.handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void initChannel(SocketChannel socketChannel) throws Exception &#123;</span><br><span class="line">                socketChannel.pipeline().addLast(new IdleStateHandler(20,10,0));</span><br><span class="line">                socketChannel.pipeline().addLast(new ObjectEncoder());</span><br><span class="line">                socketChannel.pipeline().addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));</span><br><span class="line">                socketChannel.pipeline().addLast(new NettyClientHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ChannelFuture future =bootstrap.connect(host,port).sync();</span><br><span class="line">        if (future.isSuccess()) &#123;</span><br><span class="line">            socketChannel = (SocketChannel)future.channel();</span><br><span class="line">            System.out.println(&quot;connect server  成功---------&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[]args) throws InterruptedException &#123;</span><br><span class="line">        Constants.setClientId(&quot;001&quot;);</span><br><span class="line">        NettyClientBootstrap bootstrap=new NettyClientBootstrap(9999,&quot;localhost&quot;);</span><br><span class="line"></span><br><span class="line">        LoginMsg loginMsg=new LoginMsg();</span><br><span class="line">        loginMsg.setPassword(&quot;yao&quot;);</span><br><span class="line">        loginMsg.setUserName(&quot;robin&quot;);</span><br><span class="line">        bootstrap.socketChannel.writeAndFlush(loginMsg);</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(3);</span><br><span class="line">            AskMsg askMsg=new AskMsg();</span><br><span class="line">            AskParams askParams=new AskParams();</span><br><span class="line">            askParams.setAuth(&quot;authToken&quot;);</span><br><span class="line">            askMsg.setParams(askParams);</span><br><span class="line">            bootstrap.socketChannel.writeAndFlush(askMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NettyClientHandler"><a href="#NettyClientHandler" class="headerlink" title="NettyClientHandler"></a>NettyClientHandler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.*;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line">import io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line">import io.netty.util.ReferenceCountUtil;</span><br><span class="line"></span><br><span class="line">public class NettyClientHandler extends SimpleChannelInboundHandler&lt;BaseMsg&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception &#123;</span><br><span class="line">        if (evt instanceof IdleStateEvent) &#123;</span><br><span class="line">            IdleStateEvent e = (IdleStateEvent) evt;</span><br><span class="line">            switch (e.state()) &#123;</span><br><span class="line">                case WRITER_IDLE:</span><br><span class="line">                    PingMsg pingMsg=new PingMsg();</span><br><span class="line">                    ctx.writeAndFlush(pingMsg);</span><br><span class="line">                    System.out.println(&quot;send ping to server----------&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void messageReceived(ChannelHandlerContext channelHandlerContext, BaseMsg baseMsg) throws Exception &#123;</span><br><span class="line">        MsgType msgType=baseMsg.getType();</span><br><span class="line">        switch (msgType)&#123;</span><br><span class="line">            case LOGIN:&#123;</span><br><span class="line">                //向服务器发起登录</span><br><span class="line">                LoginMsg loginMsg=new LoginMsg();</span><br><span class="line">                loginMsg.setPassword(&quot;yao&quot;);</span><br><span class="line">                loginMsg.setUserName(&quot;robin&quot;);</span><br><span class="line">                channelHandlerContext.writeAndFlush(loginMsg);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case PING:&#123;</span><br><span class="line">                System.out.println(&quot;receive ping from server----------&quot;);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case ASK:&#123;</span><br><span class="line">                ReplyClientBody replyClientBody=new ReplyClientBody(&quot;client info **** !!!&quot;);</span><br><span class="line">                ReplyMsg replyMsg=new ReplyMsg();</span><br><span class="line">                replyMsg.setBody(replyClientBody);</span><br><span class="line">                channelHandlerContext.writeAndFlush(replyMsg);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case REPLY:&#123;</span><br><span class="line">                ReplyMsg replyMsg=(ReplyMsg)baseMsg;</span><br><span class="line">                ReplyServerBody replyServerBody=(ReplyServerBody)replyMsg.getBody();</span><br><span class="line">                System.out.println(&quot;receive client msg: &quot;+replyServerBody.getServerInfo());</span><br><span class="line">            &#125;</span><br><span class="line">            default:break;</span><br><span class="line">        &#125;</span><br><span class="line">        ReferenceCountUtil.release(msgType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Server模块"><a href="#Server模块" class="headerlink" title="Server模块"></a>Server模块</h2><h3 id="NettyChannelMap"><a href="#NettyChannelMap" class="headerlink" title="NettyChannelMap"></a>NettyChannelMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import io.netty.channel.Channel;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class NettyChannelMap &#123;</span><br><span class="line">    private static Map&lt;String,SocketChannel&gt; map=new ConcurrentHashMap&lt;String, SocketChannel&gt;();</span><br><span class="line">    public static void add(String clientId,SocketChannel socketChannel)&#123;</span><br><span class="line">        map.put(clientId,socketChannel);</span><br><span class="line">    &#125;</span><br><span class="line">    public static Channel get(String clientId)&#123;</span><br><span class="line">       return map.get(clientId);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void remove(SocketChannel socketChannel)&#123;</span><br><span class="line">        for (Map.Entry entry:map.entrySet())&#123;</span><br><span class="line">            if (entry.getValue()==socketChannel)&#123;</span><br><span class="line">                map.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NettyServerBootstrap"><a href="#NettyServerBootstrap" class="headerlink" title="NettyServerBootstrap"></a>NettyServerBootstrap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.AskMsg;</span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line">import io.netty.handler.codec.serialization.ClassResolvers;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectDecoder;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectEncoder;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class NettyServerBootstrap &#123;</span><br><span class="line">    private int port;</span><br><span class="line">    private SocketChannel socketChannel;</span><br><span class="line">    public NettyServerBootstrap(int port) throws InterruptedException &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">        bind();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void bind() throws InterruptedException &#123;</span><br><span class="line">        EventLoopGroup boss=new NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup worker=new NioEventLoopGroup();</span><br><span class="line">        ServerBootstrap bootstrap=new ServerBootstrap();</span><br><span class="line">        bootstrap.group(boss,worker);</span><br><span class="line">        bootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">        bootstrap.option(ChannelOption.SO_BACKLOG, 128);</span><br><span class="line">        bootstrap.option(ChannelOption.TCP_NODELAY, true);</span><br><span class="line">        bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);</span><br><span class="line">        bootstrap.childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void initChannel(SocketChannel socketChannel) throws Exception &#123;</span><br><span class="line">                ChannelPipeline p = socketChannel.pipeline();</span><br><span class="line">                p.addLast(new ObjectEncoder());</span><br><span class="line">                p.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));</span><br><span class="line">                p.addLast(new NettyServerHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ChannelFuture f= bootstrap.bind(port).sync();</span><br><span class="line">        if(f.isSuccess())&#123;</span><br><span class="line">            System.out.println(&quot;server start---------------&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String []args) throws InterruptedException &#123;</span><br><span class="line">        NettyServerBootstrap bootstrap=new NettyServerBootstrap(9999);</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            SocketChannel channel=(SocketChannel)NettyChannelMap.get(&quot;001&quot;);</span><br><span class="line">            if(channel!=null)&#123;</span><br><span class="line">                AskMsg askMsg=new AskMsg();</span><br><span class="line">                channel.writeAndFlush(askMsg);</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.SECONDS.sleep(10);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NettyServerHandler"><a href="#NettyServerHandler" class="headerlink" title="NettyServerHandler"></a>NettyServerHandler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.*;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.util.ReferenceCountUtil;</span><br><span class="line"></span><br><span class="line">public class NettyServerHandler extends SimpleChannelInboundHandler&lt;BaseMsg&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        NettyChannelMap.remove((SocketChannel)ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void messageReceived(ChannelHandlerContext channelHandlerContext, BaseMsg baseMsg) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        if(MsgType.LOGIN.equals(baseMsg.getType()))&#123;</span><br><span class="line">            LoginMsg loginMsg=(LoginMsg)baseMsg;</span><br><span class="line">            if(&quot;robin&quot;.equals(loginMsg.getUserName())&amp;&amp;&quot;yao&quot;.equals(loginMsg.getPassword()))&#123;</span><br><span class="line">                //登录成功,把channel存到服务端的map中</span><br><span class="line">                NettyChannelMap.add(loginMsg.getClientId(),(SocketChannel)channelHandlerContext.channel());</span><br><span class="line">                System.out.println(&quot;client&quot;+loginMsg.getClientId()+&quot; 登录成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(NettyChannelMap.get(baseMsg.getClientId())==null)&#123;</span><br><span class="line">                    //说明未登录，或者连接断了，服务器向客户端发起登录请求，让客户端重新登录</span><br><span class="line">                    LoginMsg loginMsg=new LoginMsg();</span><br><span class="line">                    channelHandlerContext.channel().writeAndFlush(loginMsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        switch (baseMsg.getType())&#123;</span><br><span class="line">            case PING:&#123;</span><br><span class="line">                PingMsg pingMsg=(PingMsg)baseMsg;</span><br><span class="line">                PingMsg replyPing=new PingMsg();</span><br><span class="line">                NettyChannelMap.get(pingMsg.getClientId()).writeAndFlush(replyPing);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case ASK:&#123;</span><br><span class="line">                //收到客户端的请求</span><br><span class="line">                AskMsg askMsg=(AskMsg)baseMsg;</span><br><span class="line">                if(&quot;authToken&quot;.equals(askMsg.getParams().getAuth()))&#123;</span><br><span class="line">                    ReplyServerBody replyBody=new ReplyServerBody(&quot;server info $$$$ !!!&quot;);</span><br><span class="line">                    ReplyMsg replyMsg=new ReplyMsg();</span><br><span class="line">                    replyMsg.setBody(replyBody);</span><br><span class="line">                    NettyChannelMap.get(askMsg.getClientId()).writeAndFlush(replyMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;break;</span><br><span class="line">            case REPLY:&#123;</span><br><span class="line">                //收到客户端回复</span><br><span class="line">                ReplyMsg replyMsg=(ReplyMsg)baseMsg;</span><br><span class="line">                ReplyClientBody clientBody=(ReplyClientBody)replyMsg.getBody();</span><br><span class="line">                System.out.println(&quot;receive client msg: &quot;+clientBody.getClientInfo());</span><br><span class="line">            &#125;break;</span><br><span class="line">            default:break;</span><br><span class="line">        &#125;</span><br><span class="line">        ReferenceCountUtil.release(baseMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Share模块"><a href="#Share模块" class="headerlink" title="Share模块"></a>Share模块</h2><h3 id="AskMsg"><a href="#AskMsg" class="headerlink" title="AskMsg"></a>AskMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 请求类型的消息</span><br><span class="line"> */</span><br><span class="line">public class AskMsg extends BaseMsg &#123;</span><br><span class="line">    public AskMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.ASK);</span><br><span class="line">    &#125;</span><br><span class="line">    private AskParams params;</span><br><span class="line"></span><br><span class="line">    public AskParams getParams() &#123;</span><br><span class="line">        return params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setParams(AskParams params) &#123;</span><br><span class="line">        this.params = params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AskParams"><a href="#AskParams" class="headerlink" title="AskParams"></a>AskParams</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class AskParams implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    private String auth;</span><br><span class="line"></span><br><span class="line">    public String getAuth() &#123;</span><br><span class="line">        return auth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAuth(String auth) &#123;</span><br><span class="line">        this.auth = auth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BaseMsg"><a href="#BaseMsg" class="headerlink" title="BaseMsg"></a>BaseMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 必须实现序列,serialVersionUID 一定要有</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public abstract class BaseMsg  implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    private MsgType type;</span><br><span class="line">    //必须唯一，否者会出现channel调用混乱</span><br><span class="line">    private String clientId;</span><br><span class="line"></span><br><span class="line">    //初始化客户端id</span><br><span class="line">    public BaseMsg() &#123;</span><br><span class="line">        this.clientId = Constants.getClientId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getClientId() &#123;</span><br><span class="line">        return clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setClientId(String clientId) &#123;</span><br><span class="line">        this.clientId = clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MsgType getType() &#123;</span><br><span class="line">        return type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setType(MsgType type) &#123;</span><br><span class="line">        this.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Constants &#123;</span><br><span class="line">    private static String clientId;</span><br><span class="line"></span><br><span class="line">    public static String getClientId() &#123;</span><br><span class="line">        return clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void setClientId(String clientId) &#123;</span><br><span class="line">        Constants.clientId = clientId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoginMsg"><a href="#LoginMsg" class="headerlink" title="LoginMsg"></a>LoginMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 登录验证类型的消息</span><br><span class="line"> */</span><br><span class="line">public class LoginMsg extends BaseMsg &#123;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String password;</span><br><span class="line">    public LoginMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.LOGIN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MsgType"><a href="#MsgType" class="headerlink" title="MsgType"></a>MsgType</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public enum  MsgType &#123;</span><br><span class="line">    PING,ASK,REPLY,LOGIN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PingMsg"><a href="#PingMsg" class="headerlink" title="PingMsg"></a>PingMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 心跳检测的消息类型</span><br><span class="line"> */</span><br><span class="line">public class PingMsg extends BaseMsg &#123;</span><br><span class="line">    public PingMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.PING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyBody"><a href="#ReplyBody" class="headerlink" title="ReplyBody"></a>ReplyBody</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class ReplyBody implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyClientBody"><a href="#ReplyClientBody" class="headerlink" title="ReplyClientBody"></a>ReplyClientBody</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public class ReplyClientBody extends ReplyBody &#123;</span><br><span class="line">    private String clientInfo;</span><br><span class="line"></span><br><span class="line">    public ReplyClientBody(String clientInfo) &#123;</span><br><span class="line">        this.clientInfo = clientInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getClientInfo() &#123;</span><br><span class="line">        return clientInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setClientInfo(String clientInfo) &#123;</span><br><span class="line">        this.clientInfo = clientInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyMsg"><a href="#ReplyMsg" class="headerlink" title="ReplyMsg"></a>ReplyMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public class ReplyMsg extends BaseMsg &#123;</span><br><span class="line">    public ReplyMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.REPLY);</span><br><span class="line">    &#125;</span><br><span class="line">    private ReplyBody body;</span><br><span class="line"></span><br><span class="line">    public ReplyBody getBody() &#123;</span><br><span class="line">        return body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBody(ReplyBody body) &#123;</span><br><span class="line">        this.body = body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyServerBody"><a href="#ReplyServerBody" class="headerlink" title="ReplyServerBody"></a>ReplyServerBody</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public class ReplyServerBody extends ReplyBody &#123;</span><br><span class="line">    private String serverInfo;</span><br><span class="line">    public ReplyServerBody(String serverInfo) &#123;</span><br><span class="line">        this.serverInfo = serverInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getServerInfo() &#123;</span><br><span class="line">        return serverInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setServerInfo(String serverInfo) &#123;</span><br><span class="line">        this.serverInfo = serverInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码：</p><p><a href="https://github.com/maojingios/MKNettyLongConnection" target="_blank" rel="noopener">https://github.com/maojingios/MKNettyLongConnection</a></p><p>（以上仅个人学习笔记，供参考！）</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty-实战1（简单客户端/服务端通信）</title>
      <link href="/2019/02/18/Netty-%E7%AE%80%E5%8D%95%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1%EF%BC%881%EF%BC%89/"/>
      <url>/2019/02/18/Netty-%E7%AE%80%E5%8D%95%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>demo使用IntelliJ IDEA，基于Spring Boot。结构如下图：</p><img src="/2019/02/18/Netty-简单客户端-服务端通信（1）/image1.jpg"><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-Client"><a href="#1-Client" class="headerlink" title="1.Client"></a>1.Client</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.client;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.Bootstrap;</span><br><span class="line">import io.netty.channel.ChannelFuture;</span><br><span class="line">import io.netty.channel.ChannelInitializer;</span><br><span class="line">import io.netty.channel.EventLoopGroup;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line">import io.netty.handler.codec.bytes.ByteArrayEncoder;</span><br><span class="line">import io.netty.handler.codec.string.StringEncoder;</span><br><span class="line">import io.netty.handler.stream.ChunkedWriteHandler;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    private final String host;</span><br><span class="line">    private final int port;</span><br><span class="line"></span><br><span class="line">    public Client() &#123;</span><br><span class="line">        this(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Client(int port) &#123;</span><br><span class="line">        this(&quot;localhost&quot;, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Client(String host, int port) &#123;</span><br><span class="line">        this.host = host;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            Bootstrap b = new Bootstrap();</span><br><span class="line">            b.group(group) // 注册线程池</span><br><span class="line">                    .channel(NioSocketChannel.class) // 使用NioSocketChannel来作为连接用的channel类</span><br><span class="line">                    .remoteAddress(new InetSocketAddress(this.host, this.port)) // 绑定连接端口和host信息</span><br><span class="line">                    .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; // 绑定连接初始化器</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            System.out.println(&quot;正在连接中...&quot;);</span><br><span class="line">                            ch.pipeline().addLast(new StringEncoder(Charset.forName(&quot;GBK&quot;)));</span><br><span class="line">                            ch.pipeline().addLast(new ClientHandler());</span><br><span class="line">                            ch.pipeline().addLast(new ByteArrayEncoder());</span><br><span class="line">                            ch.pipeline().addLast(new ChunkedWriteHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            // System.out.println(&quot;服务端连接成功..&quot;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture cf = b.connect().sync(); // 异步连接服务器</span><br><span class="line">            System.out.println(&quot;服务端连接成功...&quot;); // 连接完成</span><br><span class="line"></span><br><span class="line">            cf.channel().closeFuture().sync(); // 异步等待关闭连接channel</span><br><span class="line">            System.out.println(&quot;连接已关闭..&quot;); // 关闭完成</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            group.shutdownGracefully().sync(); // 释放线程池资源</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        new Client(&quot;127.0.0.1&quot;, 8888).start(); // 连接127.0.0.1/65535，并启动</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ClientHandler"><a href="#2-ClientHandler" class="headerlink" title="2.ClientHandler"></a>2.ClientHandler</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.client;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.ByteBufUtil;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">public class ClientHandler extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 向服务端发送数据</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;客户端与服务端通道-开启：&quot; + ctx.channel().localAddress() + &quot;channelActive&quot;);</span><br><span class="line"></span><br><span class="line">        String sendInfo = &quot;Hello 这里是客户端  你好啊！&quot;;</span><br><span class="line">        System.out.println(&quot;客户端准备发送的数据包：&quot; + sendInfo);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(sendInfo, CharsetUtil.UTF_8)); // 必须有flush</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * channelInactive</span><br><span class="line">     *</span><br><span class="line">     * channel 通道 Inactive 不活跃的</span><br><span class="line">     *</span><br><span class="line">     * 当客户端主动断开服务端的链接后，这个通道就是不活跃的。也就是说客户端与服务端的关闭了通信通道并且不可以传输数据</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;客户端与服务端通道-关闭：&quot; + ctx.channel().localAddress() + &quot;channelInactive&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;读取客户端通道信息..&quot;);</span><br><span class="line">        ByteBuf buf = msg.readBytes(msg.readableBytes());</span><br><span class="line">        System.out.println(</span><br><span class="line">                &quot;客户端接收到的服务端信息:&quot; + ByteBufUtil.hexDump(buf) + &quot;; 数据包为:&quot; + buf.toString(Charset.forName(&quot;utf-8&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">        System.out.println(&quot;异常退出:&quot; + cause.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Server"><a href="#3-Server" class="headerlink" title="3.Server"></a>3.Server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.server;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.channel.ChannelFuture;</span><br><span class="line">import io.netty.channel.ChannelInitializer;</span><br><span class="line">import io.netty.channel.ChannelOption;</span><br><span class="line">import io.netty.channel.EventLoopGroup;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line">import io.netty.handler.codec.bytes.ByteArrayEncoder;</span><br><span class="line">import io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    private final int port;</span><br><span class="line"></span><br><span class="line">    public Server(int port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap sb = new ServerBootstrap();</span><br><span class="line">            sb.option(ChannelOption.SO_BACKLOG, 1024);</span><br><span class="line">            sb.group(group, bossGroup) // 绑定线程池</span><br><span class="line">                    .channel(NioServerSocketChannel.class) // 指定使用的channel</span><br><span class="line">                    .localAddress(this.port)// 绑定监听端口</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; // 绑定客户端连接时候触发操作</span><br><span class="line"></span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            System.out.println(&quot;报告&quot;);</span><br><span class="line">                            System.out.println(&quot;信息：有一客户端链接到本服务端&quot;);</span><br><span class="line">                            System.out.println(&quot;IP:&quot; + ch.localAddress().getHostName());</span><br><span class="line">                            System.out.println(&quot;Port:&quot; + ch.localAddress().getPort());</span><br><span class="line">                            System.out.println(&quot;报告完毕&quot;);</span><br><span class="line"></span><br><span class="line">                            ch.pipeline().addLast(new StringEncoder(Charset.forName(&quot;GBK&quot;)));</span><br><span class="line">                            ch.pipeline().addLast(new ServerHandler()); // 客户端触发操作</span><br><span class="line">                            ch.pipeline().addLast(new ByteArrayEncoder());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture cf = sb.bind().sync(); // 服务器异步创建绑定</span><br><span class="line">            System.out.println(Server.class + &quot; 启动正在监听： &quot; + cf.channel().localAddress());</span><br><span class="line">            cf.channel().closeFuture().sync(); // 关闭服务器通道</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            group.shutdownGracefully().sync(); // 释放线程池资源</span><br><span class="line">            bossGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        new Server(8888).start(); // 启动</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-ServerHandler"><a href="#4-ServerHandler" class="headerlink" title="4.ServerHandler"></a>4.ServerHandler</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.server;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedOutputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.ChannelFutureListener;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"></span><br><span class="line">public class ServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * channelAction</span><br><span class="line">     *</span><br><span class="line">     * channel 通道 action 活跃的</span><br><span class="line">     *</span><br><span class="line">     * 当客户端主动链接服务端的链接后，这个通道就是活跃的了。也就是客户端与服务端建立了通信通道并且可以传输数据</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(ctx.channel().localAddress().toString() + &quot; 通道已激活！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * channelInactive</span><br><span class="line">     *</span><br><span class="line">     * channel 通道 Inactive 不活跃的</span><br><span class="line">     *</span><br><span class="line">     * 当客户端主动断开服务端的链接后，这个通道就是不活跃的。也就是说客户端与服务端的关闭了通信通道并且不可以传输数据</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(ctx.channel().localAddress().toString() + &quot; 通道不活跃！&quot;);</span><br><span class="line">        // 关闭流</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @author Taowd</span><br><span class="line">     * TODO  此处用来处理收到的数据中含有中文的时  出现乱码的问题</span><br><span class="line">     * 2017年8月31日 下午7:57:28</span><br><span class="line">     * @param buf</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getMessage(ByteBuf buf) &#123;</span><br><span class="line">        byte[] con = new byte[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(con);</span><br><span class="line">        try &#123;</span><br><span class="line">            return new String(con, &quot;UTF-8&quot;);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 功能：读取服务器发送过来的信息</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        // 第一种：接收字符串时的处理</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        String rev = getMessage(buf);</span><br><span class="line">        System.out.println(&quot;客户端收到服务器数据:&quot; + rev);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 功能：读取完毕客户端发送过来的数据之后的操作</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;服务端接收数据完毕..&quot;);</span><br><span class="line">        // 第一种方法：写一个空的buf，并刷新写出区域。完成后关闭sock channel连接。</span><br><span class="line">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">        // ctx.flush();</span><br><span class="line">        // ctx.flush(); //</span><br><span class="line">        // 第二种方法：在client端关闭channel连接，这样的话，会触发两次channelReadComplete方法。</span><br><span class="line">        // ctx.flush().close().sync(); // 第三种：改成这种写法也可以，但是这中写法，没有第一种方法的好。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 功能：服务端发生异常的操作</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">        System.out.println(&quot;异常信息：\r\n&quot; + cause.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>先运行Server,再运行Client.</p><p>（以上仅个人学习笔记，供参考！）</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty-初识（一）</title>
      <link href="/2019/02/18/Netty-%E5%88%9D%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/02/18/Netty-%E5%88%9D%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Netty是由<a href="https://baike.baidu.com/item/JBOSS" target="_blank" rel="noopener">JBOSS</a>提供的一个<a href="https://baike.baidu.com/item/java%E5%BC%80%E6%BA%90/10795649" target="_blank" rel="noopener">java开源</a>框架。Netty提供异步的、<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519" target="_blank" rel="noopener">事件驱动</a>的网络应用程序框架和工具，用以快速开发高性能、高可靠性的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%99%A8/99096" target="_blank" rel="noopener">网络服务器</a>和客户端程序。</p><p>也就是说，Netty 是一个基于NIO的客户、服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316" target="_blank" rel="noopener">服务端</a>应用。Netty相当于简化和流线化了网络应用的编程开发过程，例如：基于TCP和UDP的socket服务开发。</p><p>“快速”和“简单”并不用产生维护性或性能上的问题。Netty 是一个吸收了多种协议（包括FTP、SMTP、HTTP等各种二进制文本协议）的实现经验，并经过相当精心设计的项目。最终，Netty 成功的找到了一种方式，在保证易于开发的同时还保证了其应用的性能，稳定性和伸缩性。</p><p>（来源：百度百科）</p><h1 id="为什么Netty受欢迎"><a href="#为什么Netty受欢迎" class="headerlink" title="为什么Netty受欢迎"></a>为什么Netty受欢迎</h1><p>目前像Facebook 和 Instagram 以及流行 开源项目如 Infinispan, HornetQ, Vert.x, Apache Cassandra 和 Elasticsearch 等，都利用Netty强大的对于网络抽象的核心代码。为什么Netty如此受欢迎？</p><h2 id="1-高并发"><a href="#1-高并发" class="headerlink" title="1.高并发"></a>1.高并发</h2><p>Netty是一款基于NIO（Nonblocking I/O，非阻塞IO）开发的网络通信框架，对比于BIO（Blocking I/O，阻塞IO），他的并发性能得到了很大提高。如下两张图：</p><p>BIO：</p><img src="/2019/02/18/Netty-初识（一）/image1.png"><p>NIO：</p><img src="/2019/02/18/Netty-初识（一）/image2.png"><p>当一个连接建立之后，他有两个步骤要做：</p><p>1.是接收完客户端发过来的全部数据；</p><p>2.是服务端处理完请求业务之后返回response给客户端。</p><p>NIO和BIO的区别主要是在第一步：<br> 在BIO中，等待客户端发数据这个过程是阻塞的，这样就造成了一个线程只能处理一个请求的情况，而机器能支持的最大线程数是有限的，这就是为什么BIO不能支持高并发的原因。<br> 而NIO中，当一个Socket建立好之后，Thread并不会阻塞去接受这个Socket，而是将这个请求交给Selector，Selector会不断的去遍历所有的Socket，一旦有一个Socket建立完成，他会通知Thread，然后Thread处理完数据再返回给客户端——<em>这个过程是阻塞的</em>，这样就能让一个Thread处理更多的请求了。</p><p>下面两张图是基于BIO的处理流程和netty的处理流程，辅助你理解两种方式的差别：</p><p>BIO：</p><img src="/2019/02/18/Netty-初识（一）/image3.png"><p>NIO：</p><img src="/2019/02/18/Netty-初识（一）/image4.png"><h2 id="2-传输快"><a href="#2-传输快" class="headerlink" title="2.传输快"></a>2.传输快</h2><p>Netty的传输快其实也是依赖了NIO的一个特性——<em>零拷贝</em>。我们知道，Java的内存有堆内存、栈内存和字符串常量池等等，其中堆内存是占用内存空间最大的一块，也是Java对象存放的地方，一般我们的数据如果需要从IO读取到堆内存，中间需要经过Socket缓冲区，也就是说一个数据会被拷贝两次才能到达他的的终点，如果数据量大，就会造成不必要的资源浪费。<br> Netty针对这种情况，使用了NIO中的另一大特性——零拷贝，当他需要接收数据的时候，他会在堆内存之外开辟一块内存，数据就直接从IO读到了那块内存中去，在netty里面通过ByteBuf可以直接对这些数据进行直接操作，从而加快了传输速度。<br> 下两图就介绍了两种拷贝方式的区别：</p><p>传统拷贝：</p><img src="/2019/02/18/Netty-初识（一）/image5.png"><p>零拷贝：</p><img src="/2019/02/18/Netty-初识（一）/image6.png"><h2 id="3-Netty封装好"><a href="#3-Netty封装好" class="headerlink" title="3.Netty封装好"></a>3.Netty封装好</h2><p>下面我们看看阻塞I/O，非阻塞I/O与Netty代码：</p><p>阻塞I/O：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class PlainOioServer &#123;</span><br><span class="line"></span><br><span class="line">    public void serve(int port) throws IOException &#123;</span><br><span class="line">        final ServerSocket socket = new ServerSocket(port); </span><br><span class="line">        try &#123;</span><br><span class="line">            for (;;) &#123;</span><br><span class="line">                final Socket clientSocket = socket.accept();   </span><br><span class="line">                System.out.println(&quot;Accepted connection from &quot; + clientSocket);</span><br><span class="line"></span><br><span class="line">                new Thread(new Runnable() &#123;  </span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        OutputStream out;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            out = clientSocket.getOutputStream();</span><br><span class="line">                            out.write(&quot;Hi!\r\n&quot;.getBytes(Charset.forName(&quot;UTF-8&quot;)));   </span><br><span class="line">                            out.flush();</span><br><span class="line">                            clientSocket.close();         </span><br><span class="line"></span><br><span class="line">                        &#125; catch (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            try &#123;</span><br><span class="line">                                clientSocket.close();</span><br><span class="line">                            &#125; catch (IOException ex) &#123;</span><br><span class="line">                                // ignore on close</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();                                      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非阻塞I/O：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class PlainNioServer &#123;</span><br><span class="line">    public void serve(int port) throws IOException &#123;</span><br><span class="line">        ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class="line">        serverChannel.configureBlocking(false);</span><br><span class="line">        ServerSocket ss = serverChannel.socket();</span><br><span class="line">        InetSocketAddress address = new InetSocketAddress(port);</span><br><span class="line">        ss.bind(address);                                            //1</span><br><span class="line">        Selector selector = Selector.open();                        //2</span><br><span class="line">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);    //3</span><br><span class="line">        final ByteBuffer msg = ByteBuffer.wrap(&quot;Hi!\r\n&quot;.getBytes());</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                selector.select();                                    //4</span><br><span class="line">            &#125; catch (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                // handle exception</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();    //5</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (key.isAcceptable()) &#123;                //6</span><br><span class="line">                        ServerSocketChannel server =</span><br><span class="line">                                (ServerSocketChannel)key.channel();</span><br><span class="line">                        SocketChannel client = server.accept();</span><br><span class="line">                        client.configureBlocking(false);</span><br><span class="line">                        client.register(selector, SelectionKey.OP_WRITE |</span><br><span class="line">                                SelectionKey.OP_READ, msg.duplicate());    //7</span><br><span class="line">                        System.out.println(</span><br><span class="line">                                &quot;Accepted connection from &quot; + client);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (key.isWritable()) &#123;                //8</span><br><span class="line">                        SocketChannel client =</span><br><span class="line">                                (SocketChannel)key.channel();</span><br><span class="line">                        ByteBuffer buffer =</span><br><span class="line">                                (ByteBuffer)key.attachment();</span><br><span class="line">                        while (buffer.hasRemaining()) &#123;</span><br><span class="line">                            if (client.write(buffer) == 0) &#123;        //9</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        client.close();                    //10</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (IOException ex) &#123;</span><br><span class="line">                    key.cancel();</span><br><span class="line">                    try &#123;</span><br><span class="line">                        key.channel().close();</span><br><span class="line">                    &#125; catch (IOException cex) &#123;</span><br><span class="line">                        // 在关闭时忽略</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Netty：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class NettyOioServer &#123;</span><br><span class="line"></span><br><span class="line">    public void server(int port) throws Exception &#123;</span><br><span class="line">        final ByteBuf buf = Unpooled.unreleasableBuffer(</span><br><span class="line">                Unpooled.copiedBuffer(&quot;Hi!\r\n&quot;, Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">        EventLoopGroup group = new OioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap b = new ServerBootstrap();        //1</span><br><span class="line"></span><br><span class="line">            b.group(group)                                    //2</span><br><span class="line">             .channel(OioServerSocketChannel.class)</span><br><span class="line">             .localAddress(new InetSocketAddress(port))</span><br><span class="line">             .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;//3</span><br><span class="line">                 @Override</span><br><span class="line">                 public void initChannel(SocketChannel ch) </span><br><span class="line">                     throws Exception &#123;</span><br><span class="line">                     ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;            //4</span><br><span class="line">                         @Override</span><br><span class="line">                         public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                             ctx.writeAndFlush(buf.duplicate()).addListener(ChannelFutureListener.CLOSE);//5</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">            ChannelFuture f = b.bind().sync();  //6</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            group.shutdownGracefully().sync();        //7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看代码量，便知道高下。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA-JavaWeb基于RSA算法加解密</title>
      <link href="/2019/01/28/RSA-Java%20Web%E5%9F%BA%E4%BA%8ERSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
      <url>/2019/01/28/RSA-Java%20Web%E5%9F%BA%E4%BA%8ERSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>我这里使用的是IntelliJ IDEA 2018.2.2版本。创建一个基于Spring boot+thymeleaf项目。</p><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml:"></a>1.pom.xml:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.60&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;net.sourceforge.nekohtml&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;nekohtml&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.9.22&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2.application.properties"></a>2.application.properties</h2><p>application.properties设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.mode=LEGACYHTML5</span><br><span class="line">spring.thymeleaf.encoding=utf-8</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br></pre></td></tr></table></figure><h2 id="3-js文件"><a href="#3-js文件" class="headerlink" title="3.js文件"></a>3.js文件</h2><p>在static包下面新建js文件包，将security.js和jquery-3.3.1.min.js两个js文件拷贝至js文件包下。（默认这两个文件是居家必备）</p><h2 id="4-页面"><a href="#4-页面" class="headerlink" title="4.页面"></a>4.页面</h2><p>在templates包下创建。</p><p>home.html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html SYSTEM &quot;http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;这是首页&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span th:text=&quot;$&#123;loginstate&#125;&quot;&gt;未登录&lt;/span&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;去登陆界面&quot; name=&quot;gotologin&quot; onclick=&quot;goToLogin()&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function goToLogin() &#123;</span><br><span class="line">            location.href = &quot;/gotologin&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>login.heml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html SYSTEM &quot;http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../js/jquery-3.3.1.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../js/security.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;登陆&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;span th:text=&quot;$&#123;loginstate&#125;&quot;&gt;未登录&lt;/span&gt;</span><br><span class="line">    &lt;form method=&quot;post&quot; name=&quot;loginForm&quot; id=&quot;loginForm&quot; action=&quot;/login&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;pubkeyModulus&quot; id=&quot;pubkeyModulus&quot; th:value=&quot;$&#123;pubkeyModulus&#125;&quot;/&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;pubkeyExponent&quot; id=&quot;pubkeyExponent&quot; th:value=&quot;$&#123;pubkeyExponent&#125;&quot;/&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;/&gt; &lt;br/&gt;</span><br><span class="line">        密  码：&lt;input type=&quot;text&quot; name=&quot;password&quot; id=&quot;password&quot;/&gt; &lt;br/&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;登陆&quot; onclick=&quot;login()&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-RSAUtils"><a href="#5-RSAUtils" class="headerlink" title="5.RSAUtils"></a>5.RSAUtils</h2><p>在util包下面新建RSAUtils工具类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.security.KeyFactory;</span><br><span class="line">import java.security.KeyPair;</span><br><span class="line">import java.security.KeyPairGenerator;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.interfaces.RSAPrivateKey;</span><br><span class="line">import java.security.interfaces.RSAPublicKey;</span><br><span class="line">import java.security.spec.RSAPrivateKeySpec;</span><br><span class="line">import java.security.spec.RSAPublicKeySpec;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line"></span><br><span class="line">public class RSAUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 生成公钥和私钥</span><br><span class="line">     * @throws NoSuchAlgorithmException</span><br><span class="line">     */</span><br><span class="line">    public static HashMap&lt;String, Object&gt; getKeys() throws NoSuchAlgorithmException &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">        keyPairGen.initialize(1024);</span><br><span class="line">        KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">        map.put(&quot;public&quot;, publicKey);</span><br><span class="line">        map.put(&quot;private&quot;, privateKey);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 使用模和指数生成RSA公钥</span><br><span class="line">     * @param modulus 模</span><br><span class="line">     * @param exponent 指数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static RSAPublicKey getPublicKey(String modulus, String exponent) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BigInteger b1 = new BigInteger(modulus);</span><br><span class="line">            BigInteger b2 = new BigInteger(exponent);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">            RSAPublicKeySpec keySpec = new RSAPublicKeySpec(b1, b2);</span><br><span class="line">            return (RSAPublicKey) keyFactory.generatePublic(keySpec);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用模和指数生成RSA私钥 /None/NoPadding</span><br><span class="line">     * @param modulus 模</span><br><span class="line">     * @param exponent 指数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static RSAPrivateKey getPrivateKey(String modulus, String exponent) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BigInteger b1 = new BigInteger(modulus);</span><br><span class="line">            BigInteger b2 = new BigInteger(exponent);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">            RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(b1, b2);</span><br><span class="line">            return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 公钥加密</span><br><span class="line">     * @param data</span><br><span class="line">     * @param publicKey</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String encryptByPublicKey(String data, RSAPublicKey publicKey)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">        // 模长</span><br><span class="line">        int key_len = publicKey.getModulus().bitLength() / 8;</span><br><span class="line">        // 加密数据长度 &lt;= 模长-11</span><br><span class="line">        String[] datas = splitString(data, key_len - 11);</span><br><span class="line">        String mi = &quot;&quot;;</span><br><span class="line">        //如果明文长度大于模长-11则要分组加密</span><br><span class="line">        for (String s : datas) &#123;</span><br><span class="line">            mi += bcd2Str(cipher.doFinal(s.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">        return mi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私钥解密</span><br><span class="line">     * @param data</span><br><span class="line">     * @param privateKey</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String decryptByPrivateKey(String data, RSAPrivateKey privateKey)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">        //模长</span><br><span class="line">        int key_len = privateKey.getModulus().bitLength() / 8;</span><br><span class="line">        byte[] bytes = data.getBytes();</span><br><span class="line">        byte[] bcd = ASCII_To_BCD(bytes, bytes.length);</span><br><span class="line">        //System.err.println(bcd.length);</span><br><span class="line">        //如果密文长度大于模长则要分组解密</span><br><span class="line">        String ming = &quot;&quot;;</span><br><span class="line">        byte[][] arrays = splitArray(bcd, key_len);</span><br><span class="line">        for(byte[] arr : arrays)&#123;</span><br><span class="line">            ming += new String(cipher.doFinal(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        return new  StringBuilder(ming).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * ASCII码转BCD码</span><br><span class="line">     */</span><br><span class="line">    public static byte[] ASCII_To_BCD(byte[] ascii, int asc_len) &#123;</span><br><span class="line">        byte[] bcd = new byte[asc_len / 2];</span><br><span class="line">        int j = 0;</span><br><span class="line">        for (int i = 0; i &lt; (asc_len + 1) / 2; i++) &#123;</span><br><span class="line">            bcd[i] = asc_to_bcd(ascii[j++]);</span><br><span class="line">            bcd[i] = (byte) (((j &gt;= asc_len) ? 0x00 : asc_to_bcd(ascii[j++])) + (bcd[i] &lt;&lt; 4));</span><br><span class="line">        &#125;</span><br><span class="line">        return bcd;</span><br><span class="line">    &#125;</span><br><span class="line">    public static byte asc_to_bcd(byte asc) &#123;</span><br><span class="line">        byte bcd;</span><br><span class="line"></span><br><span class="line">        if ((asc &gt;= &apos;0&apos;) &amp;&amp; (asc &lt;= &apos;9&apos;))</span><br><span class="line">            bcd = (byte) (asc - &apos;0&apos;);</span><br><span class="line">        else if ((asc &gt;= &apos;A&apos;) &amp;&amp; (asc &lt;= &apos;F&apos;))</span><br><span class="line">            bcd = (byte) (asc - &apos;A&apos; + 10);</span><br><span class="line">        else if ((asc &gt;= &apos;a&apos;) &amp;&amp; (asc &lt;= &apos;f&apos;))</span><br><span class="line">            bcd = (byte) (asc - &apos;a&apos; + 10);</span><br><span class="line">        else</span><br><span class="line">            bcd = (byte) (asc - 48);</span><br><span class="line">        return bcd;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * BCD转字符串</span><br><span class="line">     */</span><br><span class="line">    public static String bcd2Str(byte[] bytes) &#123;</span><br><span class="line">        char temp[] = new char[bytes.length * 2], val;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            val = (char) (((bytes[i] &amp; 0xf0) &gt;&gt; 4) &amp; 0x0f);</span><br><span class="line">            temp[i * 2] = (char) (val &gt; 9 ? val + &apos;A&apos; - 10 : val + &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">            val = (char) (bytes[i] &amp; 0x0f);</span><br><span class="line">            temp[i * 2 + 1] = (char) (val &gt; 9 ? val + &apos;A&apos; - 10 : val + &apos;0&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        return new String(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 拆分字符串</span><br><span class="line">     */</span><br><span class="line">    public static String[] splitString(String string, int len) &#123;</span><br><span class="line">        int x = string.length() / len;</span><br><span class="line">        int y = string.length() % len;</span><br><span class="line">        int z = 0;</span><br><span class="line">        if (y != 0) &#123;</span><br><span class="line">            z = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strings = new String[x + z];</span><br><span class="line">        String str = &quot;&quot;;</span><br><span class="line">        for (int i=0; i&lt;x+z; i++) &#123;</span><br><span class="line">            if (i==x+z-1 &amp;&amp; y!=0) &#123;</span><br><span class="line">                str = string.substring(i*len, i*len+y);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                str = string.substring(i*len, i*len+len);</span><br><span class="line">            &#125;</span><br><span class="line">            strings[i] = str;</span><br><span class="line">        &#125;</span><br><span class="line">        return strings;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *拆分数组</span><br><span class="line">     */</span><br><span class="line">    public static byte[][] splitArray(byte[] data,int len)&#123;</span><br><span class="line">        int x = data.length / len;</span><br><span class="line">        int y = data.length % len;</span><br><span class="line">        int z = 0;</span><br><span class="line">        if(y!=0)&#123;</span><br><span class="line">            z = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        byte[][] arrays = new byte[x+z][];</span><br><span class="line">        byte[] arr;</span><br><span class="line">        for(int i=0; i&lt;x+z; i++)&#123;</span><br><span class="line">            arr = new byte[len];</span><br><span class="line">            if(i==x+z-1 &amp;&amp; y!=0)&#123;</span><br><span class="line">                System.arraycopy(data, i*len, arr, 0, y);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.arraycopy(data, i*len, arr, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">            arrays[i] = arr;</span><br><span class="line">        &#125;</span><br><span class="line">        return arrays;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = getKeys();</span><br><span class="line">        //生成公钥和私钥</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) map.get(&quot;public&quot;);</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) map.get(&quot;private&quot;);</span><br><span class="line"></span><br><span class="line">        //模</span><br><span class="line">        String modulus = publicKey.getModulus().toString();</span><br><span class="line">        System.out.println(&quot;pubkey modulus=&quot;+modulus);</span><br><span class="line">        //公钥指数</span><br><span class="line">        String public_exponent = publicKey.getPublicExponent().toString();</span><br><span class="line">        System.out.println(&quot;pubkey exponent=&quot;+public_exponent);</span><br><span class="line">        //私钥指数</span><br><span class="line">        String private_exponent = privateKey.getPrivateExponent().toString();</span><br><span class="line">        System.out.println(&quot;private exponent=&quot;+private_exponent);</span><br><span class="line">        //明文</span><br><span class="line">        String ming = &quot;123456&quot;;</span><br><span class="line">        //使用模和指数生成公钥和私钥</span><br><span class="line">        RSAPublicKey pubKey = RSAUtils.getPublicKey(modulus, public_exponent);</span><br><span class="line">        RSAPrivateKey priKey = RSAUtils.getPrivateKey(modulus, private_exponent);</span><br><span class="line">        //加密后的密文</span><br><span class="line">        String mi = RSAUtils.encryptByPublicKey(ming, pubKey);</span><br><span class="line">        System.err.println(&quot;mi=&quot;+mi);</span><br><span class="line">        //解密后的明文</span><br><span class="line">        String ming2 = RSAUtils.decryptByPrivateKey(mi, priKey);</span><br><span class="line">        System.err.println(&quot;ming2=&quot;+ming2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-controller"><a href="#6-controller" class="headerlink" title="6.controller"></a>6.controller</h2><p>新建web包，在下面新建LoginController:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.interfaces.RSAPrivateKey;</span><br><span class="line">import java.security.interfaces.RSAPublicKey;</span><br><span class="line">import com.mj.rsa.util.RSAUtils;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class LoginController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&#123;&quot;&quot;,&quot;/&quot;,&quot;home&quot;&#125;)</span><br><span class="line">    public String homePage()&#123;</span><br><span class="line">        return &quot;home&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(value = &quot;gotologin&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String goToLogin(HttpServletRequest req,Model model)&#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Object&gt; map = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            map = RSAUtils.getKeys();</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //生成公钥和私钥</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) map.get(&quot;public&quot;);</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) map.get(&quot;private&quot;);</span><br><span class="line"></span><br><span class="line">        //模</span><br><span class="line">        String modulus = publicKey.getModulus().toString(16);</span><br><span class="line">        //公钥指数</span><br><span class="line">        String public_exponent = publicKey.getPublicExponent().toString(16);</span><br><span class="line">        //保存到session,供前段使用</span><br><span class="line">        model.addAttribute(&quot;pubkeyModulus&quot;,modulus);</span><br><span class="line">        model.addAttribute(&quot;pubkeyExponent&quot;,public_exponent);</span><br><span class="line">        //session</span><br><span class="line">        req.getSession().setAttribute(&quot;priKey&quot;,privateKey);</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 登陆。验证成功后，返回home页面，并在home页面显示已登录</span><br><span class="line">     * 这里省略从数据库获取用户名密码以及MD5操作的操作</span><br><span class="line">     * 这里的账号密码假定为maojing,123456</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;login&quot;,method = RequestMethod.POST)</span><br><span class="line">    public String login(HttpServletRequest req, Model model) &#123;</span><br><span class="line"></span><br><span class="line">        String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = req.getParameter(&quot;password&quot;);</span><br><span class="line">        RSAPrivateKey priKey = (RSAPrivateKey) req.getSession().getAttribute(&quot;priKey&quot;);</span><br><span class="line"></span><br><span class="line">        //解密后的密码</span><br><span class="line">        try &#123;</span><br><span class="line">            String decodePassword = RSAUtils.decryptByPrivateKey(password, priKey);</span><br><span class="line">            if (&quot;123456&quot;.equals(decodePassword)) &#123;</span><br><span class="line">                model.addAttribute(&quot;loginstate&quot;, &quot;已登陆&quot;);</span><br><span class="line">                return &quot;home&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                model.addAttribute(&quot;loginstate&quot;, &quot;账号或密码错误！&quot;);</span><br><span class="line">                return &quot;login&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-BouncyCastleProvider"><a href="#7-BouncyCastleProvider" class="headerlink" title="7.BouncyCastleProvider"></a>7.BouncyCastleProvider</h2><p>来到C:\Program Files\Java\jre1.8.0_161\lib\security下的java.security文件，在下面加上security.provider.x=org.bouncycastle.jce.provider.BouncyCastleProvider，x为顺序号，修改后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># List of providers and their preference orders (see above):</span><br><span class="line">#</span><br><span class="line">security.provider.1=sun.security.provider.Sun</span><br><span class="line">security.provider.2=sun.security.rsa.SunRsaSign</span><br><span class="line">security.provider.3=sun.security.ec.SunEC</span><br><span class="line">security.provider.4=com.sun.net.ssl.internal.ssl.Provider</span><br><span class="line">security.provider.5=com.sun.crypto.provider.SunJCE</span><br><span class="line">security.provider.6=sun.security.jgss.SunProvider</span><br><span class="line">security.provider.7=com.sun.security.sasl.Provider</span><br><span class="line">security.provider.8=org.jcp.xml.dsig.internal.dom.XMLDSigRI</span><br><span class="line">security.provider.9=sun.security.smartcardio.SunPCSC</span><br><span class="line">security.provider.10=sun.security.mscapi.SunMSCAPI</span><br><span class="line">security.provider.11=org.bouncycastle.jce.provider.BouncyCastleProvider</span><br></pre></td></tr></table></figure><h2 id="8-bcprov-jdk15on-1-59-jar"><a href="#8-bcprov-jdk15on-1-59-jar" class="headerlink" title="8.bcprov-jdk15on-1.59.jar"></a>8.bcprov-jdk15on-1.59.jar</h2><p>来到C:\Program Files\Java\jre1.8.0_161\lib\ext文件目录，将bcprov-jdk15on-1.59.jar包放入。</p><p>（注意：第7、8步骤我这里是不用配置也可）</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>至此，测试工程搭建完成。</p><p>当用户访问<code>http://localhost:8080/login</code>时，后台会基于RSA算法生成公钥私钥，同时将公钥告知web前端；</p><p>前端完成用户信息输入后，在点击提交时，前端会使用上面后台给的公钥，对密码进行加密，然后传给服务器；</p><p>服务器收到客户端登陆请求后，将使用私钥对密文进行解密，让后与后台用户密码比较验证。</p><p>这里省略了注册，数据库存储和读取数据。</p>]]></content>
      
      
      <categories>
          
          <category> RSA应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小心呵护孩子的‘好奇心’</title>
      <link href="/2019/01/27/%E5%B0%8F%E5%BF%83%E5%91%B5%E6%8A%A4%E5%AD%A9%E5%AD%90%E7%9A%84%E2%80%98%E5%A5%BD%E5%A5%87%E5%BF%83%E2%80%99/"/>
      <url>/2019/01/27/%E5%B0%8F%E5%BF%83%E5%91%B5%E6%8A%A4%E5%AD%A9%E5%AD%90%E7%9A%84%E2%80%98%E5%A5%BD%E5%A5%87%E5%BF%83%E2%80%99/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/27/小心呵护孩子的‘好奇心’/image1.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    研究表明，0~3岁是宝宝好奇心最强烈的时段，这个时段也是孩子的敏感期，作为父母的我们如果抓住这个机会对自己宝贝的好奇心加以适当引导，这对孩子的大脑开发，习惯的培养，性格的形成都将起到非常重要的作用。</p><a id="more"></a><h1 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h1><p>​    最近丫丫小脑袋里住进了一位小精灵，她的名字叫“好奇”，时不时的她就会蹦出来。</p><p>​    “爸爸，为什么是红灯呀？”（等红绿灯时）。</p><p>​    “爸爸，为什么小猫还不回家呀？”（天黑后楼下看见只猫）。</p><p>​    “爸爸，为什么小熊猫受伤了呀？”（动物园看见一只小熊猫脚受伤）。</p><p>​    ……</p><p>​    就是这样一类司空见惯的问题，有时问的问题本身可能都还需要爸爸给他捋清楚，不然除了我也就只有她妈妈能明白是什么意思（这是我们家的小默契），我很喜欢听女儿提问时那稚嫩的童声，但我也不可否认，应该有4层左右的问题，我是敷衍了女儿，即使我真的很想尽力的用心的回应她的提问。</p><p>​    看着女儿瞪着眼睛向我提问，有几次我会在耐心回答她之后，内心竟会有这样的独白：“菇凉，算你运气好，遇到我这样的超赞奶爸，愿意这么耐着性子回答你这些问题，那要是搁在你爸那个年代，只能是个留守儿童……”。</p><p>​    在中国那个特殊的年代里，太多留守儿童，他们童年时，“好奇”精灵应该也曾陪伴过他们，可孩子那么小，没有爸爸妈妈的帮助呵护，“好奇”精灵会消失吗？作为曾是留守儿童的我，最深的体会是，儿时大多数问题是得不到及时的正确的回答，虽然好奇依旧，但明显好奇心会随着得不到答案的次数增多而慢慢减少，直至平淡。</p><p>​    即使有爸妈陪着孩子，“好奇”精灵可能也会跑掉。在面对像上面我的女儿提的那一类问题时，作为成年人的我们，会觉得太正常（正常到不想回答），一两次还好，但孩子一直问，很多时候，我们就会失去耐心，并会采取一些敷衍，甚至训斥，惩罚的方式处理掉孩子的问题，逐渐地孩子便会沮丧，从而放弃提问。</p><p>​    没有了好奇心，失去了探索世界的欲望，也失去了前进的动力，这才是最可怕的。因此我意识到保护孩子的”好奇”精灵是件必须时刻注意的重要事情。</p><h1 id="什么是好奇心？"><a href="#什么是好奇心？" class="headerlink" title="什么是好奇心？"></a>什么是好奇心？</h1><p>​    通俗而言，大概就是思考一些司空见惯的现象并多问几个“为什么”。而用科学的话来说，好奇心是当我们想要知道某种不知道的事物时，表现出来的一种认知上的复杂情感，它可以理解为一种内在动机，这种内在动机是主动学习和自发探索的关键。</p><h1 id="有什么作用？"><a href="#有什么作用？" class="headerlink" title="有什么作用？"></a>有什么作用？</h1><p>科学家研究得出，好奇心的作用主要有三点：</p><ul><li>第一，它能促使我们主动学习，并且能让我们从学习中获得快乐；</li><li>第二，它会延长记忆在大脑中留存的时间；</li><li>第三，也是最重要的一点，它能引发一系列我们自己预料不到的成长，这种成长不仅体现在知识的增长上，还体现在对未来预测和判断误差的降低上。综上所得，好奇心对于人成长成才都大有裨益。</li></ul><h1 id="好奇名人"><a href="#好奇名人" class="headerlink" title="好奇名人"></a>好奇名人</h1><h2 id="1-牛顿"><a href="#1-牛顿" class="headerlink" title="1.牛顿"></a>1.牛顿</h2><p>​    成熟后的苹果为什么往下掉，而不是往天上掉，这个问题牛顿很好奇，这也促使他发现万有引力定律。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image2.jpg"><h2 id="2-伽利略"><a href="#2-伽利略" class="headerlink" title="2.伽利略"></a>2.伽利略</h2><p>​    400多年前，伽利略用铁桶煮水时发现：水开时，铁桶水位上升，当水冷后，水位就降下来。他对这个现象产生了强烈的好奇感，并由此受到启发，就有了后来的体温计。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image3.jpg"><h2 id="3-德莱斯"><a href="#3-德莱斯" class="headerlink" title="3.德莱斯"></a>3.德莱斯</h2><p>​    200年前，德莱斯发现一个现象：伐木工人在山上会将砍倒后的树的树枝清理掉，把树往山下滚。他很好奇：为什么圆的树木可以快速滚动？这促使他发明了自行车。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image4.jpg"><h1 id="怎么办？"><a href="#怎么办？" class="headerlink" title="怎么办？"></a>怎么办？</h1><p>​    我也是查阅了一些文章，其中在搜狐网上面得到了一些方法。这里我就引用，供参考。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image5.jpg"><h2 id="1-创设满足孩子好奇心的环境"><a href="#1-创设满足孩子好奇心的环境" class="headerlink" title="1.创设满足孩子好奇心的环境"></a>1.创设满足孩子好奇心的环境</h2><p>​    对孩子来说，日常生活环境中到处都蕴含着可供探索的资源，随便哪个情境，都可能成为引发孩子好奇心、引导孩子提出问题的学习场所。家长要做的首先是消除环境中的不安全因素，然后就可以依据孩子的兴趣提供各种实践材料和工具，放手让孩子去探索。</p><h2 id="2-不要以成人的思维约束孩子"><a href="#2-不要以成人的思维约束孩子" class="headerlink" title="2. 不要以成人的思维约束孩子"></a>2. 不要以成人的思维约束孩子</h2><p>​    由于年幼宝宝的认知有限，可能会有很奇怪、超出成人逻辑的设想，这个时候家长切忌以成人的思维方式来束缚孩子的想象力。比如孩子观察到绝大多数落叶掉在地上都是“掌心向下”，他会认为那是“落叶宝宝”在亲吻大地，家长可以鼓励这个想法，而不必强调说“落叶不是宝宝，落叶只是飘下来，落叶没有亲吻大地”。</p><h2 id="3-满足好奇心的同时锻炼孩子的生活能力"><a href="#3-满足好奇心的同时锻炼孩子的生活能力" class="headerlink" title="3.满足好奇心的同时锻炼孩子的生活能力"></a>3.满足好奇心的同时锻炼孩子的生活能力</h2><p>​    好奇的孩子多半有超乎常人的“动手欲望”。有时表现为孩子一定要拿家中的电视遥控器当“玩具”，不给他就大哭大闹；或者还够不着水池的孩子，自告奋勇在帮家长洗菜、做饭，与其担心他们“闯祸”，破坏遥控器或弄伤自己，不如教给他各种用具的使用方法。只要家长因势利导，重要的收获还包括锻炼孩子的生活能力，帮助他在未来的探索活动中积累基本的经验，也更有自信。</p><h2 id="4-鼓励孩子有更多非常规的玩法"><a href="#4-鼓励孩子有更多非常规的玩法" class="headerlink" title="4. 鼓励孩子有更多非常规的玩法"></a>4. 鼓励孩子有更多非常规的玩法</h2><p>​    好奇心何以能够上升为创造力？有时靠的正是一种非常规的的游戏手段。比如孩子把自己爱吃的怪味豆和鱼皮花生埋进土里等待“发芽”，家长不要迫不及待地干涉孩子，试图将孩子拽回所谓“正确的轨道”上来，这样恰恰使孩子错过了许多发现问题、解决问题的机会。</p><h2 id="5-做“不知道”家长"><a href="#5-做“不知道”家长" class="headerlink" title="5.做“不知道”家长"></a>5.做“不知道”家长</h2><p>​    做“不知道”家长，有时候也会激发孩子的探究心。家长对孩子的问题一概敷衍说“不知道”，当然会打击孩子“打破砂锅问到底”的热情，但若孩子每次问“为什么”，家长都忙不迭地给出标准答案，不见得是好事，这等于是替孩子省却了探究的过程，而培养孩子好奇心的最佳方式是教会孩子“研究方法”，教他学会思考，学会去找寻正确的答案。</p><h2 id="6-适时提出建议"><a href="#6-适时提出建议" class="headerlink" title="6.适时提出建议"></a>6.适时提出建议</h2><p>​    虽然在不危及宝宝安全的前提下，家长不要过分干涉宝宝的思考和决策过程，做“不知道”家长。但在宝宝面临问题时，应适时提出建议，并尽量避免给予负面、主观的说词，例如：“你怎么这么笨？”“上次不是已经教过你了吗?怎么这次还不会！”而应该试着将指导者的立场转化为辅导者，站在客观的角度上给宝宝提出建议：“你要不要用这个方法试试看？”这样不但可以给宝宝自己解答好奇心一个正确的方向，也能让他感受到父母对自己的尊重。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>​    肯定方法不止这6种，但也不一定6种爸爸妈妈们都要会，掌握其中几个点灵活运用起来，我相信，是能够最大限度留住宝贝们的“好奇”精灵，这将让孩子受益终身。</p><p>参考：<a href="https://www.sohu.com/a/152534069_809987" target="_blank" rel="noopener">https://www.sohu.com/a/152534069_809987</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 育儿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-必须知道的nginx.conf</title>
      <link href="/2019/01/26/Nginx-%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84nginx.conf/"/>
      <url>/2019/01/26/Nginx-%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84nginx.conf/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nginx是什么以及它有多厉害这里就不多赘述，大家可自行上网科普下。我们先了解下Nginx几个常用功能，当然这不是这篇博客的重点（如何使用后面再逐一介绍），在这里我们将重点记录下nginx.conf配置文件。</p><h1 id="功能概要"><a href="#功能概要" class="headerlink" title="功能概要"></a>功能概要</h1><p>看图理解，多的不说。</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1.正向代理"></a>1.正向代理</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image1.jpg"><h3 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2.反向代理"></a>2.反向代理</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image2.jpg"><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="1-轮询策略"><a href="#1-轮询策略" class="headerlink" title="1.轮询策略"></a>1.轮询策略</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image3.jpg"><h3 id="2-加权轮询"><a href="#2-加权轮询" class="headerlink" title="2.加权轮询"></a>2.加权轮询</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image4.jpg"><h3 id="3-IP-Hash"><a href="#3-IP-Hash" class="headerlink" title="3.IP Hash"></a>3.IP Hash</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image5.jpg"><h2 id="web缓存"><a href="#web缓存" class="headerlink" title="web缓存"></a>web缓存</h2><p>Nginx可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。</p><h1 id="配置文件nginx-conf"><a href="#配置文件nginx-conf" class="headerlink" title="配置文件nginx.conf"></a>配置文件nginx.conf</h1><p>默认内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理后其结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个模块功能注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</span><br><span class="line"></span><br><span class="line">2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</span><br><span class="line"></span><br><span class="line">3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</span><br><span class="line"></span><br><span class="line">4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</span><br><span class="line"></span><br><span class="line">5、location块：配置请求的路由，以及各种页面的处理情况。</span><br></pre></td></tr></table></figure><h1 id="配置例子"><a href="#配置例子" class="headerlink" title="配置例子"></a>配置例子</h1><p>下面有个配置案例作为参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &apos;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&apos;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/knowledgesea/p/5175711.html" target="_blank" rel="noopener">https://www.cnblogs.com/knowledgesea/p/5175711.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL-Let&#39;s Encrypt 免费证书制作</title>
      <link href="/2019/01/26/SSL-Let&#39;s%20Encrypt%20%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E5%88%B6%E4%BD%9C/"/>
      <url>/2019/01/26/SSL-Let&#39;s%20Encrypt%20%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>是Let’s Encrypt推出的获取证书的客户端，可以让我们免费快速地获取Let’s Encrypt证书。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-Certbot"><a href="#1-Certbot" class="headerlink" title="1.Certbot"></a>1.Certbot</h2><p>进入<a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>官网,选取使用的软件和系统环境，然后会出现安装方法（Nginx+Ubuntu 14.04），如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image1.jpg"><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install software-properties-common</span><br><span class="line">$ sudo add-apt-repository universe</span><br><span class="line">$ sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure><h2 id="2-申请"><a href="#2-申请" class="headerlink" title="2.申请"></a>2.申请</h2><p>上面个安装无误下执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1.example为你的项目根目录，我这里以我的静态博客为例，根目录为/var/www/blog</span><br><span class="line">2.后面则为你的域名，如myhaloj.com,www.myhaloj.com</span><br></pre></td></tr></table></figure><p>另外过程中会让输入邮箱，请正确输入，如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image2.jpg"><p>然后会收到一封邮件，按引导确认下。</p><p>申请成功后，证书会自动保存在<code>/etc/letsencrypt/live/</code>这个路径下：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image3.jpg"><h2 id="3-Nginx配置证书"><a href="#3-Nginx配置证书" class="headerlink" title="3.Nginx配置证书"></a>3.Nginx配置证书</h2><p>配置如下（这里是以个人blog静态站为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">   listen 80;</span><br><span class="line">   server_name www.myhaloj.com myhaloj.com;</span><br><span class="line">   return 301 https://www.myhaloj.com$request_uri;</span><br><span class="line"> &#125; </span><br><span class="line">server &#123;</span><br><span class="line">   listen 443 ssl;</span><br><span class="line">   server_name www.myhaloj.com myhaloj.com;</span><br><span class="line">   ssl on;</span><br><span class="line">   ssl_certificate /etc/letsencrypt/live/myhaloj.com/fullchain.pem;</span><br><span class="line">   ssl_certificate_key /etc/letsencrypt/live/myhaloj.com/privkey.pem;</span><br><span class="line">   ssl_session_timeout 5m;</span><br><span class="line">   ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">   ssl_prefer_server_ciphers on;</span><br><span class="line">   </span><br><span class="line">   location / &#123;</span><br><span class="line">      root /var/www/blog;</span><br><span class="line">      index  index.html index.htm;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-阿里云ECS证书上传部署"><a href="#4-阿里云ECS证书上传部署" class="headerlink" title="4.阿里云ECS证书上传部署"></a>4.阿里云ECS证书上传部署</h2><p>来到阿里云SSL证书控制台，将上面制作的证书上传上去，然后控制台将会出现证书，如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image4.jpg"><p>让后在证书下面选择<code>部署到云产品</code>选项中进行设置即可。</p><h2 id="5-证书自动续期"><a href="#5-证书自动续期" class="headerlink" title="5.证书自动续期"></a>5.证书自动续期</h2><p>细心的你可以看见上面制作的证书效期只有3个月，如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image5.jpg"><p>自动续期配置：</p><p>1.先到任意合适的目录下新建一个文件，文件名自己定义即可：如autoRenewal，只要方便自己管理。</p><p>2.然后在文件里面编辑内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 */12 * * * certbot renew --quiet --renew-hook &quot;/etc/init.d/nginx reload&quot;</span><br></pre></td></tr></table></figure><p>保存退出</p><p>3.运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab autoRenewal</span><br></pre></td></tr></table></figure><p>原理是autoRenewal里存入了一个每天检查更新两次的命令，这个命令会自动续期服务器里存在的来自Certbot的SSL证书。然后把autoRenewal里存在的命令导入进Certbot的定时程序里。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了上面<a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>，通过命令方式申请免费证书外，国内的便宜SSL证书提供商给他家提供了基于图形化操作的SLL证书制作流程，这里给出链接，不做演示。</p><p>便宜SSL：<a href="https://www.pianyissl.com/?i121522" target="_blank" rel="noopener">https://www.pianyissl.com</a></p>]]></content>
      
      
      <categories>
          
          <category> SSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL-付费和免费</title>
      <link href="/2019/01/26/SSL-%E4%BB%98%E8%B4%B9%E5%92%8C%E5%85%8D%E8%B4%B9/"/>
      <url>/2019/01/26/SSL-%E4%BB%98%E8%B4%B9%E5%92%8C%E5%85%8D%E8%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>目前国内外的科技巨头企业，如google，apple，百度等，不断推动HTTPS的普及，SSL证书作为HTTPS安全协议必备配置，便成为网站，App开发最重要的部署项目之一。</p><p>SSL证书的作用—加密信息，提高可信度。</p><p>各大网站之所以选择 SSL 是因为它对网络发送的敏感信息进行加密，只有目标接收方才能对信息进行解密，查看信息的内容。这样可以防止信息在传输 过程中被第三方窃取或者篡改，确保信息完整的传送到目标服务器。</p><p>SSL 证书可以验证网站的真实身份，确保数据来源的正确，并且能增强用户对网站信任：Chrome、Firefox 等浏览器会对 HTTPS 网站显示安全标志，HTTP 网站则显示不安全网站。百度、谷歌等搜索引擎也已经将 HTTPS 网站权重加大，HTTPS 网站在搜索列表中 排名更加靠前。</p><h1 id="免费-amp-付费"><a href="#免费-amp-付费" class="headerlink" title="免费&amp;付费"></a>免费&amp;付费</h1><p>免费SSL证书即为免费型的 DV SSL 证书，可以保护一个完整的域名，不支持通配符。免费 SSL 证书只需验证域名信息，但签发速度相对较慢的。</p><p>付费 SSL 证书主要分为付费的 DV SSL 证书、企业型 OV SSL 证书和增强型 EV SSL 证书三大类。OV SSL 证书、EV SSL 证书证书对申请者都需 要做严格的身份审核验证，需要提供可信身份证明。签发时间一般在 3 至 15 个工作日。相比 DV SSL 证书，OV SSL 证书、EV SSL 证书需要严格 的身份审核，其中涉及的资料包括申请人授权书、营业执照、组织机构代码证等等的重要信息。</p><p>免费 DV 证书对于个人博客、小微企业、API 服务等的服务，可以节省一笔不菲的开支，并且免费 DV 证书足以满足基本的加密要求，提高用户对网站的信任，以及搜索引擎对SEO的优化。当然如果在有经济条件的情况下，付费 SSL 证书不失为一种更好的选择;对于中大型企业网站、金融平台和政府机关等付费的 OV、EV 证书则更加适用。付费 SSL 证书对信息传输过程有更高的加密验证，还可以通过 SSL 证书来彰显品牌形象，为消费者塑造更加可靠的形象。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，如果企业不差钱，且注重品牌形象，则可选择付费版SSL证书，反之，免费版将是不错的选择。</p><p>参考：<a href="https://www.jianshu.com/p/0b52288fca67" target="_blank" rel="noopener">https://www.jianshu.com/p/0b52288fca67</a></p><p>如果需要代办付费版SSL证书申请，原文作者也给出一个链接：<a href="http://ssl.idcspy.net/（没收广告费的哦）" target="_blank" rel="noopener">http://ssl.idcspy.net/（没收广告费的哦）</a></p>]]></content>
      
      
      <categories>
          
          <category> SSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL-阿里云免费证书</title>
      <link href="/2019/01/26/SSL-%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/"/>
      <url>/2019/01/26/SSL-%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-SSL证书控制台"><a href="#1-SSL证书控制台" class="headerlink" title="1.SSL证书控制台"></a>1.SSL证书控制台</h2><p>登陆阿里云控制台，在顶部搜索框输入<code>ssl</code>,会出现如下提示，点击进入<code>ssl(应用安全)控制台</code>：</p><img src="/2019/01/26/SSL-阿里云免费证书/image1.jpg"><h2 id="2-制作并提交申请"><a href="#2-制作并提交申请" class="headerlink" title="2.制作并提交申请"></a>2.制作并提交申请</h2><p>根据界面提示和指引制作免费证书并提交由阿里云审核，然后耐心等待审核，一般一天内会给出结果，通过后如下图：</p><img src="/2019/01/26/SSL-阿里云免费证书/image2.jpg"><h2 id="3-部署到云产品"><a href="#3-部署到云产品" class="headerlink" title="3.部署到云产品"></a>3.部署到云产品</h2><p>点击后设置如下图，这里仅供参考：</p><img src="/2019/01/26/SSL-阿里云免费证书/image3.jpg"><h2 id="4-安全组配置"><a href="#4-安全组配置" class="headerlink" title="4.安全组配置"></a>4.安全组配置</h2><p>别忘了ECS实例安全组配置里面端口范围配置<code>443/443</code>（不然不行的哦）：</p><img src="/2019/01/26/SSL-阿里云免费证书/image4.jpg">]]></content>
      
      
      <categories>
          
          <category> SSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-验证码(5)</title>
      <link href="/2019/01/25/Shiro-%E9%AA%8C%E8%AF%81%E7%A0%81(5)/"/>
      <url>/2019/01/25/Shiro-%E9%AA%8C%E8%AF%81%E7%A0%81(5)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>思路：添加一个Filter继承<code>FormAuthenticationFilter</code>，FormAuthenticationFilter负责表单验证，shiro会先在FormAuthenticationFilter子类去校验验证码，然后再去做身份验证。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h2><p>在pom.xml添加如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.kaptcha&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-拓展UsernamePasswordToken"><a href="#2-拓展UsernamePasswordToken" class="headerlink" title="2.拓展UsernamePasswordToken"></a>2.拓展UsernamePasswordToken</h2><p>来到shiro包新建CaptchaUsernamePasswordToken：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"></span><br><span class="line">//拓展登陆验证字段</span><br><span class="line">public class CaptchaUsernamePasswordToken extends UsernamePasswordToken &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serivalVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    //验证码字符串</span><br><span class="line">    private String captcha;</span><br><span class="line"></span><br><span class="line">    public CaptchaUsernamePasswordToken(String username, char[] password, boolean rememberMe, String host, String captcha) &#123;</span><br><span class="line">        super(username,password,rememberMe, host);</span><br><span class="line">        this.captcha = captcha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static long getSerivalVersionUID() &#123;</span><br><span class="line">        return serivalVersionUID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCaptcha() &#123;</span><br><span class="line">        return captcha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCaptcha(String captcha) &#123;</span><br><span class="line">        this.captcha = captcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-验证码异常类"><a href="#2-验证码异常类" class="headerlink" title="2.验证码异常类"></a>2.验证码异常类</h2><p>在exception包添加验证码异常类IncorrectCaptchaException：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"></span><br><span class="line">// 校验码异常</span><br><span class="line">public class IncorrectCaptchaException extends AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serivalVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    public IncorrectCaptchaException() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IncorrectCaptchaException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IncorrectCaptchaException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IncorrectCaptchaException(Throwable cause) &#123;</span><br><span class="line">        super(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-校验Filter"><a href="#3-校验Filter" class="headerlink" title="3.校验Filter"></a>3.校验Filter</h2><p>来到filter包新建KaptchaFilter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import com.google.code.kaptcha.Constants;</span><br><span class="line">import com.mj.test.shiro1.config.shiro.CaptchaUsernamePasswordToken;</span><br><span class="line">import com.mj.test.shiro1.exception.IncorrectCaptchaException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;</span><br><span class="line">import org.apache.shiro.web.util.WebUtils;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">public class KaptchaFilter extends FormAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    public static final String DEFAULT_CAPTCHA_PARAM = &quot;captcha&quot;;</span><br><span class="line"></span><br><span class="line">    private String captchaParam = DEFAULT_CAPTCHA_PARAM;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        CaptchaUsernamePasswordToken token = createToken(request, response);</span><br><span class="line">        String username = token.getUsername();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            doCaptchaValidate((HttpServletRequest) request, token);</span><br><span class="line">            Subject subject = getSubject(request, response);</span><br><span class="line">            subject.login(token);</span><br><span class="line">            return onLoginSuccess(token, subject, request, response);</span><br><span class="line"></span><br><span class="line">        &#125; catch (AuthenticationException e) &#123;</span><br><span class="line">            return onLoginFailure(token,e,request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证码校验</span><br><span class="line">     * @param request</span><br><span class="line">     * @param token</span><br><span class="line">     */</span><br><span class="line">    protected void doCaptchaValidate(HttpServletRequest request, CaptchaUsernamePasswordToken token) &#123;</span><br><span class="line"></span><br><span class="line">        // 从session中获取图形吗字符串</span><br><span class="line">        String captcha = (String) request.getSession().getAttribute(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line"></span><br><span class="line">        // 校验</span><br><span class="line">        if (captcha == null || !captcha.equals(token.getCaptcha())) &#123;</span><br><span class="line">            throw new IncorrectCaptchaException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected CaptchaUsernamePasswordToken createToken(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line"></span><br><span class="line">        String username = getUsername(request);</span><br><span class="line">        String password = getPassword(request);</span><br><span class="line">        String host = getHost(request);</span><br><span class="line">        boolean rememberMe = isRememberMe(request);</span><br><span class="line">        String captcha = getCaptcha(request);</span><br><span class="line"></span><br><span class="line">        return new CaptchaUsernamePasswordToken(username,password.toCharArray(),rememberMe,host,captcha);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected  String getCaptcha(ServletRequest request) &#123;</span><br><span class="line">        return WebUtils.getCleanParam(request, getCaptchaParam());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存异常对象到request</span><br><span class="line">     * @param request</span><br><span class="line">     * @param ae</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void setFailureAttribute(ServletRequest request, org.apache.shiro.authc.AuthenticationException ae) &#123;</span><br><span class="line">        request.setAttribute(getFailureKeyAttribute(), ae);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCaptchaParam() &#123;</span><br><span class="line">        return captchaParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCaptchaParam(String captchaParam) &#123;</span><br><span class="line">        this.captchaParam = captchaParam;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h2><p>来到ShiroConfiguration中配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边（重点，重点，重点）</span><br><span class="line"> * @param securityManager</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) &#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">    //验证码过滤器</span><br><span class="line">    Map&lt;String, Filter&gt; filterMap = shiroFilterFactoryBean.getFilters();</span><br><span class="line">    KaptchaFilter kaptchaFilter = new KaptchaFilter();</span><br><span class="line">    filterMap.put(&quot;kaptchaFilter&quot;, kaptchaFilter);</span><br><span class="line">    //拦截器</span><br><span class="line">    Map&lt;String, String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">    //图片验证码(kaptcha框架)</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/login&quot;, &quot;kaptchaFilter&quot;);</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/kaptcha.jpg&quot;, &quot;anon&quot;);</span><br><span class="line">    //配置记住我,认证通过可以访问的地址</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/index&quot;, &quot;user&quot;);</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/&quot;, &quot;user&quot;);</span><br><span class="line">    //配置退出过滤器,其中的具体代码Shiro已经替我们实现了</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/logout&quot;, &quot;logout&quot;);</span><br><span class="line">    //anon:有一些比如anon表示不需要验证身份就能访问等</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/favicon.ico&quot;, &quot;anon&quot;);</span><br><span class="line">    //authc:所有url都必须认证通过才可以访问</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);</span><br><span class="line">    </span><br><span class="line">    shiroFilterFactoryBean.setFilters(filterMap);</span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);</span><br><span class="line">    shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;);</span><br><span class="line">    //这里设置403并不会起作用，参考http://www.jianshu.com/p/e03f5b54838c</span><br><span class="line">    shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/403&quot;);</span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">    return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-启动类注册"><a href="#5-启动类注册" class="headerlink" title="5.启动类注册"></a>5.启动类注册</h2><p>来到启动类注册KaptchaServlet：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 配置kaptcha图片验证码框架提供的Servlet</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public ServletRegistrationBean kaptchaServlet() &#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new KaptchaServlet(), &quot;/kaptcha.jpg&quot;);</span><br><span class="line">    registrationBean.addInitParameter(Constants.KAPTCHA_SESSION_CONFIG_KEY,</span><br><span class="line">            Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">    registrationBean.addInitParameter(Constants.KAPTCHA_IMAGE_HEIGHT,&quot;60&quot;); registrationBean.addInitParameter(Constants.KAPTCHA_TEXTPRODUCER_FONT_SIZE,&quot;50&quot;);</span><br><span class="line">    registrationBean.addInitParameter(Constants.KAPTCHA_BORDER_THICKNESS,&quot;1&quot;);</span><br><span class="line">    registrationBean.addInitParameter(Constants.KAPTCHA_TEXTPRODUCER_FONT_COLOR, &quot;red&quot;);</span><br><span class="line">    return registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-login-html"><a href="#6-login-html" class="headerlink" title="6.login.html"></a>6.login.html</h2><p>界面前面已经都配置好了，这里不再重述。</p><h2 id="7-验证码测试"><a href="#7-验证码测试" class="headerlink" title="7.验证码测试"></a>7.验证码测试</h2><p>在登陆时，如果不如如验证码，则无法登陆。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此基于Spring boot 使用Shiro的例子，实现了身份校验，权限校验，缓存和记住我，以及验证码。</p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-缓存&amp;remenberMe(4)</title>
      <link href="/2019/01/25/Shiro-%E7%BC%93%E5%AD%98&amp;remenberMe(4)/"/>
      <url>/2019/01/25/Shiro-%E7%BC%93%E5%AD%98&amp;remenberMe(4)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们实现了shiro身份认证和权限验证，但我们会发现一个问题：当Admin用户登录后，他每次访问<code>http://localhost:8080/userInfo/userDel</code>时，就会进行一次权限验证，我们会在控制台看见多次<code>开始权限配置</code>的打印。这显然是不合理的。如何处理呢？</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h2><p>添加如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-注入缓存"><a href="#2-注入缓存" class="headerlink" title="2.注入缓存"></a>2.注入缓存</h2><p>来到<code>ShiroConfiguration</code>添加如下方法（前面已经添加过的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 注入缓存</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public EhCacheManager ehCacheManager() &#123;</span><br><span class="line">    System.out.println(&quot;ShiroConfiguration.getEhCacheManager()&quot;);</span><br><span class="line">    EhCacheManager ehCacheManager = new EhCacheManager();</span><br><span class="line">    ehCacheManager.setCacheManagerConfigFile(&quot;classpath:config/ehcache-shiro.xml&quot;);</span><br><span class="line">    return ehCacheManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入到<code>SecurityManager</code>中（前面已经添加过的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *1.SecurityManager 是 Shiro 架构的核心，通过它来链接Realm和用户(文档中称之为Subject.)</span><br><span class="line"> * 2.注入缓存对象</span><br><span class="line"> * 3.注入rememberMeManager;</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public SecurityManager securityManager() &#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(myShiroRealm());</span><br><span class="line">    securityManager.setCacheManager(ehCacheManager());</span><br><span class="line">    securityManager.setRememberMeManager(cookieRememberMeManager());</span><br><span class="line">    return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-ehcache-shiro-xml"><a href="#3-ehcache-shiro-xml" class="headerlink" title="3.ehcache-shiro.xml"></a>3.ehcache-shiro.xml</h2><p>来到<code>resources/config</code>添加ehcache-shiro.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;ehcache name=&quot;es&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;diskStore path=&quot;java.io.tmpdir&quot;/&gt;</span><br><span class="line">    &lt;defaultCache</span><br><span class="line">            maxElementsInMemory=&quot;10000&quot;</span><br><span class="line">            eternal=&quot;false&quot;</span><br><span class="line">            timeToIdleSeconds=&quot;120&quot;</span><br><span class="line">            timeToLiveSeconds=&quot;120&quot;</span><br><span class="line">            overflowToDisk=&quot;false&quot;</span><br><span class="line">            diskPersistent=&quot;false&quot;</span><br><span class="line">            diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;!-- 登录记录缓存锁定10分钟 --&gt;</span><br><span class="line">    &lt;cache name=&quot;passwordRetryCache&quot;</span><br><span class="line">           maxEntriesLocalHeap=&quot;2000&quot;</span><br><span class="line">           eternal=&quot;false&quot;</span><br><span class="line">           timeToIdleSeconds=&quot;3600&quot;</span><br><span class="line">           timeToLiveSeconds=&quot;0&quot;</span><br><span class="line">           overflowToDisk=&quot;false&quot;</span><br><span class="line">           statistics=&quot;true&quot;&gt;</span><br><span class="line">    &lt;/cache&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure><h2 id="4-测试缓存"><a href="#4-测试缓存" class="headerlink" title="4.测试缓存"></a>4.测试缓存</h2><p>启动项目后，登陆，再多次访问<code>http://localhost:8080/userInfo/userDel</code>，可见控制台只打印了一次<code>开始权限配置</code>，配置成功；</p><h2 id="5-来到ShiroConfiguration"><a href="#5-来到ShiroConfiguration" class="headerlink" title="5.来到ShiroConfiguration"></a>5.来到ShiroConfiguration</h2><p>来到<code>ShiroConfiguration</code>添加（前面已经添加过的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * cookie对象</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public SimpleCookie rememberMeCookie() &#123;</span><br><span class="line">    System.out.println(&quot;ShiroConfiguration.rememberMeCookie()&quot;);</span><br><span class="line">    //这个参数是cookie的名称，对应前端的checkbox的name = rememberMe</span><br><span class="line">    SimpleCookie simpleCookie = new SimpleCookie(&quot;rememberMe&quot;);</span><br><span class="line">    //&lt;!-- 记住我cookie生效时间30天 ,单位秒;--&gt;</span><br><span class="line">    simpleCookie.setMaxAge(259200);</span><br><span class="line">    return simpleCookie;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * cookie管理对象</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public CookieRememberMeManager cookieRememberMeManager() &#123;</span><br><span class="line">    System.out.println(&quot;ShiroConfiguration.rememberMeManager()&quot;);</span><br><span class="line">    CookieRememberMeManager manager = new CookieRememberMeManager();</span><br><span class="line">    manager.setCookie(rememberMeCookie());</span><br><span class="line">    return manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入到<code>SecurityManager</code>中（前面已经添加过的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *1.SecurityManager 是 Shiro 架构的核心，通过它来链接Realm和用户(文档中称之为Subject.)</span><br><span class="line"> * 2.注入缓存对象</span><br><span class="line"> * 3.注入rememberMeManager;</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public SecurityManager securityManager() &#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(myShiroRealm());</span><br><span class="line">    securityManager.setCacheManager(ehCacheManager());</span><br><span class="line">    securityManager.setRememberMeManager(cookieRememberMeManager());</span><br><span class="line">    return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-ShiroFilterFactoryBean"><a href="#6-ShiroFilterFactoryBean" class="headerlink" title="6.ShiroFilterFactoryBean"></a>6.ShiroFilterFactoryBean</h2><p>添加记住我过滤user,添加user过滤器的资源，在用户登陆时选择记住我，验证通过后，用户便可访问。（我这里把所有的配置都放在这里了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边（重点，重点，重点）</span><br><span class="line"> * @param securityManager</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) &#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">    //验证码过滤器</span><br><span class="line">    Map&lt;String, Filter&gt; filterMap = shiroFilterFactoryBean.getFilters();</span><br><span class="line">    KaptchaFilter kaptchaFilter = new KaptchaFilter();</span><br><span class="line">    filterMap.put(&quot;kaptchaFilter&quot;, kaptchaFilter);</span><br><span class="line">    //拦截器</span><br><span class="line">    Map&lt;String, String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">    //图片验证码(kaptcha框架)</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/login&quot;, &quot;kaptchaFilter&quot;);</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/kaptcha.jpg&quot;, &quot;anon&quot;);</span><br><span class="line">    //配置记住我,认证通过可以访问的地址</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/index&quot;, &quot;user&quot;);</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/&quot;, &quot;user&quot;);</span><br><span class="line">    //配置退出过滤器,其中的具体代码Shiro已经替我们实现了</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/logout&quot;, &quot;logout&quot;);</span><br><span class="line">    //anon:有一些比如anon表示不需要验证身份就能访问等</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/favicon.ico&quot;, &quot;anon&quot;);</span><br><span class="line">    //authc:所有url都必须认证通过才可以访问</span><br><span class="line">    filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);</span><br><span class="line">    </span><br><span class="line">    shiroFilterFactoryBean.setFilters(filterMap);</span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);</span><br><span class="line">    shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;);</span><br><span class="line">    //这里设置403并不会起作用，参考http://www.jianshu.com/p/e03f5b54838c</span><br><span class="line">    shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/403&quot;);</span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">    return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-记住我验证"><a href="#7-记住我验证" class="headerlink" title="7.记住我验证"></a>7.记住我验证</h2><p>启动项目，勾选记住我，正常登陆后，再关闭浏览器，便可直接访问<code>http://localhost:8080/index</code>。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在配置filterChainDefinitionMap时，因为过滤链定义是从上向下顺序执行，所以<code>filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);</code>配置放在最下面，否则记住我是不起作用的哦！</p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-权限(3)</title>
      <link href="/2019/01/25/Shiro-%E6%9D%83%E9%99%90(3)/"/>
      <url>/2019/01/25/Shiro-%E6%9D%83%E9%99%90(3)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在第二篇《Shiro-验证(2)》，项目运行后，当登陆验证通过后，几个页面都是可以正常访问的，但我们的<code>System.out.println(&quot;开始权限配置&quot;);</code>这句不会打印，也就是说，任何用户只要通过验证登陆后，程序并未对用户进行角色授权，现实开发中这是坚决不允许出现的情况。为此我们需要进一步做如下操作。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-UserInfoController"><a href="#1-UserInfoController" class="headerlink" title="1. UserInfoController"></a>1. UserInfoController</h2><p>新建UserInfoController：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/userInfo&quot;)</span><br><span class="line">public class UserInfoController &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户查询.</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/userList&quot;)</span><br><span class="line">    public String userInfo()&#123;</span><br><span class="line">        return &quot;userInfo&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户添加;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/userAdd&quot;)</span><br><span class="line">    public String userInfoAdd()&#123;</span><br><span class="line">        return &quot;userAdd&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户删除</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/userDel&quot;)</span><br><span class="line">    public String userInfoDel() &#123;</span><br><span class="line">        return &quot;userDel&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-开启Shiro-AOP注解支持"><a href="#2-开启Shiro-AOP注解支持" class="headerlink" title="2.开启Shiro AOP注解支持"></a>2.开启Shiro AOP注解支持</h2><p>在ShiroConfiguration中添加如下代码（实质上，在《Shiro-验证(2)》中已经配置好了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  开启shiro aop注解支持.</span><br><span class="line"> *  使用代理方式;所以需要开启代码支持;</span><br><span class="line"> * @param securityManager</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)&#123;</span><br><span class="line">    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">    return authorizationAttributeSourceAdvisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-再来到UserInfoController"><a href="#3-再来到UserInfoController" class="headerlink" title="3.再来到UserInfoController"></a>3.再来到UserInfoController</h2><p>添加权限注解如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/userInfo&quot;)</span><br><span class="line">public class UserInfoController &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户查询.</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/userList&quot;)</span><br><span class="line">    @RequiresPermissions(&quot;userInfo:view&quot;)</span><br><span class="line">    public String userInfo()&#123;</span><br><span class="line">        return &quot;userInfo&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户添加;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/userAdd&quot;)</span><br><span class="line">    @RequiresPermissions(&quot;userInfo:add&quot;)</span><br><span class="line">    public String userInfoAdd()&#123;</span><br><span class="line">        return &quot;userAdd&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户删除</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/userDel&quot;)</span><br><span class="line">    @RequiresPermissions(&quot;userInfo:del&quot;)</span><br><span class="line">    public String userInfoDel() &#123;</span><br><span class="line">        return &quot;userDel&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>这时我们登陆后在访问<code>http://localhost:8080/userInfo/userDel</code>将会抛出异常，同时控制台将打印<code>开始权限配置</code>这句话，说明权限验证生效了。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="1-MyExceptionResolver"><a href="#1-MyExceptionResolver" class="headerlink" title="1.MyExceptionResolver"></a>1.MyExceptionResolver</h2><p>在exception包下创建MyExceptionResolver：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.authz.UnauthorizedException;</span><br><span class="line">import org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class MyExceptionResolver implements HandlerExceptionResolver &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &#123;</span><br><span class="line">        if (e instanceof UnauthorizedException) &#123;</span><br><span class="line">            ModelAndView mv = new ModelAndView(&quot;/403&quot;);</span><br><span class="line">            return mv;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-启动类中注册bean"><a href="#2-启动类中注册bean" class="headerlink" title="2.启动类中注册bean"></a>2.启动类中注册bean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 注册统一异常处理bean</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public MyExceptionResolver myExceptionResolver() &#123;</span><br><span class="line">    return new MyExceptionResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>到此用户在通过Shiro身份认证后，是否有权限访问其它页面进行操作的权限验证也实现。当然这里是比较简单的例子，但通过例子理解原理后，在一步步拓展更复杂的功能，便好处理多了。</p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-验证(2)</title>
      <link href="/2019/01/25/Shiro-%E9%AA%8C%E8%AF%81(2)/"/>
      <url>/2019/01/25/Shiro-%E9%AA%8C%E8%AF%81(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇搭建的工程基础上，我们使用shiro实现身份校验和角色设置。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-pom-xml添加配置"><a href="#1-pom-xml添加配置" class="headerlink" title="1.pom.xml添加配置"></a>1.pom.xml添加配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-数据库填充数据"><a href="#2-数据库填充数据" class="headerlink" title="2.数据库填充数据"></a>2.数据库填充数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO sys_permission VALUES (&apos;1&apos;, 1, &apos;用户管理&apos;, &apos;0&apos;, &apos;0/&apos;, &apos;userInfo:view&apos;, &apos;menu&apos;, &apos;userInfo/userList&apos;);</span><br><span class="line">INSERT INTO sys_permission VALUES (&apos;2&apos;, 1, &apos;用户添加&apos;, &apos;1&apos;, &apos;0/1&apos;, &apos;userInfo:add&apos;, &apos;button&apos;, &apos;userInfo/userAdd&apos;);</span><br><span class="line">INSERT INTO sys_permission VALUES (&apos;3&apos;, 1, &apos;用户删除&apos;, &apos;1&apos;, &apos;0/1&apos;, &apos;userInfo:del&apos;, &apos;button&apos;, &apos;userInfo/userDel&apos;);</span><br><span class="line">INSERT INTO sys_role VALUES (&apos;1&apos;, 1, &apos;管理员&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO sys_role VALUES (&apos;2&apos;, 1, &apos;VIP会员&apos;, &apos;vip&apos;);</span><br><span class="line">INSERT INTO user_info (uid,username,name,password,salt,state) VALUES (&apos;1&apos;, &apos;admin&apos;,&apos;管理员&apos; , &apos;d3c59d25033dbf980d29554025c23a75&apos;, &apos;8d78869f470951332959580424d4bf4f&apos;, 0);</span><br><span class="line">INSERT INTO sys_role_permission VALUES (&apos;1&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO sys_role_permission VALUES (&apos;1&apos;, &apos;2&apos;);</span><br><span class="line">INSERT INTO sys_user_role VALUES (&apos;1&apos;, &apos;1&apos;);</span><br></pre></td></tr></table></figure><p>注意：如果插入抛出类似如下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1366 (HY000): Incorrect string value: &apos;\xD3\xC3\xBB\xA7\xB2\xE9...&apos; for column &apos;name&apos; at row 1</span><br></pre></td></tr></table></figure><p>解决如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set names gbk;</span><br></pre></td></tr></table></figure><h2 id="3-Realms"><a href="#3-Realms" class="headerlink" title="3.Realms"></a>3.Realms</h2><p>在项目中创建config包，并在config包下再创建一个shiro包，再在shiro包下创建<code>MyShiroRealm</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import com.mj.test.shiro1.entity.SysPermission;</span><br><span class="line">import com.mj.test.shiro1.entity.SysRole;</span><br><span class="line">import com.mj.test.shiro1.entity.UserInfo;</span><br><span class="line">import com.mj.test.shiro1.service.UserInfoService;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.apache.shiro.util.ByteSource;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">public class MyShiroRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserInfoService userInfoService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置用户身份验证</span><br><span class="line">     * @param token</span><br><span class="line">     * @return</span><br><span class="line">     * @throws AuthenticationException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;开始身份验证&quot;);</span><br><span class="line">        //获取用户名，默认和login.html中的username对应。</span><br><span class="line">        String username = (String) token.getPrincipal();</span><br><span class="line">        UserInfo userInfo = userInfoService.findByUsername(username);</span><br><span class="line"></span><br><span class="line">        //没有返回登录用户名对应的SimpleAuthenticationInfo对象时,就会在LoginController中抛出UnknownAccountException异常</span><br><span class="line">        if (userInfo == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //验证通过返回一个封装了用户信息的AuthenticationInfo实例即可。</span><br><span class="line">        SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(userInfo,userInfo.getPassword(),getName());</span><br><span class="line">        //设置盐</span><br><span class="line">        authenticationInfo.setCredentialsSalt(ByteSource.Util.bytes(userInfo.getCredentialsSalt()));</span><br><span class="line">        return authenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置权限验证</span><br><span class="line">     * 当访问到页面的时候，链接配置了相应的权限或者shiro标签才会执行此方法否则不会执行</span><br><span class="line">     * @param principals</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;开始权限配置&quot;);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();</span><br><span class="line">        UserInfo userInfo = (UserInfo) principals.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        for (SysRole role: userInfo.getRoleList()) &#123;</span><br><span class="line">            authorizationInfo.addRole(role.getRole());</span><br><span class="line">            for (SysPermission p: role.getPermissions()) &#123;</span><br><span class="line">                authorizationInfo.addStringPermission(p.getPermission());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-UserInfoService"><a href="#4-UserInfoService" class="headerlink" title="4.UserInfoService"></a>4.UserInfoService</h2><p>在service包下面新建UserInfoService和他的实现类。</p><p>UserInfoService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import com.mj.test.shiro1.entity.UserInfo;</span><br><span class="line"></span><br><span class="line">public interface UserInfoService &#123;</span><br><span class="line">    public UserInfo findByUsername(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserInfoServiceImpl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import com.mj.test.shiro1.dao.UserInfoRepository;</span><br><span class="line">import com.mj.test.shiro1.entity.UserInfo;</span><br><span class="line">import com.mj.test.shiro1.service.UserInfoService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserInfoServiceImpl implements UserInfoService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserInfoRepository userInfoRepository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserInfo findByUsername(String username) &#123;</span><br><span class="line">        return userInfoRepository.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-UserInfoRepository"><a href="#5-UserInfoRepository" class="headerlink" title="5.UserInfoRepository"></a>5.UserInfoRepository</h2><p>来到dao包下新建UserInfoRepository：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import com.mj.test.shiro1.entity.UserInfo;</span><br><span class="line">import org.springframework.data.repository.CrudRepository;</span><br><span class="line"></span><br><span class="line">public interface UserInfoRepository extends CrudRepository&lt;UserInfo, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public UserInfo findByUsername(String username);</span><br><span class="line"></span><br><span class="line">    public UserInfo save(UserInfo userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-shiro配置"><a href="#6-shiro配置" class="headerlink" title="6.shiro配置"></a>6.shiro配置</h2><p>配置的是ShiroConfig类，Apache Shiro 核心通过 Filter 来实现，就好像SpringMvc 通过DispachServlet 来主控制一样。 既然是使用 Filter 一般也就能猜到，是通过URL规则来进行过滤和权限校验，所以我们需要定义一系列关于URL的规则和访问权限。</p><p>来到config包下创建ShiroConfiguration，我这就直接将验证，授权，记住我等的配置都放出来，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.mj.test.shiro1.config.shiro.MyShiroRealm;</span><br><span class="line">import com.mj.test.shiro1.filter.KaptchaFilter;</span><br><span class="line">import org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line">import org.apache.shiro.cache.ehcache.EhCacheManager;</span><br><span class="line">import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.mgt.SecurityManager;</span><br><span class="line">import org.apache.shiro.web.mgt.CookieRememberMeManager;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.apache.shiro.web.servlet.SimpleCookie;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import javax.servlet.Filter;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边（重点，重点，重点）</span><br><span class="line">     * @param securityManager</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) &#123;</span><br><span class="line"></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        //验证码过滤器</span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = shiroFilterFactoryBean.getFilters();</span><br><span class="line">        KaptchaFilter kaptchaFilter = new KaptchaFilter();</span><br><span class="line">        filterMap.put(&quot;kaptchaFilter&quot;, kaptchaFilter);</span><br><span class="line"></span><br><span class="line">        //拦截器</span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        //图片验证码(kaptcha框架)</span><br><span class="line">        filterChainDefinitionMap.put(&quot;/login&quot;, &quot;kaptchaFilter&quot;);</span><br><span class="line">        filterChainDefinitionMap.put(&quot;/kaptcha.jpg&quot;, &quot;anon&quot;);</span><br><span class="line">        //配置记住我,认证通过可以访问的地址</span><br><span class="line">        filterChainDefinitionMap.put(&quot;/index&quot;, &quot;user&quot;);</span><br><span class="line">        filterChainDefinitionMap.put(&quot;/&quot;, &quot;user&quot;);</span><br><span class="line">        //配置退出过滤器,其中的具体代码Shiro已经替我们实现了</span><br><span class="line">        filterChainDefinitionMap.put(&quot;/logout&quot;, &quot;logout&quot;);</span><br><span class="line">        //anon:有一些比如anon表示不需要验证身份就能访问等</span><br><span class="line">        filterChainDefinitionMap.put(&quot;/favicon.ico&quot;, &quot;anon&quot;);</span><br><span class="line">        //authc:所有url都必须认证通过才可以访问</span><br><span class="line">        filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilters(filterMap);</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;);</span><br><span class="line">        //这里设置403并不会起作用，参考http://www.jianshu.com/p/e03f5b54838c</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/403&quot;);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        return shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *1.SecurityManager 是 Shiro 架构的核心，通过它来链接Realm和用户(文档中称之为Subject.)</span><br><span class="line">     * 2.注入缓存对象</span><br><span class="line">     * 3.注入rememberMeManager;</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public SecurityManager securityManager() &#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(myShiroRealm());</span><br><span class="line">        securityManager.setCacheManager(ehCacheManager());</span><br><span class="line">        securityManager.setRememberMeManager(cookieRememberMeManager());</span><br><span class="line">        return securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public MyShiroRealm myShiroRealm() &#123;</span><br><span class="line">        MyShiroRealm myShiroRealm = new MyShiroRealm();</span><br><span class="line">        //设置解密规则</span><br><span class="line">        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span><br><span class="line">        return myShiroRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public HashedCredentialsMatcher hashedCredentialsMatcher() &#123;</span><br><span class="line">        HashedCredentialsMatcher hashedCredentialsMatcher = new HashedCredentialsMatcher();</span><br><span class="line">        //散列算法:这里使用MD5算法;</span><br><span class="line">        hashedCredentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);</span><br><span class="line">        //散列的次数，比如散列两次，相当于 md5(md5(&quot;&quot;));</span><br><span class="line">        hashedCredentialsMatcher.setHashIterations(2);</span><br><span class="line">        return hashedCredentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *  开启shiro aop注解支持.</span><br><span class="line">     *  使用代理方式;所以需要开启代码支持;</span><br><span class="line">     * @param securityManager</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        return authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 注入缓存</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public EhCacheManager ehCacheManager() &#123;</span><br><span class="line">        System.out.println(&quot;ShiroConfiguration.getEhCacheManager()&quot;);</span><br><span class="line">        EhCacheManager ehCacheManager = new EhCacheManager();</span><br><span class="line">        ehCacheManager.setCacheManagerConfigFile(&quot;classpath:config/ehcache-shiro.xml&quot;);</span><br><span class="line">        return ehCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * cookie对象</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public SimpleCookie rememberMeCookie() &#123;</span><br><span class="line">        System.out.println(&quot;ShiroConfiguration.rememberMeCookie()&quot;);</span><br><span class="line">        //这个参数是cookie的名称，对应前端的checkbox的name = rememberMe</span><br><span class="line">        SimpleCookie simpleCookie = new SimpleCookie(&quot;rememberMe&quot;);</span><br><span class="line">        //&lt;!-- 记住我cookie生效时间30天 ,单位秒;--&gt;</span><br><span class="line">        simpleCookie.setMaxAge(259200);</span><br><span class="line">        return simpleCookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * cookie管理对象</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public CookieRememberMeManager cookieRememberMeManager() &#123;</span><br><span class="line">        System.out.println(&quot;ShiroConfiguration.rememberMeManager()&quot;);</span><br><span class="line">        CookieRememberMeManager manager = new CookieRememberMeManager();</span><br><span class="line">        manager.setCookie(rememberMeCookie());</span><br><span class="line">        return manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-HomeController"><a href="#7-HomeController" class="headerlink" title="7.HomeController"></a>7.HomeController</h2><p>修改HomeController如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class HomeController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 这里如果不写method参数的话，默认支持所有请求，如果想缩小请求范围，还是要添加method来支持get, post等等某个请求。</span><br><span class="line">    @RequestMapping(value = &quot;/login&quot;)</span><br><span class="line">    public String login(HttpServletRequest request, Map&lt;String, Object&gt; map) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 登录失败从request中获取shiro处理的异常信息。</span><br><span class="line">        // shiroLoginFailure:就是shiro异常类的全类名.</span><br><span class="line">        Object exception = request.getAttribute(&quot;shiroLoginFailure&quot;);</span><br><span class="line">        String msg = &quot;&quot;;</span><br><span class="line">        if (exception != null) &#123;</span><br><span class="line">            if (UnknownAccountException.class.isInstance(exception)) &#123;</span><br><span class="line">                System.out.println(&quot;账户不存在&quot;);</span><br><span class="line">                msg = &quot;账户不存在或密码不正确&quot;;</span><br><span class="line">            &#125; else if (IncorrectCredentialsException.class.isInstance(exception)) &#123;</span><br><span class="line">                System.out.println(&quot;密码不正确&quot;);</span><br><span class="line">                msg = &quot;账户不存在或密码不正确&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;其他异常&quot;);</span><br><span class="line">                msg = &quot;其他异常&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(&quot;msg&quot;, msg);</span><br><span class="line">        // 此方法不处理登录成功,由shiro进行处理.</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8测试"><a href="#8测试" class="headerlink" title="8测试"></a>8测试</h2><p>这时候我们再访问<code>http://localhost:8080/index</code>会跳转到登录页面，因为我们设置了<code>filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);</code>，所以要先验证身份才能访问。</p><p>同时因为设置了<code>shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);</code>，所以会跳转到登录页面。</p><p>这时候在登录页面输入正确的用户名密码就可以登录了，登录成功会自动跳转到index页面。</p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-Spring boot环境搭建(1)</title>
      <link href="/2019/01/25/Shiro-Spring%20boot%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(1)/"/>
      <url>/2019/01/25/Shiro-Spring%20boot%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里我将实践Spring boot 加Shiro。首先是基本工程环境搭建。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="pom-xml依赖"><a href="#pom-xml依赖" class="headerlink" title="pom.xml依赖"></a>pom.xml依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.1.2.RELEASE&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">     &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;net.sourceforge.nekohtml&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;nekohtml&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.9.22&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">     &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>注意：thymeleaf校验html文件的时候会特别严格，比如<input> 必须加上<code>/</code>结尾，这里需要依赖<code>nekohtml</code>。</p><h2 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.mode=LEGACYHTML5</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"></span><br><span class="line">########################################################</span><br><span class="line">###datasource</span><br><span class="line">########################################################</span><br><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/test-shiro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = 123</span><br><span class="line">spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.max-active=20</span><br><span class="line">spring.datasource.max-idle=8</span><br><span class="line">spring.datasource.min-idle=8</span><br><span class="line">spring.datasource.initial-size=10</span><br><span class="line"></span><br><span class="line">########################################################</span><br><span class="line">### Java Persistence Api</span><br><span class="line">########################################################</span><br><span class="line"># Specify the DBMS</span><br><span class="line">spring.jpa.database = MYSQL</span><br><span class="line"># Show or not log for each sql query</span><br><span class="line">spring.jpa.show-sql = true</span><br><span class="line"># Hibernate ddl auto (create, create-drop, update)</span><br><span class="line">spring.jpa.hibernate.ddl-auto = update</span><br><span class="line"># Naming strategy</span><br><span class="line">#[org.hibernate.cfg.ImprovedNamingStrategy | org.hibernate.cfg.DefaultNamingStrategy]</span><br><span class="line">spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.DefaultNamingStrategy</span><br><span class="line"># stripped before adding them to the entity manager)</span><br><span class="line">spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect</span><br></pre></td></tr></table></figure><h2 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h2><p>在<code>templates</code>文件夹下面创建如下文件</p><p>1.index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;这是index&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;点击 &lt;a th:href=&quot;@&#123;/logout&#125;&quot;&gt;退出登录&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.login.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        错误信息：&lt;h4 style=&quot;color: red;&quot; th:text=&quot;$&#123;msg&#125;&quot;&gt;&lt;/h4&gt;</span><br><span class="line">        &lt;form th:action=&quot;@&#123;/login&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;账号：&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;admin&quot;/&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;密码：&lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;123456&quot;/&gt;&lt;/p&gt;</span><br><span class="line">            &lt;P&gt;&lt;input type=&quot;checkbox&quot; name=&quot;rememberMe&quot; /&gt;记住我&lt;/P&gt;</span><br><span class="line">            &lt;div&gt;&lt;label&gt; 验证码 : &lt;input type=&quot;text&quot; name=&quot;captcha&quot; placeholder=&quot;验证码&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!--&lt;div&gt;![](@&#123;/kaptcha.jpg&#125;)&lt;/div&gt;--&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;img type=&quot;image&quot; src=&quot;../kaptcha.jpg&quot; id=&quot;codeImage&quot; onclick=&quot;chageCode()&quot; title=&quot;图片看不清？点击重新得到验证码&quot; style=&quot;cursor:pointer;&quot; width=&quot;116&quot; height=&quot;36&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function chageCode()&#123;</span><br><span class="line">                document.getElementById(&quot;codeImage&quot;).src=&quot;../kaptcha.jpg?&quot;+Math.random();</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3.userAdd.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;userAdd&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;这是用户添加模块&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>4.userDel.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;userDel&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;这是用户删除页面&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5.userInfo.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;userInfo&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;这是用户信息页面&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>6.403.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;403&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;权限不够哦！&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="RBAC模型"><a href="#RBAC模型" class="headerlink" title="RBAC模型"></a>RBAC模型</h2><p>在之前《权限管理-概念》博文里，我们介绍了RBAC模型：一个账号对应一个或多个角色，每个角色对应相应的权限集，用户以角色为桥梁，实现灵活多样的权限操作。那么这其中有三个概念：账号，角色，权限。</p><p>后面基于RABC模型，我们在不使用三方框架的前提下，做了一个权限管理的例子（详情在《权限管理-‘栗’子》），其实在这里，即使我们使用了Shiro框架来实现权限管理，但RABC模型的那套思想还是通用。所以接下来我们的操作思路如下：</p><p>1.建立<code>UserInfo</code>,<code>SysRole</code>,<code>SysPermission</code>三张表；</p><p>2.还有两张关联表<code>SysUserRole</code>,<code>SysRolePermission</code>;</p><p>注意：这里我们将使用JPA自动生成表。</p><p>来到项目创建如下java类：</p><p>UserInfo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.test.shiro1.entity;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class UserInfo implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    @Id@GeneratedValue</span><br><span class="line">    private long uid;//用户id;</span><br><span class="line">    @Column(unique=true)</span><br><span class="line">    private String username;//账号.</span><br><span class="line">    private String name;//名称（昵称或者真实姓名，不同系统不同定义）</span><br><span class="line">    private String password; //密码;</span><br><span class="line">    private String salt;//加密密码的盐</span><br><span class="line">    private byte state;//用户状态,0:创建未认证（比如没有激活，没有输入验证码等等）--等待验证的用户 , 1:正常状态,2：用户被锁定.</span><br><span class="line">    @ManyToMany(fetch=FetchType.EAGER)//立即从数据库中进行加载数据;</span><br><span class="line">    @JoinTable(name = &quot;SysUserRole&quot;, joinColumns = &#123; @JoinColumn(name = &quot;uid&quot;) &#125;, inverseJoinColumns =&#123;@JoinColumn(name = &quot;roleId&quot;) &#125;)</span><br><span class="line">    private List&lt;SysRole&gt; roleList;// 一个用户具有多个角色</span><br><span class="line"></span><br><span class="line">    public List&lt;SysRole&gt; getRoleList() &#123;</span><br><span class="line">        return roleList;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setRoleList(List&lt;SysRole&gt; roleList) &#123;</span><br><span class="line">        this.roleList = roleList;</span><br><span class="line">    &#125;</span><br><span class="line">    public long getUid() &#123;</span><br><span class="line">        return uid;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUid(long uid) &#123;</span><br><span class="line">        this.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getSalt() &#123;</span><br><span class="line">        return salt;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setSalt(String salt) &#123;</span><br><span class="line">        this.salt = salt;</span><br><span class="line">    &#125;</span><br><span class="line">    public byte getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setState(byte state) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getCredentialsSalt()&#123;</span><br><span class="line">        return this.username+this.salt;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;UserInfo [uid=&quot; + uid + &quot;, username=&quot; + username + &quot;, name=&quot; + name + &quot;, password=&quot; + password</span><br><span class="line">                + &quot;, salt=&quot; + salt + &quot;, state=&quot; + state + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SysRole:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.test.shiro1.entity;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by archerlj on 2017/6/30.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class SysRole implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    @Id@GeneratedValue</span><br><span class="line">    private Long id; // 编号</span><br><span class="line">    private String role; // 角色标识程序中判断使用,如&quot;admin&quot;,这个是唯一的:</span><br><span class="line">    private String description; // 角色描述,UI界面显示使用</span><br><span class="line">    private Boolean available = Boolean.FALSE; // 是否可用,如果不可用将不会添加给用户</span><br><span class="line"></span><br><span class="line">    //角色 -- 权限关系：多对多关系;</span><br><span class="line">    @ManyToMany(fetch= FetchType.EAGER)</span><br><span class="line">    @JoinTable(name=&quot;SysRolePermission&quot;,joinColumns=&#123;@JoinColumn(name=&quot;roleId&quot;)&#125;,inverseJoinColumns=&#123;@JoinColumn(name=&quot;permissionId&quot;)&#125;)</span><br><span class="line">    private List&lt;SysPermission&gt; permissions;</span><br><span class="line"></span><br><span class="line">    // 用户 - 角色关系定义;</span><br><span class="line">    @ManyToMany</span><br><span class="line">    @JoinTable(name=&quot;SysUserRole&quot;,joinColumns=&#123;@JoinColumn(name=&quot;roleId&quot;)&#125;,inverseJoinColumns=&#123;@JoinColumn(name=&quot;uid&quot;)&#125;)</span><br><span class="line">    private List&lt;UserInfo&gt; userInfos;// 一个角色对应多个用户</span><br><span class="line"></span><br><span class="line">    public List&lt;UserInfo&gt; getUserInfos() &#123;</span><br><span class="line">        return userInfos;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUserInfos(List&lt;UserInfo&gt; userInfos) &#123;</span><br><span class="line">        this.userInfos = userInfos;</span><br><span class="line">    &#125;</span><br><span class="line">    public Long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(Long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getRole() &#123;</span><br><span class="line">        return role;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setRole(String role) &#123;</span><br><span class="line">        this.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return description;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDescription(String description) &#123;</span><br><span class="line">        this.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">    public Boolean getAvailable() &#123;</span><br><span class="line">        return available;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAvailable(Boolean available) &#123;</span><br><span class="line">        this.available = available;</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;SysPermission&gt; getPermissions() &#123;</span><br><span class="line">        return permissions;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPermissions(List&lt;SysPermission&gt; permissions) &#123;</span><br><span class="line">        this.permissions = permissions;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;SysRole [id=&quot; + id + &quot;, role=&quot; + role + &quot;, description=&quot; + description + &quot;, available=&quot; + available</span><br><span class="line">                + &quot;, permissions=&quot; + permissions + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SysPermission:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.test.shiro1.entity;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by archerlj on 2017/6/30.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class SysPermission implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    @Id@GeneratedValue</span><br><span class="line">    private long id;//主键.</span><br><span class="line">    private String name;//名称.</span><br><span class="line"></span><br><span class="line">    @Column(columnDefinition=&quot;enum(&apos;menu&apos;,&apos;button&apos;)&quot;)</span><br><span class="line">    private String resourceType;//资源类型，[menu|button]</span><br><span class="line">    private String url;//资源路径.</span><br><span class="line">    private String permission; //权限字符串,menu例子：role:*，button例子：role:create,role:update,role:delete,role:view</span><br><span class="line">    private Long parentId; //父编号</span><br><span class="line">    private String parentIds; //父编号列表</span><br><span class="line">    private Boolean available = Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">    @ManyToMany</span><br><span class="line">    @JoinTable(name=&quot;SysRolePermission&quot;,joinColumns=&#123;@JoinColumn(name=&quot;permissionId&quot;)&#125;,inverseJoinColumns=&#123;@JoinColumn(name=&quot;roleId&quot;)&#125;)</span><br><span class="line">    private List&lt;SysRole&gt; roles;</span><br><span class="line"></span><br><span class="line">    public long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getResourceType() &#123;</span><br><span class="line">        return resourceType;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setResourceType(String resourceType) &#123;</span><br><span class="line">        this.resourceType = resourceType;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getUrl() &#123;</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUrl(String url) &#123;</span><br><span class="line">        this.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPermission() &#123;</span><br><span class="line">        return permission;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPermission(String permission) &#123;</span><br><span class="line">        this.permission = permission;</span><br><span class="line">    &#125;</span><br><span class="line">    public Long getParentId() &#123;</span><br><span class="line">        return parentId;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setParentId(Long parentId) &#123;</span><br><span class="line">        this.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getParentIds() &#123;</span><br><span class="line">        return parentIds;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setParentIds(String parentIds) &#123;</span><br><span class="line">        this.parentIds = parentIds;</span><br><span class="line">    &#125;</span><br><span class="line">    public Boolean getAvailable() &#123;</span><br><span class="line">        return available;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAvailable(Boolean available) &#123;</span><br><span class="line">        this.available = available;</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;SysRole&gt; getRoles() &#123;</span><br><span class="line">        return roles;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setRoles(List&lt;SysRole&gt; roles) &#123;</span><br><span class="line">        this.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;SysPermission [id=&quot; + id + &quot;, name=&quot; + name + &quot;, resourceType=&quot; + resourceType + &quot;, url=&quot; + url</span><br><span class="line">                + &quot;, permission=&quot; + permission + &quot;, parentId=&quot; + parentId + &quot;, parentIds=&quot; + parentIds + &quot;, available=&quot;</span><br><span class="line">                + available + &quot;, roles=&quot; + roles + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HomeController"><a href="#HomeController" class="headerlink" title="HomeController"></a>HomeController</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HomeController &#123;</span><br><span class="line">    @RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;/login&quot;)</span><br><span class="line">    public String login() &#123;</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>截至这里，大家可将项目跑起来，数据库的5张表会自动生成，另外保证index和login两个页面能正常访问。</p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-身份验证</title>
      <link href="/2019/01/24/Shiro-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/01/24/Shiro-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Shiro身份验证涉及两个重要概念，principals和credentials。最常见的principals和credentials是用户名和密码，另外还有Subject和Realm。下面通过实际例子说明。</p><a id="more"></a><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.这里使用Spring Boot 2.1.2创建一个web项目，构建中我是勾选了<code>web</code>和<code>SQL</code>-&gt;<code>MySql</code>。</p><p>2.我的pom.xml文件中的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.1.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>3.测试中需要在<code>resources</code>-&gt;<code>static</code>文件夹下创建<code>html</code>文件，所以<code>application.properties</code>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.suffix=.html</span><br></pre></td></tr></table></figure><h2 id="textRealm测试"><a href="#textRealm测试" class="headerlink" title="textRealm测试"></a>textRealm测试</h2><h3 id="1-在static路径下创建login-html文件："><a href="#1-在static路径下创建login-html文件：" class="headerlink" title="1.在static路径下创建login.html文件："></a>1.在<code>static</code>路径下创建<code>login.html</code>文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form name=&quot;login&quot; action=&quot;/login&quot; method=&quot;post&quot; onsubmit=&quot;return beforeSubmit()&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;/&gt; &lt;br/&gt;</span><br><span class="line">        密  码：&lt;input type=&quot;password&quot; id=&quot;password&quot;  name=&quot;password&quot;/&gt; &lt;br/&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot; name=&quot;submit&quot;/&gt; &lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function beforeSubmit() &#123;</span><br><span class="line">            var username = document.getElementById(&apos;username&apos;).value;</span><br><span class="line">            var password = document.getElementById(&apos;password&apos;).value;</span><br><span class="line">            if (username.length &lt; 3 || password.length &lt; 3) &#123;</span><br><span class="line">                alert(&apos;格式不正确！&apos;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在<code>static</code>路径下创建<code>fail.html</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;失败啦！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在<code>static</code>路径下创建<code>success.html</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;成功！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-在resources路径下创建textShiro-ini文件（IDEA会提示安装插件，安装重启即可），配置如下："><a href="#2-在resources路径下创建textShiro-ini文件（IDEA会提示安装插件，安装重启即可），配置如下：" class="headerlink" title="2.在resources路径下创建textShiro.ini文件（IDEA会提示安装插件，安装重启即可），配置如下："></a>2.在<code>resources</code>路径下创建<code>textShiro.ini</code>文件（IDEA会提示安装插件，安装重启即可），配置如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[users]</span><br><span class="line">maojing=123</span><br><span class="line">yihe=123</span><br></pre></td></tr></table></figure><h3 id="3-创建控制器LoginController-如下："><a href="#3-创建控制器LoginController-如下：" class="headerlink" title="3.创建控制器LoginController,如下："></a>3.创建控制器<code>LoginController</code>,如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line">import org.apache.shiro.mgt.SecurityManager;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.apache.shiro.util.Factory;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class LoginController &#123;</span><br><span class="line">    @RequestMapping(value = &quot;&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String sayHi()&#123;</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(value = &quot;login&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String login(HttpServletRequest req)&#123;</span><br><span class="line">//获取表单用户信息</span><br><span class="line">        String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = req.getParameter(&quot;password&quot;);</span><br><span class="line">        </span><br><span class="line">//使用Ini配置文件初始化SecurityManager</span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(&quot;classpath:textShiro.ini&quot;);</span><br><span class="line">        </span><br><span class="line">        //得到SecurityManager实例 并绑定给SecurityUtils</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        </span><br><span class="line">        //得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line">        try&#123;</span><br><span class="line">            currentUser.login(token);</span><br><span class="line">            System.out.println(&quot;身份认证成功！&quot;);</span><br><span class="line">        &#125;catch(AuthenticationException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;身份认证失败！&quot;);</span><br><span class="line">            return &quot;fail&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        currentUser.logout();</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.收集用户身份/凭证，即如用户名/密码；</span><br><span class="line"></span><br><span class="line">2、调用Subject.login进行登录，如果失败将得到相应的AuthenticationException异常，根据异常提示用户错误信息；否则登录成功；</span><br><span class="line"></span><br><span class="line">3、最后调用Subject.logout进行退出操作</span><br></pre></td></tr></table></figure><h2 id="jdbcRealm测试"><a href="#jdbcRealm测试" class="headerlink" title="jdbcRealm测试"></a>jdbcRealm测试</h2><p>将上面的<code>textRealm</code>测试跑通，并理解的前提下，再切换到<code>jdbcRealm</code>便好理解多了。</p><h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h3><p>创建一个<code>shiro</code>数据库，并创建一个名为<code>users</code>的表。如下图：</p><img src="/2019/01/24/Shiro-身份验证/image1.jpg"><h3 id="2-shiro-jdbc-realm1-ini"><a href="#2-shiro-jdbc-realm1-ini" class="headerlink" title="2.shiro-jdbc-realm1.ini"></a>2.<code>shiro-jdbc-realm1.ini</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm</span><br><span class="line">dataSource=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">dataSource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">dataSource.url=jdbc:mysql://localhost:3306/shiro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">dataSource.username=root</span><br><span class="line">dataSource.password=123</span><br><span class="line">jdbcRealm.dataSource=$dataSource</span><br><span class="line">securityManager.realms=$jdbcRealm</span><br></pre></td></tr></table></figure><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h3><p>将上面<code>LoginController</code>里面的 配置文件路径修改为：<code>shiro-jdbc-realm1.ini</code>即可测试。</p><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><h3 id="1-数据库-1"><a href="#1-数据库-1" class="headerlink" title="1.数据库"></a>1.数据库</h3><p>沿用<code>shiro</code>数据库即可。</p><h3 id="2-shiro-my-realm1-ini"><a href="#2-shiro-my-realm1-ini" class="headerlink" title="2.shiro-my-realm1.ini"></a>2.<code>shiro-my-realm1.ini</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 声明realm</span><br><span class="line">myRealm1= com.mj.test.shiro.realm.MyRealm1</span><br><span class="line"># 指定securityManager的realms实现</span><br><span class="line">securityManager.realms=$myRealm1</span><br></pre></td></tr></table></figure><h3 id="3-自定义Realm"><a href="#3-自定义Realm" class="headerlink" title="3.自定义Realm"></a>3.自定义Realm</h3><p>创建一个<code>MyRealm1</code>类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.realm.Realm;</span><br><span class="line">public class MyRealm1 implements Realm &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;myrealm1&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(AuthenticationToken authenticationToken) &#123;</span><br><span class="line">        //仅支持UsernamePasswordToken类型的Token</span><br><span class="line">        return authenticationToken instanceof UsernamePasswordToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public AuthenticationInfo getAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        //获取身份principal</span><br><span class="line">        String username = (String) authenticationToken.getPrincipal();</span><br><span class="line">        //获取凭证credential</span><br><span class="line">        String password = new String((char[])authenticationToken.getCredentials());</span><br><span class="line">        if (!&quot;maojing&quot;.equals(username))&#123;</span><br><span class="line">            //用户名错误</span><br><span class="line">            throw new UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line">        if (!&quot;123&quot;.equals(password))&#123;</span><br><span class="line">            //密码错误</span><br><span class="line">            throw new IncorrectCredentialsException();</span><br><span class="line">        &#125;</span><br><span class="line">        //验证成功，放回AuthenticationInfo</span><br><span class="line">        return new SimpleAuthenticationInfo(username,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-修改"><a href="#4-修改" class="headerlink" title="4.修改"></a>4.修改</h3><p>继续沿用上面创建的<code>LoginController</code>，修改配置文件路径修改为：<code>shiro-my-realm1.ini</code>即可测试。</p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
            <tag> 身份验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-简介</title>
      <link href="/2019/01/23/Shiro-%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/01/23/Shiro-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/23/Shiro-简介/image0.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Apache Shiro是java的一个安全框架。相较于Spring Security的复杂强大，Shiro显得更加小巧简单，至于二者说更好，这个没有一个标准答案，能切合实际的解决项目问题就是最好的。</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Shiro可以非常容易满足应用开发需求，既可运行在JavaSE环境，也可运行在JavaEE环境。Shiro主要帮我们完成：认证、授权、加密、会话管理、与Web集成、缓存等功能（大多时候这已经足够用了）。同时Shiro的API也是非常简单。</p><h2 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h2><p>再看下面图解时，我们要先有：用户，角色，权限这三个概念。</p><p>功能点如图：</p><img src="/2019/01/23/Shiro-简介/image1.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">1.Authentication：身份认证/登录。验证用户是不是拥有相应的身份；</span><br><span class="line"></span><br><span class="line">2.Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</span><br><span class="line"></span><br><span class="line">3.Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</span><br><span class="line"></span><br><span class="line">4.Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</span><br><span class="line"></span><br><span class="line">5.Web Support：Web支持，可以非常容易的集成到Web环境；</span><br><span class="line"></span><br><span class="line">6.Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</span><br><span class="line"></span><br><span class="line">7.Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</span><br><span class="line"></span><br><span class="line">8.Testing：提供测试支持；</span><br><span class="line"></span><br><span class="line">9.Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</span><br><span class="line"></span><br><span class="line">10.Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</span><br><span class="line"></span><br><span class="line">11.Shiro不会去维护用户和权限，这些需要我们自己设计实现，再通过相应的接口注入给shiro。</span><br></pre></td></tr></table></figure><h2 id="工作图"><a href="#工作图" class="headerlink" title="工作图"></a>工作图</h2><p>从应用程序角度来观察如何使用Shiro完成工作，如下图：</p><img src="/2019/01/23/Shiro-简介/image2.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line"></span><br><span class="line">1.Subject：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</span><br><span class="line"></span><br><span class="line">2.SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</span><br><span class="line"></span><br><span class="line">3.Realm：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</span><br></pre></td></tr></table></figure><p>简单来说：应用通过Subject来进行认证授权，Subject又委托给SecurityManager，这时需要我们给SecurityManager注入Realm,来保证SecurityManager能得到合法的用户及其权限进行判断。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>接下来从内部来看看Shiro的架构设计，如下图：</p><img src="/2019/01/23/Shiro-简介/image3.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line"></span><br><span class="line">1.Subject：主体，可以看到主体可以是任何可以与应用交互的“用户”；</span><br><span class="line"></span><br><span class="line">2.SecurityManager：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</span><br><span class="line"></span><br><span class="line">3.Authenticator：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</span><br><span class="line"></span><br><span class="line">4.Authrizer：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</span><br><span class="line"></span><br><span class="line">5.Realm：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</span><br><span class="line"></span><br><span class="line">6.SessionManager：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</span><br><span class="line"></span><br><span class="line">7.SessionDAO：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</span><br><span class="line"></span><br><span class="line">8.CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</span><br><span class="line"></span><br><span class="line">9.Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的。</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="http://shiro.apache.org/reference.html" target="_blank" rel="noopener">http://shiro.apache.org/reference.html</a></p><p><a href="https://jinnianshilongnian.iteye.com/blog/2018936" target="_blank" rel="noopener">https://jinnianshilongnian.iteye.com/blog/2018936</a></p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限管理-‘栗’子</title>
      <link href="/2019/01/23/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E2%80%98%E6%A0%97%E2%80%99%E5%AD%90/"/>
      <url>/2019/01/23/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E2%80%98%E6%A0%97%E2%80%99%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/23/权限管理-‘栗’子/image1.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>权限管理MySql数据库设计，看下这里吧！</p><a id="more"></a><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>假定我们的权限系统设计需求是这样，角色有：读者，作者以及管理员；操作权限有：收藏（celloction），写小说（write ），发布小说（distribution）。其中读者有收藏小说权限，作者有写小说权限，而管理员有发布小说的权限。</p><h1 id="数据库及表设计如下"><a href="#数据库及表设计如下" class="headerlink" title="数据库及表设计如下"></a>数据库及表设计如下</h1><h2 id="t-user"><a href="#t-user" class="headerlink" title="t_user"></a>t_user</h2><p>如下图：</p><img src="/2019/01/23/权限管理-‘栗’子/image2.jpg"><p>填充测试数据：</p><img src="/2019/01/23/权限管理-‘栗’子/image22.jpg"><h2 id="t-role"><a href="#t-role" class="headerlink" title="t_role"></a>t_role</h2><p>如下图：</p><img src="/2019/01/23/权限管理-‘栗’子/image3.jpg"><p>填充测试数据：</p><h2 id="t-authority"><a href="#t-authority" class="headerlink" title="t_authority"></a>t_authority</h2><p>如下图：</p><img src="/2019/01/23/权限管理-‘栗’子/image4.jpg"><p>填充测试数据：</p><img src="/2019/01/23/权限管理-‘栗’子/image44.jpg"><h2 id="user-role"><a href="#user-role" class="headerlink" title="user_role"></a>user_role</h2><p>如下图：</p><img src="/2019/01/23/权限管理-‘栗’子/image5.jpg"><p>外键设置：</p><img src="/2019/01/23/权限管理-‘栗’子/image55.jpg"><p>填充测试数据：</p><img src="/2019/01/23/权限管理-‘栗’子/image555.jpg"><h2 id="role-authority"><a href="#role-authority" class="headerlink" title="role_authority"></a>role_authority</h2><p>如下图：</p><img src="/2019/01/23/权限管理-‘栗’子/image6.jpg"><p>外键设置：</p><img src="/2019/01/23/权限管理-‘栗’子/image66.jpg"><p>填充测试数据：</p><img src="/2019/01/23/权限管理-‘栗’子/image666.jpg"><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="1-查询角色为Reader的的用户姓名？"><a href="#1-查询角色为Reader的的用户姓名？" class="headerlink" title="1.查询角色为Reader的的用户姓名？"></a>1.查询角色为Reader的的用户姓名？</h2><p>sql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select u.username from t_user u,t_role r,user_role ur where r.name=&apos;Reader&apos; and r.id=ur.role_id and ur.user_id=u.id;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| username  |</span><br><span class="line">+-----------+</span><br><span class="line">| zhang san |</span><br><span class="line">| li si     |</span><br><span class="line">+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="2-查询wang-wu对应的角色？"><a href="#2-查询wang-wu对应的角色？" class="headerlink" title="2.查询wang wu对应的角色？"></a>2.查询wang wu对应的角色？</h2><p>sql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select r.name from t_user u,t_role r,user_role ur where u.username=&apos;wang wu&apos; and u.id=ur.user_id and ur.role_id=r.id;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| name   |</span><br><span class="line">+--------+</span><br><span class="line">| Author |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="3-查询拥有distribution权限的角色名？"><a href="#3-查询拥有distribution权限的角色名？" class="headerlink" title="3.查询拥有distribution权限的角色名？"></a>3.查询拥有distribution权限的角色名？</h2><p>sql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select r.name from t_role r,t_authority a,role_authority ra where a.name=&apos;distribution&apos; and a.id=ra.authority_id and ra.role_id=r.id;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| name  |</span><br><span class="line">+-------+</span><br><span class="line">| Admin |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="4-查询Author拥有的权限名？"><a href="#4-查询Author拥有的权限名？" class="headerlink" title="4.查询Author拥有的权限名？"></a>4.查询Author拥有的权限名？</h2><p>sql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.name from t_role r,t_authority a,role_authority ra where r.name=&apos;Author&apos; and  r.id=ra.role_id and ra.authority_id=a.id;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| name  |</span><br><span class="line">+-------+</span><br><span class="line">| wirte |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="5-查询qiao-feng用户拥有的权限名？"><a href="#5-查询qiao-feng用户拥有的权限名？" class="headerlink" title="5.查询qiao feng用户拥有的权限名？"></a>5.查询qiao feng用户拥有的权限名？</h2><p>sql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.name from t_role r,t_authority a,role_authority ra where r.id=ra.role_id and authority_id=a.id and r.id in(select r.id from t_user u,t_role r,user_role ur where u.username=&apos;qiao feng&apos; and u.id=ur.user_id and ur.role_id=r.id);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| name  |</span><br><span class="line">+-------+</span><br><span class="line">| wirte |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="6-查询拥有cellction权限的用户名？"><a href="#6-查询拥有cellction权限的用户名？" class="headerlink" title="6.查询拥有cellction权限的用户名？"></a>6.查询拥有cellction权限的用户名？</h2><p>sql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select u.username from t_role r,t_user u,user_role ur where r.id=ur.role_id and ur.user_id=u.id and r.id in (select r.id from t_role r,t_authority a,role_authority ra where a.name=&apos;cellction&apos; and a.id=ra.authority_id and ra.role_id=r.id);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| username  |</span><br><span class="line">+-----------+</span><br><span class="line">| zhang san |</span><br><span class="line">| li si     |</span><br><span class="line">+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>关于用户权限管理的简单栗子就介绍完了（有种迷恋写sql语句的感觉……..）。醒醒吧，还手写，shiro和spring security 两大框架还等着呢！ </p>]]></content>
      
      
      <categories>
          
          <category> 权限管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限管理-概念</title>
      <link href="/2019/01/23/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/01/23/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/23/权限管理-概念/image1.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>权限管理，一般指根据系统设置的安全规则或者<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5/2890163" target="_blank" rel="noopener">安全策略</a>，用户可以访问而且只能访问自己被授权的资源，不多不少。权限管理几乎出现在任何系统里面，只要有用户和密码的系统。 很多人常将“用户身份认证”、“密码加密”、“系统管理”等概念与权限管理概念混淆。</p><a id="more"></a><p>用户身份认证，不属于权限管理范畴。用户身份认证，是要解决这样的问题：用户告诉系统“我是谁”，系统就问用户凭什么证明你就是“谁”呢？对于采用用户名、密码验证的系统，那么就是出示密码。当用户名和密码匹配，则证明当前用户是谁；对于采用<a href="https://baike.baidu.com/item/%E6%8C%87%E7%BA%B9" target="_blank" rel="noopener">指纹</a>等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p><p>密码加密，是隶属用户身份认证领域，不属于权限管理范畴。</p><p>系统管理，一般是系统的一个模块。而且该模块一般还含有权限管理子模块。因此，很多人误认为权限管理系统只是系统的一个小小的子模块。系统管理里面的权限管理模块，只是一个操作界面，让企业IT管理员能够设置角色等<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5" target="_blank" rel="noopener">安全策略</a>。系统背后还有很多权限验证逻辑，这些都并不属于该模块。总体来说，该模块相当于给权限管理模块提供了一些数据，比如：<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%89" target="_blank" rel="noopener">张三</a>是人力资源经理等。</p><p>更多混淆概念，请参考：《对权限管理认识的一些误区》。</p><p>以上概念来源于《百度百科》，个人也是很赞同的。关于身份认证，密码加密，后面将再单独整理！</p><p>下面将结合自己实际开发中的经验，表述对权限管理的理解。</p><h1 id="拙见"><a href="#拙见" class="headerlink" title="拙见"></a>拙见</h1><p>其实权限管理设计不麻烦，只要我们理解并参照RBAC模型（<a href="https://baike.baidu.com/item/RBAC/1328788?fr=aladdin" target="_blank" rel="noopener">Role-Based Access Control</a>），基本是可以应对所有应用场景。通俗来说就是一个账号对应一个或多个角色，每个角色对应相应的权限集，用户以角色为桥梁，实现灵活多样的权限操作。那么这其中有三个概念：账号，角色，权限。</p><h2 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h2><p>账号是每个用户进入系统的一把钥匙。</p><p>用户通过账号进入系统，目的只有一个，对资源进行CRUD操作，但至于用户操作权限到底有多大，还要由用户绑定的角色所具备的权限来决定。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>角色在管理系统中扮演桥梁的作用。</p><p>现实中，绝大多数场景都存在角色，如学校有老师，学生，校长等角色，而不同角色在学校里所拥有的权限不同，如校长有权决定开除一名“坏学生”，但普通老师不具备这样的权利，不是老师和校长这两个人存在权限区别，而是老师和校长这两个角色赋予了他们不同的操作权限。</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>操作权限是用户登录系统后具体能做的一些事。</p><p>归纳起来可分为三种。</p><h3 id="页面权限"><a href="#页面权限" class="headerlink" title="页面权限"></a>页面权限</h3><p>决定你是否有权限查看某些个界面。</p><h3 id="操作权限"><a href="#操作权限" class="headerlink" title="操作权限"></a>操作权限</h3><p>控制你在页面上可以做那些操作。</p><h3 id="数据权限"><a href="#数据权限" class="headerlink" title="数据权限"></a>数据权限</h3><p>控制你可以访问那些数据。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>接下来将设计一个简单的权限管理数据库。大家放心，不会贴项目出来（论职业操守）！主要是帮助理解理顺权限管理的思路，保证只要遇到相关开发场景，立马有思路。</p>]]></content>
      
      
      <categories>
          
          <category> 权限管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab-基于Docker安装</title>
      <link href="/2019/01/22/GitLab-%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85/"/>
      <url>/2019/01/22/GitLab-%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="YML文件"><a href="#YML文件" class="headerlink" title="YML文件"></a>YML文件</h1><p>在<code>/usr/local/docker/gitlab</code>路径下使用如下命令创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>编辑内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">    web:</span><br><span class="line">      image: &apos;twang2218/gitlab-ce-zh:10.5&apos;</span><br><span class="line">      restart: always</span><br><span class="line">      hostname: &apos;你的虚拟机ip&apos;</span><br><span class="line">      environment:</span><br><span class="line">        TZ: &apos;Asia/Shanghai&apos;</span><br><span class="line">        GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">          external_url &apos;http://ip:8080&apos;</span><br><span class="line">          gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222</span><br><span class="line">          unicorn[&apos;port&apos;] = 8888</span><br><span class="line">          nginx[&apos;listen_port&apos;] = 8080</span><br><span class="line">      ports:</span><br><span class="line">        - &apos;8080:8080&apos;</span><br><span class="line">        - &apos;8443:443&apos;</span><br><span class="line">        - &apos;2222:22&apos;</span><br><span class="line">      volumes:</span><br><span class="line">        - /usr/local/docker/gitlab/config:/etc/gitlab</span><br><span class="line">        - /usr/local/docker/gitlab/data:/var/opt/gitlab</span><br><span class="line">        - /usr/local/docker/gitlab/logs:/var/log/gitlab</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>可使用如下命令查看运行状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>打开浏览器，访问<a href="https://ip:8080，界面如下：" target="_blank" rel="noopener">https://ip:8080，界面如下：</a></p><img src="/2019/01/22/GitLab-基于Docker安装/image1.png"><p>注意：</p><p>1.先设置密码最好字母加数字，大于8位（记好了）；</p><p>2.默认管理员账号：root;</p><p>设置好后登陆如下：</p><img src="/2019/01/22/GitLab-基于Docker安装/image2.png"><p>登陆成功后主界面显示如下：</p><img src="/2019/01/22/GitLab-基于Docker安装/image3.jpg"><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>安装成功后，剩下便是如何使用GitLab，这里不赘述。</p>]]></content>
      
      
      <categories>
          
          <category> GitLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab-简介</title>
      <link href="/2019/01/22/GitLab-%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/01/22/GitLab-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/22/GitLab-简介/image1.jpg"><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>GitLab</strong>是由GitLabInc.开发，使用<a href="https://baike.baidu.com/item/MIT%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="noopener">MIT许可证</a>的基于<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C" target="_blank" rel="noopener">网络</a>的<a href="https://baike.baidu.com/item/Git" target="_blank" rel="noopener">Git</a><a href="https://baike.baidu.com/item/%E4%BB%93%E5%BA%93" target="_blank" rel="noopener">仓库</a>管理工具，且具有<a href="https://baike.baidu.com/item/wiki" target="_blank" rel="noopener">wiki</a>和issue跟踪功能。使用<a href="https://baike.baidu.com/item/Git" target="_blank" rel="noopener">Git</a>作为代码管理工具，并在此基础上搭建起来的web服务。</p><p>GitLab由乌克兰程序员DmitriyZaporozhets和ValerySizov开发，它由<a href="https://baike.baidu.com/item/Ruby" target="_blank" rel="noopener">Ruby</a>写成。后来，一些部分用<a href="https://baike.baidu.com/item/Go%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">Go语言</a>重写。截止2018年5月，该公司约有290名团队成员，以及2000多名开源贡献者。GitLab被IBM，Sony，JülichResearchCenter，NASA，Alibaba，Invincea，O’ReillyMedia，Leibniz-Rechenzentrum(LRZ)，CERN，SpaceX等组织使用。</p><p>GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p>]]></content>
      
      
      <categories>
          
          <category> GitLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose-实战MySql</title>
      <link href="/2019/01/22/Docker%20Compose-%E5%AE%9E%E6%88%98MySql/"/>
      <url>/2019/01/22/Docker%20Compose-%E5%AE%9E%E6%88%98MySql/</url>
      
        <content type="html"><![CDATA[<h1 id="YML文件"><a href="#YML文件" class="headerlink" title="YML文件"></a>YML文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.1&apos;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">    command:</span><br><span class="line">      --default-authentication-plugin=mysql_native_password</span><br><span class="line">      --character-set-server=utf8mb4</span><br><span class="line">      --collation-server=utf8mb4_general_ci</span><br><span class="line">      --explicit_defaults_for_timestamp=true</span><br><span class="line">      --lower_case_table_names=1</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">  adminer:</span><br><span class="line">    image: adminer</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>打开浏览器，输入<code>https://ip:8080</code>显示如下：</p><img src="/2019/01/22/Docker%20Compose-实战MySql/image1.jpg">]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose-实战Tomcat</title>
      <link href="/2019/01/22/Docker%20Compose-%E5%AE%9E%E6%88%98Tomcat/"/>
      <url>/2019/01/22/Docker%20Compose-%E5%AE%9E%E6%88%98Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="YML文件"><a href="#YML文件" class="headerlink" title="YML文件"></a>YML文件</h1><p>在<code>/usr/local/docker/tomcat</code>文件夹下面创建<code>docker-compose.yml</code>文件，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>编辑内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.1&apos;</span><br><span class="line">services:</span><br><span class="line">  tomcat:</span><br><span class="line">    restart: always</span><br><span class="line">    image: tomcat</span><br><span class="line">    container_name: tomcat</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    volumes:</span><br><span class="line">      - /usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>注意：<code>-d</code> 是在后台运行。</p><p>打开浏览器，输入<code>https://ip:8080</code>显示tomcat官网。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose-基础</title>
      <link href="/2019/01/21/Docker%20Compose-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/01/21/Docker%20Compose-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Compose 是 Docker 官方的开源项目，目的是实现对 Docker 容器集群的快速编排。</p><p>开源地址： <a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a></p><p>官方文档：<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p><p>在实际开发中，我们经常需要多个容器相互协调，共同实现某项业务，最典型的实现一个Web项目，需要Web服务容器本身，还需要数据库服务容器等等，这时我们可通过一个docker-compose.yml模板文件来定义一组相关联的容器，使之成为一个项目。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里只介绍Linux上二进制包安装。直接运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>完成后查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker-compose --version</span><br><span class="line">docker-compose version 1.17.1, build 6d101fb</span><br></pre></td></tr></table></figure><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="1-build"><a href="#1-build" class="headerlink" title="1.build"></a>1.build</h2><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p><p>构建（重新构建）项目中的服务容器。</p><p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p><p>选项包括：</p><ul><li><code>--force-rm</code> 删除构建过程中的临时容器。</li><li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li><li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li></ul><h2 id="2-config"><a href="#2-config" class="headerlink" title="2.config"></a>2.config</h2><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h2 id="3-down"><a href="#3-down" class="headerlink" title="3.down"></a>3.down</h2><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h2 id="4-exec"><a href="#4-exec" class="headerlink" title="4.exec"></a>4.exec</h2><p>进入指定的容器。</p><h2 id="5-help"><a href="#5-help" class="headerlink" title="5.help"></a>5.help</h2><p>获得一个命令的帮助。</p><h2 id="6-images"><a href="#6-images" class="headerlink" title="6.images"></a>6.images</h2><p>列出 Compose 文件中包含的镜像。</p><h2 id="7-kill"><a href="#7-kill" class="headerlink" title="7.kill"></a>7.kill</h2><p>格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p><p>通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p><p>支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 <code>SIGINT</code> 信号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose <span class="built_in">kill</span> -s SIGINT</span><br></pre></td></tr></table></figure><h2 id="8-logs"><a href="#8-logs" class="headerlink" title="8.logs"></a>8.logs</h2><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p><p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p><p>该命令在调试问题的时候十分有用。</p><h2 id="9-pause"><a href="#9-pause" class="headerlink" title="9.pause"></a>9.pause</h2><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p><p>暂停一个服务容器。</p><h2 id="10-port"><a href="#10-port" class="headerlink" title="10.port"></a>10.port</h2><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p><p>打印某个容器端口所映射的公共端口。</p><p>选项：</p><ul><li><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</li><li><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。</li></ul><h2 id="11-ps"><a href="#11-ps" class="headerlink" title="11.ps"></a>11.ps</h2><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><h2 id="12-pull"><a href="#12-pull" class="headerlink" title="12.pull"></a>12.pull</h2><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p><p>拉取服务依赖的镜像。</p><p>选项：</p><ul><li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li></ul><h2 id="13-push"><a href="#13-push" class="headerlink" title="13.push`"></a>13.push`</h2><p>推送服务依赖的镜像到 Docker 镜像仓库。</p><h2 id="14-restart"><a href="#14-restart" class="headerlink" title="14.restart"></a>14.restart</h2><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h2 id="15-rm"><a href="#15-rm" class="headerlink" title="15.rm"></a>15.rm</h2><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h2 id="16-run"><a href="#16-run" class="headerlink" title="16.run"></a>16.run</h2><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p><p>在指定服务上执行一个命令。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run ubuntu ping docker.com</span><br></pre></td></tr></table></figure><p>将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。</p><p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p><p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p><p>两个不同点：</p><ul><li>给定命令将会覆盖原有的自动运行命令；</li><li>不会自动创建端口，以避免冲突。</li></ul><p>如果不希望自动启动关联的容器，可以使用 <code>--no-deps</code> 选项，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --no-deps web python manage.py shell</span><br></pre></td></tr></table></figure><p>将不会启动 web 容器所关联的其它容器。</p><p>选项：</p><ul><li><code>-d</code> 后台运行容器。</li><li><code>--name NAME</code> 为容器指定一个名字。</li><li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li><li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li><li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li><li><code>--no-deps</code> 不自动启动关联的服务容器。</li><li><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</li><li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li><li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li><li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li></ul><h2 id="17-scale"><a href="#17-scale" class="headerlink" title="17.scale"></a>17.scale</h2><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p><p>设置指定服务运行的容器个数。</p><p>通过 <code>service=num</code> 的参数来设置数量。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose scale web=3 db=2</span><br></pre></td></tr></table></figure><p>将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p><p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h2 id="18-start"><a href="#18-start" class="headerlink" title="18.start"></a>18.start</h2><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h2 id="19-stop"><a href="#19-stop" class="headerlink" title="19.stop"></a>19.stop</h2><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h2 id="20-top"><a href="#20-top" class="headerlink" title="20.top"></a>20.top</h2><p>查看各个服务容器内运行的进程。</p><h2 id="21-unpause"><a href="#21-unpause" class="headerlink" title="21.unpause"></a>21.unpause</h2><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p><h2 id="22-up"><a href="#22-up" class="headerlink" title="22.up"></a>22.up</h2><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><ul><li><code>-d</code> 在后台运行服务容器。</li><li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li><li><code>--no-deps</code> 不启动服务所链接的容器。</li><li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li><li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li><li><code>--no-build</code> 不自动构建缺失的服务镜像。</li><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h2 id="23-version"><a href="#23-version" class="headerlink" title="23.version"></a>23.version</h2><p>格式为 <code>docker-compose version</code>。</p><h1 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p><p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  webapp:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">examples/web</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/data"</span></span><br></pre></td></tr></table></figure><p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p><p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中再次设置。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  webapp:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure><p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p><p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p><p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  webapp:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./dir</span></span><br><span class="line"><span class="attr">      dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="attr">        buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用 <code>cache_from</code> 指定构建镜像的缓存</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  context:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">  cache_from:</span></span><br><span class="line"><span class="attr">    - alpine:</span><span class="string">latest</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">corp/web_app:3.14</span></span><br></pre></td></tr></table></figure><h3 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add, cap_drop"></a><code>cap_add, cap_drop</code></h3><p>指定容器的内核能力（capacity）分配。</p><p>例如，让容器拥有所有能力可以指定为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cap_add:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ALL</span></span><br></pre></td></tr></table></figure><p>去掉 NET_ADMIN 能力可以指定为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cap_drop:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">NET_ADMIN</span></span><br></pre></td></tr></table></figure><h3 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h3><p>覆盖容器启动后默认执行的命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h3 id="configs"><a href="#configs" class="headerlink" title="configs"></a><code>configs</code></h3><p>仅用于 <code>Swarm mode</code></p><h3 id="cgroup-parent"><a href="#cgroup-parent" class="headerlink" title="cgroup_parent"></a><code>cgroup_parent</code></h3><p>指定父 <code>cgroup</code> 组，意味着将继承该组的资源限制。</p><p>例如，创建了一个 cgroup 组名称为 <code>cgroups_1</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cgroup_parent:</span> <span class="string">cgroups_1</span></span><br></pre></td></tr></table></figure><h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h3><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p></blockquote><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a><code>deploy</code></h3><p>仅用于 <code>Swarm mode</code></p><h3 id="devices"><a href="#devices" class="headerlink" title="devices"></a><code>devices</code></h3><p>指定设备映射关系。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devices:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"/dev/ttyUSB1:/dev/ttyUSB0"</span></span><br></pre></td></tr></table></figure><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p></blockquote><h3 id="dns"><a href="#dns" class="headerlink" title="dns"></a><code>dns</code></h3><p>自定义 <code>DNS</code> 服务器。可以是一个值，也可以是一个列表。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure><h3 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a><code>dns_search</code></h3><p>配置 <code>DNS</code> 搜索域。可以是一个值，也可以是一个列表。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns_search:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">domain1.example.com</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">domain2.example.com</span></span><br></pre></td></tr></table></figure><h3 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a><code>tmpfs</code></h3><p>挂载一个 tmpfs 文件系统到容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tmpfs:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">tmpfs:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/run</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure><h3 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">env_file: .env</span><br><span class="line"></span><br><span class="line">env_file:</span><br><span class="line">  - ./common.env</span><br><span class="line">  - ./apps/web.env</span><br><span class="line">  - /opt/secrets.env</span><br></pre></td></tr></table></figure><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common.env: Set development environment</span></span><br><span class="line">PROG_ENV=development</span><br></pre></td></tr></table></figure><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h3><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">  RACK_ENV:</span> <span class="string">development</span></span><br><span class="line"><span class="attr">  SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">RACK_ENV=development</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure><p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="http://yaml.org/type/bool.html" target="_blank" rel="noopener">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y|Y|yes|Yes|YES|n|N|no|No|NO|<span class="literal">true</span>|True|TRUE|<span class="literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure><h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a><code>expose</code></h3><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p><p>仅可以指定内部端口为参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"3000"</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"8000"</span></span><br></pre></td></tr></table></figure><h3 id="external-links"><a href="#external-links" class="headerlink" title="external_links"></a><code>external_links</code></h3><blockquote><p>注意：不建议使用该指令。</p></blockquote><p>链接到 <code>docker-compose.yml</code> 外部的容器，甚至并非 <code>Compose</code> 管理的外部容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">external_links:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">redis_1</span></span><br><span class="line"><span class="attr"> - project_db_1:</span><span class="string">mysql</span></span><br><span class="line"><span class="attr"> - project_db_1:</span><span class="string">postgresql</span></span><br></pre></td></tr></table></figure><h3 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a><code>extra_hosts</code></h3><p>类似 Docker 中的 <code>--add-host</code> 参数，指定额外的 host 名称映射信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"googledns:8.8.8.8"</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"dockerhub:52.1.157.61"</span></span><br></pre></td></tr></table></figure><p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure><h3 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h3><p>通过命令检查容器是否健康运行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line"><span class="attr">  test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  interval:</span> <span class="number">1</span><span class="string">m30s</span></span><br><span class="line"><span class="attr">  timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">  retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure><h3 id="labels"><a href="#labels" class="headerlink" title="labels"></a><code>labels</code></h3><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="string">com.startupteam.description:</span> <span class="string">"webapp for a startup team"</span></span><br><span class="line">  <span class="string">com.startupteam.department:</span> <span class="string">"devops department"</span></span><br><span class="line">  <span class="string">com.startupteam.release:</span> <span class="string">"rc3 for v1.0"</span></span><br></pre></td></tr></table></figure><h3 id="links"><a href="#links" class="headerlink" title="links"></a><code>links</code></h3><blockquote><p>注意：不推荐使用该指令。</p></blockquote><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a><code>logging</code></h3><p>配置日志选项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  driver:</span> <span class="string">syslog</span></span><br><span class="line"><span class="attr">  options:</span></span><br><span class="line"><span class="attr">    syslog-address:</span> <span class="string">"tcp://192.168.0.42:123"</span></span><br></pre></td></tr></table></figure><p>目前支持三种日志驱动类型。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver:</span> <span class="string">"json-file"</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">"syslog"</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">"none"</span></span><br></pre></td></tr></table></figure><p><code>options</code> 配置日志驱动的相关参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">options:</span></span><br><span class="line"><span class="attr">  max-size:</span> <span class="string">"200k"</span></span><br><span class="line"><span class="attr">  max-file:</span> <span class="string">"10"</span></span><br></pre></td></tr></table></figure><h3 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a><code>network_mode</code></h3><p>设置网络模式。使用和 <code>docker run</code> 的 <code>--network</code> 参数一样的值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">"bridge"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"none"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"service:[service name]"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"container:[container name/id]"</span></span><br></pre></td></tr></table></figure><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h3><p>配置容器连接的网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  some-service:</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">some-network</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  some-network:</span></span><br><span class="line"><span class="attr">  other-network:</span></span><br></pre></td></tr></table></figure><h3 id="pid"><a href="#pid" class="headerlink" title="pid"></a><code>pid</code></h3><p>跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pid:</span> <span class="string">"host"</span></span><br></pre></td></tr></table></figure><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h3><p>暴露端口信息。</p><p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"3000"</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"8000:8000"</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"49100:22"</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"127.0.0.1:8001:8001"</span></span><br></pre></td></tr></table></figure><p><em>注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p><h3 id="secrets"><a href="#secrets" class="headerlink" title="secrets"></a><code>secrets</code></h3><p>存储敏感数据，例如 <code>mysql</code> 服务密码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    MYSQL_ROOT_PASSWORD_FILE:</span> <span class="string">/run/secrets/db_root_password</span></span><br><span class="line"><span class="attr">  secrets:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">db_root_password</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">my_other_secret</span></span><br><span class="line"></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line"><span class="attr">  my_secret:</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">./my_secret.txt</span></span><br><span class="line"><span class="attr">  my_other_secret:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="security-opt"><a href="#security-opt" class="headerlink" title="security_opt"></a><code>security_opt</code></h3><p>指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security_opt:</span></span><br><span class="line"><span class="attr">    - label:</span><span class="attr">user:USER</span></span><br><span class="line"><span class="attr">    - label:</span><span class="attr">role:ROLE</span></span><br></pre></td></tr></table></figure><h3 id="stop-signal"><a href="#stop-signal" class="headerlink" title="stop_signal"></a><code>stop_signal</code></h3><p>设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stop_signal:</span> <span class="string">SIGUSR1</span></span><br></pre></td></tr></table></figure><h3 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h3><p>配置容器内核参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="string">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="string">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure><h3 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h3><p>指定容器的 ulimits 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line"><span class="attr">  nproc:</span> <span class="number">65535</span></span><br><span class="line"><span class="attr">  nofile:</span></span><br><span class="line"><span class="attr">    soft:</span> <span class="number">20000</span></span><br><span class="line"><span class="attr">    hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h3><p>数据卷所挂载路径设置。可以设置宿主机路径 （<code>HOST:CONTAINER</code>） 或加上访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><p>该指令中路径支持相对路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure><h3 id="其它指令"><a href="#其它指令" class="headerlink" title="其它指令"></a>其它指令</h3><p>此外，还有包括 <code>domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir</code> 等指令，基本跟 <code>docker run</code> 中对应参数的功能一致。</p><p>指定服务容器启动后执行的入口文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> <span class="string">/code/entrypoint.sh</span></span><br></pre></td></tr></table></figure><p>指定容器中运行应用的用户名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>指定器中工作目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">working_dir:</span> <span class="string">/code</span></span><br></pre></td></tr></table></figure><p>指定容器中搜索域名、主机名、mac 地址等。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">domainname:</span> <span class="string">your_website.com</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">mac_address:</span> <span class="number">08</span><span class="bullet">-00</span><span class="bullet">-27</span><span class="bullet">-00</span><span class="bullet">-0</span><span class="string">C-0A</span></span><br></pre></td></tr></table></figure><p>允许容器中运行一些特权命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 <code>always</code> 或者 <code>unless-stopped</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">read_only:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>打开标准输入，可以接受外部输入。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stdin_open:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>模拟一个伪终端。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h3><p>Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 <code>.env</code> 文件中的变量。</p><p>例如，下面的 Compose 文件将从运行它的环境中读取变量 <code>${MONGO_VERSION}</code>的值，并写入执行的指令中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">"mongo:$&#123;MONGO_VERSION&#125;"</span></span><br></pre></td></tr></table></figure><p>如果执行 <code>MONGO_VERSION=3.2 docker-compose up</code> 则会启动一个 <code>mongo:3.2</code> 镜像的容器；如果执行 <code>MONGO_VERSION=2.8 docker-compose up</code> 则会启动一个 <code>mongo:2.8</code> 镜像的容器。</p><p>若当前目录存在 <code>.env</code> 文件，执行 <code>docker-compose</code> 命令时将从该文件中读取变量。</p><p>在当前目录新建 <code>.env</code> 文件并写入以下内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支持 # 号注释</span></span><br><span class="line">MONGO_VERSION=3.6</span><br></pre></td></tr></table></figure><p>执行 <code>docker-compose up</code> 则会启动一个 <code>mongo:3.6</code> 镜像的容器。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这里记录的命令比较多，过一遍即可！</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-常用命令</title>
      <link href="/2019/01/20/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/20/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.查看 Docker 版本：docker version</span><br><span class="line"></span><br><span class="line">2.从 Docker 文件构建 Docker 映像：docker build -t image-name docker-file-location</span><br><span class="line"></span><br><span class="line">3.运行 Docker 映像：docker run -d image-name</span><br><span class="line"></span><br><span class="line">4.查看可用的 Docker 映像：docker images</span><br><span class="line"></span><br><span class="line">5.查看最近的运行容器：docker ps -l</span><br><span class="line"></span><br><span class="line">6.查看所有正在运行的容器：docker ps -a</span><br><span class="line"></span><br><span class="line">7.停止运行容器：docker stop container_id</span><br><span class="line"></span><br><span class="line">8.删除一个镜像：docker rmi image-name</span><br><span class="line"></span><br><span class="line">9.删除所有镜像：docker rmi $(docker images -q)</span><br><span class="line"></span><br><span class="line">10.强制删除所有镜像：docker rmi -r $(docker images -q)</span><br><span class="line"></span><br><span class="line">11.删除所有虚悬镜像：docker rmi $(docker images -q -f dangling=true)</span><br><span class="line"></span><br><span class="line">12.删除所有容器：docker rm $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line">13.进入 Docker 容器：docker exec -it container-id /bin/bash</span><br><span class="line"></span><br><span class="line">14.查看所有数据卷：docker volume ls</span><br><span class="line"></span><br><span class="line">15.删除指定数据卷：docker volume rm [volume_name]</span><br><span class="line"></span><br><span class="line">16.删除所有未关联的数据卷：docker volume rm $(docker volume ls -qf dangling=true)</span><br><span class="line"></span><br><span class="line">17.从主机复制文件到容器：sudo docker cp host_path containerID:container_path</span><br><span class="line"></span><br><span class="line">18.从容器复制文件到主机：sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-MySql</title>
      <link href="/2019/01/20/Docker-MySql/"/>
      <url>/2019/01/20/Docker-MySql/</url>
      
        <content type="html"><![CDATA[<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>我们可先使用如下命令，查询Docker Hub上关于MySql相关信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/mysql# docker search mysql</span><br></pre></td></tr></table></figure><h1 id="获取MySql"><a href="#获取MySql" class="headerlink" title="获取MySql"></a>获取MySql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/mysql# docker pull mysql</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">177e7ef0df69: Pull complete </span><br><span class="line">cac25352c4c8: Pull complete </span><br><span class="line">8585afabb40a: Pull complete </span><br><span class="line">1e4af4996053: Pull complete </span><br><span class="line">c326522894da: Pull complete </span><br><span class="line">9020d6b6b171: Pull complete </span><br><span class="line">55eb37ec6e5f: Pull complete </span><br><span class="line">37f3f3d72fbd: Pull complete </span><br><span class="line">03f098d64268: Pull complete </span><br><span class="line">46a52a54cfe9: Pull complete </span><br><span class="line">202bc662895d: Pull complete </span><br><span class="line">46014f07b258: Pull complete </span><br><span class="line">Digest: sha256:196c04e1944c5e4ea3ab86ae5f78f697cf18ee43865f25e334a6ffb1dbea81e6</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/mysql# docker run -p 3306:3306 --name mysql \</span><br><span class="line"> -v /usr/local/docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line"> -v /usr/local/docker/mysql/logs:/var/log/mysql \</span><br><span class="line"> -v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line"> -d mysql</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>-p 3306:3306</code>：将容器的3306端口映射到主机的3306端口</li><li><code>-v /usr/local/docker/mysql/conf:/etc/mysql/conf.d</code>：将主机当前目录下的 conf 挂载到容器的 <code>/etc/mysql/conf.d</code></li><li><code>-v /usr/local/docker/mysql/logs:/var/log/mysql</code>：将主机当前目录下的 logs 目录挂载到容器的<code>/var/log/mysql</code></li><li><code>-v /usr/local/docker/mysql/data:/var/lib/mysql</code>：将主机当前目录下的 data 目录挂载到容器的 <code>/var/lib/mysql</code></li><li><code>-e MYSQL\_ROOT\_PASSWORD=123456</code>：初始化root用户的密码</li></ul><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker ps</span><br></pre></td></tr></table></figure><table><thead><tr><th>CONTAINER ID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>3d04b5c68a08</td><td>mysql</td><td>“docker-entrypoint.s…”</td><td>8 minutes ago</td><td>Up 8 minutes</td><td>0.0.0.0:3306-&gt;3306/tcp, 33060/tcp</td><td>mysql</td></tr></tbody></table><p>使用SQLyog链接不上，并抛出如下问题：</p><img src="/2019/01/20/Docker-MySql/mysqlError1.jpg"><p>原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password</span><br></pre></td></tr></table></figure><p>方案：</p><p>我们把mysql用户登录密码加密规则还原成mysql_native_password。</p><p>步骤：</p><p>1.进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 3d0 bash</span><br></pre></td></tr></table></figure><p>2.链接mysql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@3d04b5c68a08:/# mysql -uroot -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>3.配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER  USER  &apos;root&apos;  IDENTIFIED  WITH  mysql_native_password  BY  &apos;123456&apos;;</span><br></pre></td></tr></table></figure><p>5.然后再使用SQLyog测试链接，成功！</p><img src="/2019/01/20/Docker-MySql/mysqlError2.jpg">]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Positive Discipline-初衷</title>
      <link href="/2019/01/19/Positive-Discipline-%E5%88%9D%E8%A1%B7/"/>
      <url>/2019/01/19/Positive-Discipline-%E5%88%9D%E8%A1%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    在《孩子，把你的手给我》书中这样说：我们不但要有一颗爱孩子的心，更要懂得如何去爱孩子。我知道这句话前部分是为人父母最基本的品质，但重点在后面一部分，如何去爱孩子？重点在于爱的表现方式上，最典型笼统式的两种常见方式是溺爱和惩罚，当然这都是极端，是不太可取的。但准爸妈们是否有过自问：我该如何正确的爱孩子？</p><h1 id="我的初衷"><a href="#我的初衷" class="headerlink" title="我的初衷"></a>我的初衷</h1><p>​    16年5月15日，注定是我人生意义非凡的一天—大女儿出生。记得当时，产房外，得知母女平安后，我激动的哭了出来。</p><p>​    女儿出生，给我们两个原生家庭带来了无限幸福感。刚开始，亲戚朋友见了面，都会相互恭喜，恭喜什么？无外乎就是，恭喜你做爷爷，做奶奶，做伯伯……到后来，时间稍长些，新奇感便也渐渐淡下来，更多便是孩子如何与自己与周遭相处的事儿。</p><p>​    陪伴孩子成长中，我和老婆刚开始不察觉，但现在来看，原来我们也变了很多。孩子出生后，老婆变各种育儿科普–育儿书籍.网站论坛。慢慢也形成了自己一套育儿理论方式，想在同辈里的宝妈们，大多会主动向她请教育儿经。当然，我只是站在老公的角度看待这些客观现象，但老婆做出这些学习的行动以及能坚持这些行为的内在驱动力，似乎应该是很少去尝试理解（但这也成为现在打心底佩服老婆的原因）。</p><p>​    我心里，只有未来。关于宝贝的未来，我思考了很多，似乎得出的结论只有一个：我得好好挣钱！一个总是思考未来的爸爸，必然会忽视很多当下的细节！这估计也是偶尔跟老婆在关于育儿方面起争执的症结所在吧！</p><p>​    最近，女儿慢慢成长了，2岁半，上了蒙氏幼儿园。在学校老师们用心的喂了点“盐”，经常在家就是：爸爸，没经过我的允许，你不可以怎样怎样。当然我是非常认可老师们教会宝贝们正确表达自己。只是很多时候，孩子会用“哭闹”这种方式来表达自己的诉求，不对，准确说是，我有种被要挟然后被打败的感觉！</p><p>​    和孩子的博弈每天都会上演，剧情一般是这样。</p><p>​    “爸爸，我要…….(需求)”</p><p>​    “不可以”</p><p>​    “呜呜呜……啊啊啊啊啊……”</p><p>​    如果需求正常，到好，满足便是，父女相安无事！但宝贝经常会提一些不合时，不合适的要求，作为爸爸能全部满足吗？当然是不可以。可越是孩子长大，精力越盛，面对她的各种哭诉，我的确是疲于应对，但自己的宝贝，不能说采取恐吓威胁，武力解决，亦或是百依百顺，这样子，实在不敢想象，今后会教出怎样的孩子。</p><p>​    “你要用和善而坚定的态度拒绝宝贝的不合理需求…..”，老婆对我说过的这句话，我一直没深究它的出处。也就是今天我得到了答案，在老婆之前看过的一本书里–《Positive Discipline 正面管教》。</p><p>​    《Positive Discipline 正面管教》是由美籍作家Jane Nelsen(简.尼尔森)著，由中国作家王冰译。简.尼尔森是一名教育学博士，杰出的心理学家，教育家，反正是个“大家”，当然作者的社会荣誉，倒不是我最关心的，当我看到介绍，作者是7个孩子的母亲，22个孩子的祖母或外祖母，还是两个孩子的曾祖母，我开始好奇了！作者是如何面对和处理与子女关系的。</p><p>​    书中译者王冰在使用了《Positive Discipline 正面管教》里面提及的系列正面管教方法后，按她自己的原话”我很快发现自己可以不再需要’克制’自己，开始自然而然地‘出乎本能‘地改变着我和孩子之间的相处模式。孩子也因此变得更配合，更可爱。我如饥似渴地读下去，不知不觉进入一个豁然开朗的新天地”。译者王冰的自述，不正是我内心所渴望的吗。</p><p>​    另外译者还提及翻译《Positive Discipline 正面管教》一书的初衷，当然我的思想境界可能还未达到她那个高度，用我自己的话来说“我希望，使用有效的，正面的方法管教孩子，让孩子在自信，自立的快乐环境中健康成长，把良好的行为品德，有益的社会技能深深植入孩子心底”。这也是我的初衷！</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>​    思考下：如何不惩罚，不骄纵地有效管教孩子！</p><p>​    </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Positive Discipline </tag>
            
            <tag> 正面管教 </tag>
            
            <tag> 育儿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-Tomcat</title>
      <link href="/2019/01/19/Docker-Tomcat/"/>
      <url>/2019/01/19/Docker-Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Hub上查找Tomcat"><a href="#Docker-Hub上查找Tomcat" class="headerlink" title="Docker Hub上查找Tomcat"></a>Docker Hub上查找Tomcat</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/tomcat# docker search tomcat</span><br><span class="line">NAME                                       DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">tomcat                                     Apache Tomcat is an open source implementati…   2259                [OK]                </span><br><span class="line">tomee                                      Apache TomEE is an all-Apache Java EE certif…   60                  [OK]                </span><br><span class="line">dordoka/tomcat                             Ubuntu 14.04, Oracle JDK 8 and Tomcat 8 base…   51                                      [OK]</span><br><span class="line">davidcaste/alpine-tomcat                   Apache Tomcat 7/8 using Oracle Java 7/8 with…   34                                      [OK]</span><br><span class="line">bitnami/tomcat                             Bitnami Tomcat Docker Image                     27                                      [OK]</span><br><span class="line">consol/tomcat-7.0                          Tomcat 7.0.57, 8080, &quot;admin/admin&quot;              16                                      [OK]</span><br><span class="line">cloudesire/tomcat                          Tomcat server, 6/7/8                            14                                      [OK]</span><br><span class="line">tutum/tomcat                               Base docker image to run a Tomcat applicatio…   11                                      </span><br><span class="line">meirwa/spring-boot-tomcat-mysql-app        a sample spring-boot app using tomcat and My…   10                                      [OK]</span><br><span class="line">aallam/tomcat-mysql                        Debian, Oracle JDK, Tomcat &amp; MySQL              10                                      [OK]</span><br><span class="line">jeanblanchard/tomcat                       Minimal Docker image with Apache Tomcat         8                                       </span><br><span class="line">arm32v7/tomcat                             Apache Tomcat is an open source implementati…   6                                       </span><br><span class="line">rightctrl/tomcat                           CentOS , Oracle Java, tomcat application ssl…   3                                       [OK]</span><br><span class="line">maluuba/tomcat7-java8                      Tomcat7 with java8.                             3                                       </span><br><span class="line">fabric8/tomcat-8                           Fabric8 Tomcat 8 Image                          2                                       [OK]</span><br><span class="line">amd64/tomcat                               Apache Tomcat is an open source implementati…   2                                       </span><br><span class="line">arm64v8/tomcat                             Apache Tomcat is an open source implementati…   2                                       </span><br><span class="line">99taxis/tomcat7                            Tomcat7                                         1                                       [OK]</span><br><span class="line">cfje/tomcat-resource                       Tomcat Concourse Resource                       0                                       </span><br><span class="line">1and1internet/debian-9-java-8-tomcat-8.5   Our tomcat 8.5 image                            0                                       [OK]</span><br><span class="line">s390x/tomcat                               Apache Tomcat is an open source implementati…   0                                       </span><br><span class="line">jelastic/tomcat                            An image of the Tomcat Java application serv…   0                                       </span><br><span class="line">picoded/tomcat7                            tomcat7 with jre8 and MANAGER_USER / MANAGER…   0                                       [OK]</span><br><span class="line">oobsri/tomcat8                             Testing CI Jobs with different names.           0                                       </span><br><span class="line">swisstopo/service-print-tomcat             backend tomcat for service-print &quot;the true, …   0</span><br></pre></td></tr></table></figure><h1 id="拉取官方镜像"><a href="#拉取官方镜像" class="headerlink" title="拉取官方镜像"></a>拉取官方镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/tomcat# docker pull tomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/tomcat</span><br><span class="line">cd8eada9c7bb: Pull complete </span><br><span class="line">c2677faec825: Pull complete </span><br><span class="line">fcce419a96b1: Pull complete </span><br><span class="line">00d7fcb5828a: Pull complete </span><br><span class="line">f8c860563d60: Pull complete </span><br><span class="line">46f754145d12: Pull complete </span><br><span class="line">bff15a87739e: Pull complete </span><br><span class="line">6b5d3f0336b9: Pull complete </span><br><span class="line">1d858972966c: Pull complete </span><br><span class="line">4f2dc2e148d0: Pull complete </span><br><span class="line">db18a2f7d48d: Pull complete </span><br><span class="line">Digest: sha256:fd162e0f238deae5b7028934377abc40658e82d7c9b2a0038546466bb0d89e6d</span><br><span class="line">Status: Downloaded newer image for tomcat:latest</span><br></pre></td></tr></table></figure><h1 id="运行Tomcat"><a href="#运行Tomcat" class="headerlink" title="运行Tomcat"></a>运行Tomcat</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/tomcat# docker run --name tomcat -p 8080:8080 -d tomcat</span><br><span class="line">dfdccb5fb79403a3111d99f381afc9ad92a1aeb7e06d6f51846c142a6ebced87</span><br><span class="line">root@mkin:/usr/local/docker/tomcat# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">dfdccb5fb794        tomcat              &quot;catalina.sh run&quot;   11 seconds ago      Up 10 seconds       0.0.0.0:8080-&gt;8080/tcp   tomcat</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>打开浏览器输入：<code>http://192.168.20.141:8080/</code>(以自己虚拟机ip地址为准)。显示如下：</p><img src="/2019/01/19/Docker-Tomcat/image1.jpg">]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-仓库</title>
      <link href="/2019/01/19/Docker-%E4%BB%93%E5%BA%93/"/>
      <url>/2019/01/19/Docker-%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><a id="more"></a><h1 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>地址： <a href="https://cloud.docker.com" target="_blank" rel="noopener">https://cloud.docker.com</a></p><p>可以通过执行 <code>docker login</code> 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p><p>你可以通过 <code>docker logout</code> 退出登录。</p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>以centos为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search centos</span><br><span class="line"></span><br><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><p>用户也可以在登录后通过 <code>docker push</code> 命令来将自己的镜像推送到 Docker Hub。</p><p>以下命令中的 <code>username</code> 请替换为你的 Docker 账号用户名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag ubuntu:17.10 username/ubuntu:17.10</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">$ docker push username/ubuntu:17.10</span><br><span class="line"></span><br><span class="line">$ docker search username</span><br></pre></td></tr></table></figure><h1 id="Docker-私有仓库"><a href="#Docker-私有仓库" class="headerlink" title="Docker 私有仓库"></a>Docker 私有仓库</h1><h2 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h2><p>你可以通过获取官方 <code>registry</code> 镜像来运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure><p>这将使用官方的 <code>registry</code> 镜像来启动私有仓库。默认情况下，仓库会被创建在容器的 <code>/var/lib/registry</code> 目录下。你可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 <code>/opt/data/registry</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /opt/data/registry:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><h2 id="私有仓库操作"><a href="#私有仓库操作" class="headerlink" title="私有仓库操作"></a>私有仓库操作</h2><p>创建好私有仓库之后，就可以使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 <code>127.0.0.1:5000</code>。</p><p>先在本机查看已有的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY     TAG       IMAGE ID      CREATED     VIRTUAL SIZE</span><br><span class="line">ubuntu       latest     ba5877dc9bec  6 weeks ago     192.7 MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker tag</code> 将 <code>ubuntu:latest</code> 这个镜像标记为 <code>127.0.0.1:5000/ubuntu:latest</code>。</p><p>格式为 <code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br><span class="line">127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker push</code> 上传标记的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker push 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">The push refers to repository [127.0.0.1:5000/ubuntu]</span><br><span class="line">373a30c24545: Pushed</span><br><span class="line">a9148f5200b0: Pushed</span><br><span class="line">cdd3de0940ab: Pushed</span><br><span class="line">fc56279bbb33: Pushed</span><br><span class="line">b38367233d37: Pushed</span><br><span class="line">2aebd096e0e2: Pushed</span><br><span class="line">latest: digest: sha256:fe4277621f10b5026266932ddf760f5a756d2facd505a94d2da12f4f52f71f5a size: 1568</span><br></pre></td></tr></table></figure><p>用 <code>curl</code> 查看仓库中的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"ubuntu"</span>]&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到 <code>{&quot;repositories&quot;:[&quot;ubuntu&quot;]}</code>，表明镜像已经被成功上传了。</p><p>先删除已有镜像，再尝试从私有仓库中下载这个镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm 127.0.0.1:5000/ubuntu:latest</span><br><span class="line"></span><br><span class="line">$ docker pull 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">Pulling repository 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">ba5877dc9bec: Download complete</span><br><span class="line">511136ea3c5a: Download complete</span><br><span class="line">9bad880da3d2: Download complete</span><br><span class="line">25f11f5fb0cb: Download complete</span><br><span class="line">ebc34468f71d: Download complete</span><br><span class="line">2318d26665ef: Download complete</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.Ubuntu 16.04+, Debian 8+, centos 7</p><p>对于使用 <code>systemd</code> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"192.168.199.100:5000"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.如果你不想使用 <code>127.0.0.1:5000</code> 作为仓库地址，比如想让本网段的其他主机也能把镜像推送到私有仓库。你就得把例如 <code>192.168.199.100:5000</code> 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。</p><p>这是因为 Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制，或者查看下一节配置能够通过 <code>HTTPS</code> 访问的私有仓库。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker Hub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-容器</title>
      <link href="/2019/01/19/Docker-%E5%AE%B9%E5%99%A8/"/>
      <url>/2019/01/19/Docker-%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>概念性的内容前面已经做过铺垫，这里不再赘述，直接进入实操！</p><a id="more"></a><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>主要为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br></pre></td></tr></table></figure><p>启动一个bash终端，允许用户进行交互：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker images</span><br><span class="line">REPOSITORY     TAG         IMAGE ID        CREATED           SIZE</span><br><span class="line">nginx          v3        fcd07ecaa685    33 minutes ago      109MB</span><br><span class="line">nginx         latest     7042885a156a     3 weeks ago        109MB</span><br><span class="line">hello-world   latest     4ab4c602aa5e     4 months ago       1.84kB</span><br><span class="line"></span><br><span class="line">root@mkin:/usr/local/nginx# docker run -t -i fcd07ecaa685  /bin/bash</span><br><span class="line">root@58193836306b:/#</span><br></pre></td></tr></table></figure><p>退出容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@58193836306b:/# exit   </span><br><span class="line">exit</span><br><span class="line">root@mkin:/usr/local/nginx#</span><br></pre></td></tr></table></figure><p>另外可通过如下命令将一个已经终止的容器启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container start</span><br></pre></td></tr></table></figure><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p><h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p>我们可使用<code>docker container stop</code>来终止一个容器。</p><p>另外，只启动了一个终端的容器，通过 <code>exit</code> 命令或 <code>Ctrl+d</code>来退出终端时，所创建的容器立刻终止。</p><p>通过如下命令查看终止状态的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure><p>然后再通过<code>docker container start</code>来启动容器，另外<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker exec -it 58193836306b /bin/bash</span><br><span class="line">root@58193836306b:/# exit</span><br><span class="line">exit</span><br><span class="line">root@mkin:/usr/local/nginx# docker container ls -a</span><br></pre></td></tr></table></figure><p>使用这种方式进入容器，然后使用<code>exit</code>推出容器，不会导致容器停止。</p><p>而另外一种<code>attach</code>当使用<code>exit</code>退出容器时，会导致容器停止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker attach 58193836306b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-镜像</title>
      <link href="/2019/01/19/Docker-%E9%95%9C%E5%83%8F/"/>
      <url>/2019/01/19/Docker-%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面已经介绍了什么是Docker，为什么要使用Docker,以及其它一些关于Docker的相关概念，目的是加身对Docker的理解。其中就有介绍过Docker镜像这个概念（这里就不展开说），接下来我们要知道如何使用Docker镜像，以及如何使用Dockerfile定制镜像。</p><a id="more"></a><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.地址格式一般是 &lt;域名/IP&gt;[:端口号] ，默认地址是Docker Hub；</p><p>2.仓库名是两段式名称，即&lt;用户名&gt;/&lt;软件名&gt;,对于Docker Hub，如果不给出用户名，则默认为library，也即是官方镜像。</p><p>例子：获取ubuntu镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker pull ubuntu:16.04</span><br><span class="line">16.04: Pulling from library/ubuntu</span><br><span class="line">b849b56b69e7: Pull complete </span><br><span class="line">42986ef25bcd: Pull complete </span><br><span class="line">d927c1b717ec: Pull complete </span><br><span class="line">15b86ea20233: Pull complete </span><br><span class="line">Digest: sha256:b967b9f2a5625231a22db642609e61b7b1a5481128f51fe771e91bb92e0a35d0</span><br><span class="line">Status: Downloaded newer image for ubuntu:16.04</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.仔细观察下载过程，是符合前面提及的分层存储的概念，终端显示了每一层的ID的前12位。另外下载完成后也给出了镜像完整的sha256摘要。</p><p>2.如果下载镜像缓慢，记得参考前面，配置加速。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>这里我们以前面获取的ubuntu镜像为基础，启动并运行一个容器。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker run -it --rm ubuntu:16.04 bash  </span><br><span class="line">root@d22246635fdc:/# cat /etc/os-release</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;16.04.5 LTS (Xenial Xerus)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 16.04.5 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;16.04&quot;</span><br><span class="line">HOME_URL=&quot;http://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">VERSION_CODENAME=xenial</span><br><span class="line">UBUNTU_CODENAME=xenial</span><br><span class="line">root@d22246635fdc:/# </span><br><span class="line">root@d22246635fdc:/# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.其中docker run 便是运行容器的命令；</p><p>2.-it: -i是交互式操作；-t是终端；</p><p>3.-rm: 在容器退出后将其删除，避免测试时，浪费空间；</p><p>4.ubuntu：16.04： 是指用ubuntu：16.04镜像为基础来启动容器；</p><p>5.bash是放在镜像名后的命令，表示我们希望有交互式shell，因此使用的是bash;</p><p>6.进入容器后，我们执行了cat /etc/os-release命令，这是查看当前系统版本的命令。</p><p>7.exit:退出容器。</p><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              16.04               b0ef3016420a        3 weeks ago         117MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        4 months ago        1.84kB</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.体积：ubuntu在Docker Hub上和这里显示的体积大小是不一样的。这是因为这里显示的是镜像下载到本地展开后的大小，Docker Hub上显示的是压缩后的大小。</p><p>另外需要注意的是，这里列出的镜像体积总和并不一定是镜像实际占用的体积，因为Docker镜像采用的是多层存储结构，可以继承，复用，所以不同镜像可能使用相同的镜像基础，所以这里列出的镜像体积可能比实际镜像占用的体积大些。</p><p>查看镜像，容器，数据卷所占空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker system df</span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              2                   1                   116.7MB             116.7MB (99%)</span><br><span class="line">Containers          1                   0                   0B                  0B</span><br><span class="line">Local Volumes       0                   0                   0B                  0B</span><br><span class="line">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure><h2 id="dangling-image"><a href="#dangling-image" class="headerlink" title="dangling image"></a>dangling image</h2><p>使用docker image ls命令查看镜像时如果有显示为<code>&lt;none&gt;</code>的镜像，即为<code>dangling image</code>。出现原因：</p><ol><li><p><code>docker pull</code> 可能导致这种情况;</p></li><li><p><code>docker build</code> 也同样可以导致这种现象。</p><p>由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。</p></li></ol><p>可使用如下命令专门显示<code>dangling image</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -f dangling=true</span><br></pre></td></tr></table></figure><p>删除<code>dangling image</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><h2 id="显示所有包括中间层在内的镜像"><a href="#显示所有包括中间层在内的镜像" class="headerlink" title="显示所有包括中间层在内的镜像"></a>显示所有包括中间层在内的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -a</span><br></pre></td></tr></table></figure><p>注意：加速镜像构建、重复利用资源，Docker 会利用中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果想显示中间层镜像，需要使用<code>-a</code>参数。</p><p>这样会有很多没有标签的镜像，与前面的<code>dangling image</code>不同，这些无标签的镜像都是中间层镜像，是其它镜像所依赖的镜像，不应该被删除。</p><h2 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls ubuntu</span><br></pre></td></tr></table></figure><h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><p>先列出镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              16.04               b0ef3016420a        3 weeks ago         117MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        4 months ago        1.84kB</span><br></pre></td></tr></table></figure><p>使用<code>imgae ID</code>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker image rm b0e</span><br><span class="line">Untagged: ubuntu:16.04</span><br><span class="line">Untagged: ubuntu@sha256:b967b9f2a5625231a22db642609e61b7b1a5481128f51fe771e91bb92e0a35d0</span><br><span class="line">Deleted: sha256:b0ef3016420a4052400d0a36f5144ebdee5d358ef6942afee072517b5a94168c</span><br><span class="line">Deleted: sha256:7c42fc68785f05435c7d0a15ab5eba645dd51431ff85ba8c81aac71b6d7fa676</span><br><span class="line">Deleted: sha256:9ae10a8fb5d0419283b7d8ede59c6cb17df79c1bc0f0367ad5d5fd5f9040b9b7</span><br><span class="line">Deleted: sha256:8c7764429ac5850455be6b16dcbf2f3e916522ea400c90133b498701debfe3a2</span><br><span class="line">Deleted: sha256:8241afc74c6f5ca20c3bd7f3ddb3e5621d637ee85aaf40de440bf465b2a9984f</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.ID可以是完整的，也可以是ID的前三位即可;</p><p>2.也可以使用<code>docker image rm &lt;仓库名如centos&gt;</code>;</p><p>3.也可食用<code>docker image rm 镜像摘要</code>。</p><p>4.删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><h2 id="配合docker-image-ls"><a href="#配合docker-image-ls" class="headerlink" title="配合docker image ls"></a>配合docker image ls</h2><p>删除所有仓库名为 <code>redis</code> 的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure><p>删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="Dockerfile定制镜像"><a href="#Dockerfile定制镜像" class="headerlink" title="Dockerfile定制镜像"></a>Dockerfile定制镜像</h2><p>以定制<code>ngnix</code>镜像为例：</p><p>1.在<code>/usr/local/</code>路径下创建<code>nginx</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nginx</span><br></pre></td></tr></table></figure><p>2.进入<code>nginx</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx</span><br></pre></td></tr></table></figure><p>3.创建并编辑<code>Dockerfile</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p>编辑内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>4.构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/<span class="built_in">local</span>/nginx<span class="comment"># docker build -t nginx:v3 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM nginx</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">177e7ef0df69: Pull complete </span><br><span class="line">ea57c53235df: Pull complete </span><br><span class="line">bbdb1fbd4a86: Pull complete </span><br><span class="line">Digest: sha256:b543f6d0983fbc25b9874e22f4fe257a567111da96fd1d8f1b44315f1236398c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line"> ---&gt; 7042885a156a</span><br><span class="line">Step 2/2 : RUN <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 498081e4a8f3</span><br><span class="line">Removing intermediate container 498081e4a8f3</span><br><span class="line"> ---&gt; fcd07ecaa685</span><br><span class="line">Successfully built fcd07ecaa685</span><br><span class="line">Successfully tagged nginx:v3</span><br></pre></td></tr></table></figure><p>5.查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker image ls</span><br><span class="line">REPOSITORY          TAG         IMAGE ID        CREATED             SIZE</span><br><span class="line">nginx               v3        fcd07ecaa685     9 seconds ago       109MB</span><br></pre></td></tr></table></figure><p>6.运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker run --name mynginx -d fcd07ecaa685</span><br><span class="line">eade36419390f809357fbe7eaa93df2448b64a8c5928315972552fb902cc935f</span><br></pre></td></tr></table></figure><p>7.运行容器查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker ps</span><br></pre></td></tr></table></figure><table><thead><tr><th>CONTAINER ID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>eade36419390</td><td>fcd07ecaa685</td><td>“nginx -g’daemon of…”</td><td>54 seconds ago</td><td>Up 52 seconds</td><td>80/tcp</td><td>mynginx</td></tr></tbody></table><h2 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h2><p>请参考：</p><p>Dockerfie 官方文档](<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH-Win10使用SSH免密拉取GitLab代码</title>
      <link href="/2019/01/17/SSH-Win10%E4%BD%BF%E7%94%A8SSH%E5%85%8D%E5%AF%86%E6%8B%89%E5%8F%96GitLab%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/01/17/SSH-Win10%E4%BD%BF%E7%94%A8SSH%E5%85%8D%E5%AF%86%E6%8B%89%E5%8F%96GitLab%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>1.打开电脑终端 cd 进入文件路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Git\usr\bin</span><br></pre></td></tr></table></figure><p>2.运行如下密令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;maojing&quot;</span><br><span class="line"></span><br><span class="line">注：后面的用户名根据实际情况填写，只要确保唯一性即可，填什么都可。</span><br></pre></td></tr></table></figure><p>3.终端显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Git\usr\bin&gt;ssh-keygen -trsa -C &quot;maojing&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</span><br><span class="line">Created directory &apos;/c/Users/Administrator/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:NjSd5gVOH+iPNlfqV7eHtp9350ismT7oxEP2eEyEQJY maojing</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|       .+.o..    |</span><br><span class="line">|       .E=.= .   |</span><br><span class="line">|        o.* +    |</span><br><span class="line">|       . +.o  .  |</span><br><span class="line">|        S +o.o   |</span><br><span class="line">|       . =+=+.  o|</span><br><span class="line">|         .==+ ooo|</span><br><span class="line">|         ..oo=+o*|</span><br><span class="line">|         ...=+o=B|</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">C:\Program Files\Git\usr\bin&gt;</span><br></pre></td></tr></table></figure><p>4.获取公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.</span><br><span class="line"></span><br><span class="line">根据这句话即可找到公钥</span><br></pre></td></tr></table></figure><p>5.gitlab后台添加公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击用户-设置-SSH密钥，将上面复制的密钥粘贴进对应的位置，点击add key即可。</span><br></pre></td></tr></table></figure><p>6.ssh免密拉取远端代码到本地代码仓库</p><p>剩余操作详见《gitLab http 操作》一文</p>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> Win 10 </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH-访问远程主机</title>
      <link href="/2019/01/17/SSH-%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/"/>
      <url>/2019/01/17/SSH-%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="口令登录"><a href="#口令登录" class="headerlink" title="口令登录"></a>口令登录</h1><p>如果你是第一次登录对方主机，系统会出现下面的提示：</p><blockquote><p>　　$ ssh root@主机ip</p><p>　　The authenticity of host ‘host (12.18.429.21)’ can’t be established.</p><p>　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</p><p>　　Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p><p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。</p><p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p><p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p><blockquote><p>　　Are you sure you want to continue connecting (yes/no)? yes</p></blockquote><p>系统会出现一句提示，表示host主机已经得到认可。</p><blockquote><p>　　Warning: Permanently added ‘host,12.18.429.21’ (RSA) to the list of known hosts.</p></blockquote><p>然后，会要求输入密码。</p><blockquote><p>　　Password: (enter password)</p></blockquote><p>如果密码正确，就可以登录了。</p><p>当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p><h1 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h1><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>如何生成公钥请参考《SSH-Win10使用SSH免密拉取GitLab代码》，成功生成后再继续下面操作。</p><p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p><blockquote><p>　　$ ssh-copy-id root@主机ip</p></blockquote><p>好了，从此你再登录，就不需要输入密码了。</p><p>如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面”#”注释是否取掉。</p><blockquote><p>　　RSAAuthentication yes<br>　　PubkeyAuthentication yes<br>　　AuthorizedKeysFile .ssh/authorized_keys</p></blockquote><p>然后，重启远程主机的ssh服务。</p><blockquote><p>　　// ubuntu系统<br>　　service ssh restart</p><p>　　// debian系统<br>　　/etc/init.d/ssh restart</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> 免密登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-阿里云</title>
      <link href="/2019/01/17/hexo-%E9%98%BF%E9%87%8C%E4%BA%91/"/>
      <url>/2019/01/17/hexo-%E9%98%BF%E9%87%8C%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>将博客部署在GitHub上，不失为一种省时，省力，省钱的优选方案，但我打心底还是想部署到阿里云上面，主要出于两方面考虑，一是隐私（当然github也可操作）；二是稳定性，毕竟阿里云服可选国内的。</p><a id="more"></a><p>但事实确实验证上面所说的。博客前面整理了阿里云ECS购买，域名备案等流程（整理来自个人笔记），特别是域名备案，算不上复杂，但走流程是需要提供材料，然后你懂的，就是耐心等待！这也是第一次个人实操域名备案（之前只是买买ECS做开发测试用）。</p><p>且先不管域名备案是否通过，我们先了解下如何将博客部署到阿里云上。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>遇到问题不可怕，可怕的是遇到问题后毫无思绪！</p><p>操作思路是这样，在云主机上搭建git仓库，使用nginx作为网页服务器，最终通过git将hexo博客部署到云主机上。</p><p>系统环境:Ubuntu Server 16.04.1 LTS 64位</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-设置SSH登陆"><a href="#1-设置SSH登陆" class="headerlink" title="1.设置SSH登陆"></a>1.设置SSH登陆</h2><p>关于如何生成密钥请参考《SSH-Win10使用SSH免密拉取GitLab代码》。然后再window命令提示符执行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@云主机ip</span><br></pre></td></tr></table></figure><p>将用户的公钥存储到远程主机上，过程会让你输入远程主机的密码（在购买ECS过程中有设置过的）。</p><ul><li><p>原理：用户将公钥储存在远程主机上。登录时，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回给远程主机。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，允许登录，不再要求密码。</p></li><li><p>注意：在window上执行命令时可能抛出” ‘ssh’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。“问题，那么请在环境变量中添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GIT_HOME:C:\Program Files\Git</span><br><span class="line">然后编辑path新增</span><br><span class="line">%GIT_HOME%\bin</span><br><span class="line">然后在命令提示符输入：</span><br><span class="line">sh</span><br><span class="line">再执行</span><br><span class="line">ssh-copy-id root@云主机ip</span><br><span class="line">将公钥拷贝到远程云主机</span><br></pre></td></tr></table></figure></li><li><p>口令登陆：不用讲公钥拷贝到云主机，直接使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@云主机ip</span><br></pre></td></tr></table></figure><p>然后按照提示输入主机root账户的登陆密码即可。</p></li></ul><h2 id="2-安装Git和nginx"><a href="#2-安装Git和nginx" class="headerlink" title="2.安装Git和nginx"></a>2.安装Git和nginx</h2><p>我这里使用的是Xshell访问云服务器，输入如下密令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install git-core nginx</span><br></pre></td></tr></table></figure><h2 id="3-配置nginx"><a href="#3-配置nginx" class="headerlink" title="3.配置nginx"></a>3.配置nginx</h2><p>执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/blog</span><br></pre></td></tr></table></figure><p>进入nginx配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/blog.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    root /var/www/blog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>域名备案下来后如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.myhaloj.com myhaloj.com;</span><br><span class="line">    index index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">    root  /var/www/blog;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="4-Git-Hooks"><a href="#4-Git-Hooks" class="headerlink" title="4.Git Hooks"></a>4.Git Hooks</h2><p>我们要将hexo在本地生成的静态博客同步到远程git仓库。那么先要在远程主机上设置Git仓库，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/blog.git &amp;&amp; cd ~/blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><p>配置Hooks脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/www/blog</span><br><span class="line">git clone /root/blog.git /var/www/blog</span><br></pre></td></tr></table></figure><p>解释：先将原有的blog删除，然后从仓库克隆一份到blog文件下。</p><p>注意：如果上面vim进入post-receive文件中，退出时有问题，则按照路径一步步进入到hooks文件夹下，再执行vim post-receive进入，编辑脚本，再保存退出即可。</p><h2 id="5-修改Hexo配置文件"><a href="#5-修改Hexo配置文件" class="headerlink" title="5.修改Hexo配置文件"></a>5.修改Hexo配置文件</h2><p>修改_config.yml如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: root@云主机ip:blog.git</span><br></pre></td></tr></table></figure><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6.部署"></a>6.部署</h2><p>依次输入如下密令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>让后打开浏览器输入：http://云主机ip:8080即可访问。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>将hexo部署到阿里云上相比部署到github上，还是复杂些。除了涉及服务器ECS购买，域名购买绑定，域名备案外，另外技术上还涉及SSH，ngnix，git等的使用。但考虑到阿里云具备的开篇所提到的两点好处，一切都值了！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> aliyun </tag>
            
            <tag> ssh </tag>
            
            <tag> nginx </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云-域名备案</title>
      <link href="/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88/"/>
      <url>/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>来来来，大家一起看阿里云官方文档！</p><a id="more"></a><p>详细流程请参考阿里云官方文档：</p><p><a href="https://help.aliyun.com/knowledge_detail/36922.html?spm=a2c4g.11186623.6.558.262422f0zyedbj" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/36922.html?spm=a2c4g.11186623.6.558.262422f0zyedbj</a></p><p>注意：</p><p>1.购买的服务器ECS效期须大于3个月；</p><p>2.初审很快，大概半个小时左右就接到95187电话，简单核实了下身份信息；</p><p>3.在提交材料时，手机上显示的是什么“承诺书”，实质上就是“网站备案系信息真实性核验单”；</p><p>4.网站备案系信息真实性核验单，选择电脑上传资料时，变会看见下载链接，以及填写样例图；</p><p>5.另外教程中有如何获取阿里云幕布的操作（简直贴心）。</p>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> 域名备案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云-域名购买</title>
      <link href="/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0/"/>
      <url>/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里使用阿里云iOS手机端购买域名为例。</p><a id="more"></a><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>直接上图不解释！</p><p>step1 :</p><img src="/2019/01/16/阿里云-域名购买/yuming1.png"><p>step2:</p><img src="/2019/01/16/阿里云-域名购买/yuming2.png"><p>step3:</p><img src="/2019/01/16/阿里云-域名购买/yuming3.png"><p>step4:</p><img src="/2019/01/16/阿里云-域名购买/yuming4.png"><p>step5:</p><img src="/2019/01/16/阿里云-域名购买/yuming5.png"><p>step6:</p><img src="/2019/01/16/阿里云-域名购买/yuming6.png">]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> 域名购买 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云-ECS购买</title>
      <link href="/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-ECS%E8%B4%AD%E4%B9%B0/"/>
      <url>/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-ECS%E8%B4%AD%E4%B9%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>阿里云创立于2009年，是<a href="https://baike.baidu.com/item/%E5%85%A8%E7%90%83/2741427" target="_blank" rel="noopener">全球</a>领先的<a href="https://baike.baidu.com/item/%E4%BA%91%E8%AE%A1%E7%AE%97/9969353" target="_blank" rel="noopener">云计算</a>及人工智能科技<a href="https://baike.baidu.com/item/%E5%85%AC%E5%8F%B8" target="_blank" rel="noopener">公司</a>，致力于以在线公共<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1/85523" target="_blank" rel="noopener">服务</a>的<a href="https://baike.baidu.com/item/%E6%96%B9%E5%BC%8F/3616191" target="_blank" rel="noopener">方式</a>，提供<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8/5573311" target="_blank" rel="noopener">安全</a>、可靠的计算和数据处理能力，让计算和人工智能成为普惠<a href="https://baike.baidu.com/item/%E7%A7%91%E6%8A%80/662906" target="_blank" rel="noopener">科技</a>。</p><a id="more"></a><p>阿里云服务着制造、金融、<a href="https://baike.baidu.com/item/%E6%94%BF%E5%8A%A1/533839" target="_blank" rel="noopener">政务</a>、交通、<a href="https://baike.baidu.com/item/%E5%8C%BB%E7%96%97/3232414" target="_blank" rel="noopener">医疗</a>、<a href="https://baike.baidu.com/item/%E7%94%B5%E4%BF%A1/15421798" target="_blank" rel="noopener">电信</a>、能源等众多领域的领军企业，包括<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9A/194673" target="_blank" rel="noopener">中国联通</a>、<a href="https://baike.baidu.com/item/12306" target="_blank" rel="noopener">12306</a>、<a href="https://baike.baidu.com/item/%E4%B8%AD%E7%9F%B3%E5%8C%96/5290131" target="_blank" rel="noopener">中石化</a>、<a href="https://baike.baidu.com/item/%E4%B8%AD%E7%9F%B3%E6%B2%B9/9684575" target="_blank" rel="noopener">中石油</a>、<a href="https://baike.baidu.com/item/%E9%A3%9E%E5%88%A9%E6%B5%A6/14316" target="_blank" rel="noopener">飞利浦</a>、华大基因等大型企业客户，以及微博、<a href="https://baike.baidu.com/item/%E7%9F%A5%E4%B9%8E/4691322" target="_blank" rel="noopener">知乎</a>、锤子科技等明星互联网公司。在天猫<a href="https://baike.baidu.com/item/%E5%8F%8C11" target="_blank" rel="noopener">双11</a>全球狂欢节、12306春运购票等极富挑战的应用场景中，阿里云保持着良好的运行纪录 [1]  。</p><p>阿里云在全球各地部署高效节能的绿色数据中心，利用清洁计算为万物互联的新世界提供源源不断的能源动力，目前开服的区域包括中国（华北、华东、华南、香港）、新加坡、美国（美东、美西）、欧洲、中东、澳大利亚、日本。</p><p>2014年，阿里云曾帮助用户抵御全球互联网史上最大的DDoS攻击，峰值流量达到每秒453.8Gb [2]  。在Sort Benchmark 2016 排序竞赛 CloudSort项目中，阿里云以1.44$/TB的排序花费打破了AWS保持的4.51$/TB纪录 [3]  。在Sort Benchmark 2015，阿里云利用自研的分布式计算平台ODPS，377秒完成100TB数据排序，刷新了Apache Spark 1406秒的世界纪录 [3]  。</p><p>2018年9月22日，2018杭州·云栖大会上阿里云宣布成立全球交付中心。</p><p>(来源：百度百科)</p><h1 id="购买流程"><a href="#购买流程" class="headerlink" title="购买流程"></a>购买流程</h1><p>1.登陆阿里云官网：<a href="https://www.aliyun.com（注册用户并实名认证），另外建议下载阿里云App！" target="_blank" rel="noopener">https://www.aliyun.com（注册用户并实名认证），另外建议下载阿里云App！</a></p><p>2.点击”产品”，再点击”云服务器ECS”如下：</p><img src="/2019/01/16/阿里云-ECS购买/buy1.jpg"><p>3.点击“立即购买”，如图：</p><img src="/2019/01/16/阿里云-ECS购买/buy2.jpg"><p>4.可根据自己实际情况勾选，进入自定义购买界面，示例设置如下图：</p><img src="/2019/01/16/阿里云-ECS购买/buy3.jpg"><img src="/2019/01/16/阿里云-ECS购买/buy4.jpg"><p>5.网路和安全组，基本保持默认即可：</p><img src="/2019/01/16/阿里云-ECS购买/buy5.jpg"><p>6.系统配置界面，按照要求设置相关信息即可：</p><img src="/2019/01/16/阿里云-ECS购买/buy6.jpg"><p>7.下面的分组设置保持默认即可。</p><p>其实在第六步即可选择“确认订单”，进入付款流程，完成支付。</p><p>到此阿里云服务器ECS购买完毕！（操作仅供参考，大家以自己实际情况购买！）</p>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 ECS </tag>
            
            <tag> aliyun ECS </tag>
            
            <tag> 购买 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云-ECS与域名绑定</title>
      <link href="/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-ECS%E4%B8%8E%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"/>
      <url>/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-ECS%E4%B8%8E%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>域名ip绑定。</p><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>step1：进入阿里云“管理控制台”，再点击“域名服务”，如下操作：</p><img src="/2019/01/16/阿里云-ECS与域名绑定/jiexi1.jpg"><p>step2:刚开始记录应为空，点击“添加记录”，如图：</p><img src="/2019/01/16/阿里云-ECS与域名绑定/jiexi2.jpg"><p>step3:按要求填写相关信息，如图：</p><img src="/2019/01/16/阿里云-ECS与域名绑定/jiexi3.jpg"><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>1.记录类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要将域名指向主机服务商提供的IP地址，请选择「A记录」；要将域名指向主机服务商提供的另一个域名，请选择「CNAME记录」。</span><br></pre></td></tr></table></figure><p>2.主机记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www ：将域名解析为www.example.com，填写www；</span><br><span class="line">@：将域名解析为example.com（不带www），填写@或者不填写；</span><br><span class="line">mail ：将域名解析为mail.example.com，通常用于解析邮箱服务器；</span><br><span class="line">泛解析，所有子域名均被解析到统一地址（除单独设置的子域名解析）；</span><br><span class="line">二级域名 ：如：mail.example.com或abc.example.com，填写mail或abc；</span><br><span class="line">手机网站 ：如：m.example.com，填写m。</span><br></pre></td></tr></table></figure><p>3.记录值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A记录值请填写您的服务器IP地址。</span><br></pre></td></tr></table></figure><p>4.TTL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10分钟。</span><br></pre></td></tr></table></figure><p>（以上操作仅供参考！）</p>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> 域名绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-安装</title>
      <link href="/2019/01/15/Docker-%E5%AE%89%E8%A3%85/"/>
      <url>/2019/01/15/Docker-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>通过前面《Docker-初识》《Docker-再识》两篇介绍，目的是从理论上了解Docker，这将有助于理解后面实践操作。如果真是初次接触可能还是要花些时间消化理解。接下来我们先安装Docker。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><p>警告：切勿在没有配置 Docker APT 源的情况下直接使用 apt 命令安装 Docker.</p></blockquote><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Docker CE 支持以下版本的 <a href="https://www.ubuntu.com/server" target="_blank" rel="noopener">Ubuntu</a> 操作系统：</p><ul><li>Artful 17.10 (Docker CE 17.11 Edge +)</li><li>Xenial 16.04 (LTS)</li><li>Trusty 14.04 (LTS)</li></ul><p>Docker CE 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本,当前最新的 LTS 版本为 Ubuntu 16.04。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-14-04-可选内核模块"><a href="#Ubuntu-14-04-可选内核模块" class="headerlink" title="Ubuntu 14.04 可选内核模块"></a>Ubuntu 14.04 可选内核模块</h3><p>从 Ubuntu 14.04 开始，一部分内核模块移到了可选内核模块包 (<code>linux-image-extra-*</code>) ，以减少内核软件包的体积。正常安装的系统应该会包含可选内核模块包，而一些裁剪后的系统可能会将其精简掉。<code>AUFS</code> 内核驱动属于可选内核模块的一部分，作为推荐的 Docker 存储层驱动，一般建议安装可选内核模块包以使用 <code>AUFS</code>。</p><p>如果系统没有安装可选内核模块的话，可以执行下面的命令来安装可选内核模块包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    linux-image-extra-$(uname -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04 +"></a>Ubuntu 16.04 +</h3><p>Ubuntu 16.04 + 上的 Docker CE 默认使用 <code>overlay2</code> 存储层驱动,无需手动配置。</p><h2 id="使用-APT-安装"><a href="#使用-APT-安装" class="headerlink" title="使用 APT 安装"></a>使用 APT 安装</h2><h3 id="安装必要的一些系统工具"><a href="#安装必要的一些系统工具" class="headerlink" title="安装必要的一些系统工具"></a>安装必要的一些系统工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h3 id="安装-GPG-证书"><a href="#安装-GPG-证书" class="headerlink" title="安装 GPG 证书"></a>安装 GPG 证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="写入软件源信息"><a href="#写入软件源信息" class="headerlink" title="写入软件源信息"></a>写入软件源信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><h3 id="更新并安装-Docker-CE"><a href="#更新并安装-Docker-CE" class="headerlink" title="更新并安装 Docker CE"></a>更新并安装 Docker CE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><blockquote><p>以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。</p></blockquote><h2 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h2><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># 可能会出现 404 错误，请移步下面的特别说明</span></span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。</p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>2018 年 7 月 21 日，貌似阿里云这边在做调整，故导致 Docker 的 Aliyun 安装脚本不可用，是永久性还是临时性的尚不清除，如果你已经按照之前的操作安装 Docker，请按以下步骤进行修复并重新安装</p><ul><li>如果已经使用了 Aliyun 脚本安装并成功的<ul><li>请先卸载 Docker，命令为：<code>apt-get autoremove docker-ce</code></li><li>删除 <code>/etc/apt/sources.list.d</code> 目录下的 <code>docker.list</code> 文件</li></ul></li><li>使用 <code>AzureChinaCloud</code> 镜像脚本重新安装，命令为：<code>sudo sh get-docker.sh --mirror AzureChinaCloud</code></li></ul><h2 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>Ubuntu 14.04 请使用以下命令启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure><h2 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h2><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket" target="_blank" rel="noopener">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><h2 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p><h1 id="加速镜像"><a href="#加速镜像" class="headerlink" title="加速镜像"></a>加速镜像</h1><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p><ul><li><a href="https://docs.docker.com/registry/recipes/mirror/#use-case-the-china-registry-mirror" target="_blank" rel="noopener">Docker 官方提供的中国 registry mirror</a></li><li><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a></li><li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a></li></ul><p>我们以 Docker 官方加速器为例进行介绍。</p><h2 id="Ubuntu-14-04、Debian-7-Wheezy"><a href="#Ubuntu-14-04、Debian-7-Wheezy" class="headerlink" title="Ubuntu 14.04、Debian 7 Wheezy"></a>Ubuntu 14.04、Debian 7 Wheezy</h2><p>对于使用 <a href="http://upstart.ubuntu.com/" target="_blank" rel="noopener">upstart</a> 的系统而言，编辑 <code>/etc/default/docker</code> 文件，在其中的 <code>DOCKER_OPTS</code> 中配置加速器地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">"--registry-mirror=https://registry.docker-cn.com"</span></span><br></pre></td></tr></table></figure><p>重新启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-16-04-、Debian-8-、CentOS-7"><a href="#Ubuntu-16-04-、Debian-8-、CentOS-7" class="headerlink" title="Ubuntu 16.04+、Debian 8+、CentOS 7"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h2><p>对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>之后重新启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果您之前查看旧教程，修改了 <code>docker.service</code> 文件内容，请去掉您添加的内容（<code>--registry-mirror=https://registry.docker-cn.com</code>），这里不再赘述。</p></blockquote><h2 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h2><p>配置加速器之后，如果拉取镜像仍然十分缓慢，请手动检查加速器配置是否生效，在命令行执行 <code>docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-再识</title>
      <link href="/2019/01/15/Docker-%E5%86%8D%E8%AF%86/"/>
      <url>/2019/01/15/Docker-%E5%86%8D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Docker容器技术已在云计算市场中风靡一时了，而众多主流供应商则面临着技术落后的窘境。那么，是什么让Docker容器技术变得如此受欢迎呢？对于刚入门的新手来说，容器技术可实现不同云计算之间应用程序的可移植性，以及提供了一个把应用程序拆分为分布式组件的方法。此外，用户还可以管理和扩展这些容器成为集群。</p><a id="more"></a><h1 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h1><p>Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。</p><ul><li>一种服务器，它是一种称为守护进程并且长时间运行的程序。</li><li>REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。</li><li>一个有命令行界面 (CLI) 工具的客户端。</li></ul><p>Docker 引擎组件的流程如下图所示：</p><img src="/2019/01/15/Docker-再识/image1.png"><h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p><img src="/2019/01/15/Docker-再识/image2.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">镜像(Images)：Docker 镜像是用于创建 Docker 容器的模板。</span><br><span class="line"></span><br><span class="line">容器(Container)：容器是独立运行的一个或一组应用。</span><br><span class="line"></span><br><span class="line">客户端(Client)： Docker 客户端通过命令行或者其他工具使用 Docker API (&lt;https://docs.docker.com/reference/api/docker_remote_api&gt;) 与 Docker 的守护进程通信。</span><br><span class="line"></span><br><span class="line">主机(Host)：一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</span><br><span class="line"></span><br><span class="line">仓库(Registry)：Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub([https://hub.docker.com](https://hub.docker.com/)) 提供了庞大的镜像集合供使用。</span><br><span class="line"></span><br><span class="line">Docker Machine：Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</span><br></pre></td></tr></table></figure><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:16.04</code> 就包含了完整的一套 Ubuntu 16.04 最小系统的 <code>root</code> 文件系统。</p><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h1 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h1><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为<strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <code>数据卷（Volume）</code>、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h1 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h1><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<code>Docker Registry</code> 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个<strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个<strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p>以 <a href="https://store.docker.com/images/ubuntu" target="_blank" rel="noopener">Ubuntu 镜像</a> 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>14.04</code>, <code>16.04</code>。我们可以通过 <code>ubuntu:14.04</code>，或者 <code>ubuntu:16.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><h2 id="公有-Docker-Registry"><a href="#公有-Docker-Registry" class="headerlink" title="公有 Docker Registry"></a>公有 Docker Registry</h2><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><p>最常使用的 Registry 公开服务是官方的 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 <a href="https://coreos.com/" target="_blank" rel="noopener">CoreOS</a> 的 <a href="https://quay.io/repository/" target="_blank" rel="noopener">Quay.io</a>，CoreOS 相关的镜像存储在这里；Google 的 <a href="https://cloud.google.com/container-registry/" target="_blank" rel="noopener">Google Container Registry</a>，<a href="http://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a> 的镜像使用的就是这个服务。</p><p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（<code>Registry Mirror</code>），这些镜像服务被称为<strong>加速器</strong>。常见的有 <a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a> 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。</p><p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云镜像仓库</a>、<a href="https://c.163.com/hub#/m/library/" target="_blank" rel="noopener">网易云镜像服务</a>、<a href="https://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud 镜像市场</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">阿里云镜像库</a> 等。</p><h2 id="私有-Docker-Registry"><a href="#私有-Docker-Registry" class="headerlink" title="私有 Docker Registry"></a>私有 Docker Registry</h2><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://store.docker.com/images/registry/" target="_blank" rel="noopener">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务。</p><p>开源的 Docker Registry 镜像只提供了 <a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry API</a> 的服务端实现，足以支持 <code>docker</code> 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 <a href="https://docs.docker.com/datacenter/dtr/2.0/" target="_blank" rel="noopener">Docker Trusted Registry</a> 中，提供了这些高级功能。</p><p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，<a href="https://github.com/vmware/harbor" target="_blank" rel="noopener">VMWare Harbor</a> 和 <a href="https://www.sonatype.com/docker" target="_blank" rel="noopener">Sonatype Nexus</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-安装MySql</title>
      <link href="/2019/01/15/Linux-%E5%AE%89%E8%A3%85MySql/"/>
      <url>/2019/01/15/Linux-%E5%AE%89%E8%A3%85MySql/</url>
      
        <content type="html"><![CDATA[<p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="更新数据源"><a href="#更新数据源" class="headerlink" title="更新数据源"></a>更新数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>系统将提示您在安装过程中创建 root 密码。选择一个安全的密码，并确保你记住它，因为你以后需要它。接下来，我们将完成 MySQL 的配置。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>因为是全新安装，您需要运行附带的安全脚本。这会更改一些不太安全的默认选项，例如远程 root 登录和示例用户。在旧版本的 MySQL 上，您需要手动初始化数据目录，但 Mysql 5.7 已经自动完成了。</p><p>运行安全脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>这将提示您输入您在之前步骤中创建的 root 密码。您可以按 Y，然后 ENTER 接受所有后续问题的默认值，但是要询问您是否要更改 root 密码。您只需在之前步骤中进行设置即可，因此无需现在更改。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>按上边方式安装完成后，MySQL 应该已经开始自动运行了。要测试它，请检查其状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@ubuntu:~$ systemctl status mysql.service</span><br><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Tue 2017-11-21 13:04:34 CST; 3min 24s ago</span><br><span class="line"> Main PID: 2169 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysql.service</span><br><span class="line">           └─2169 /usr/sbin/mysqld</span><br><span class="line"></span><br><span class="line">Nov 21 13:04:33 ubuntu systemd[1]: Starting MySQL Community Server...</span><br><span class="line">Nov 21 13:04:34 ubuntu systemd[1]: Started MySQL Community Server.</span><br></pre></td></tr></table></figure><p>查看 MySQL 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -p -u root version</span><br></pre></td></tr></table></figure><h2 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h2><ul><li>修改配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><ul><li>注释掉(语句前面加上 # 即可)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure><ul><li>重启 MySQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><ul><li>登录 MySQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><ul><li>授权 root 用户允许所有人连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;你的 mysql root 账户密码&apos;;</span><br></pre></td></tr></table></figure><h3 id="因弱口令无法成功授权解决步骤"><a href="#因弱口令无法成功授权解决步骤" class="headerlink" title="因弱口令无法成功授权解决步骤"></a>因弱口令无法成功授权解决步骤</h3><ul><li>查看和设置密码安全级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@validate_password_policy;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br></pre></td></tr></table></figure><ul><li>查看和设置密码长度限制</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@validate_password_length;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_length=1;</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><p>修改配置 <code>mysqld.cnf</code> 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><h3 id="配置默认字符集"><a href="#配置默认字符集" class="headerlink" title="配置默认字符集"></a>配置默认字符集</h3><p>在 <code>[mysqld]</code> 节点上增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>在 <code>[mysqld]</code> 节点底部增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><h3 id="配置忽略数据库大小写敏感"><a href="#配置忽略数据库大小写敏感" class="headerlink" title="配置忽略数据库大小写敏感"></a>配置忽略数据库大小写敏感</h3><p>在 <code>[mysqld]</code> 节点底部增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower-case-table-names = 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-安装Tomcat</title>
      <link href="/2019/01/15/Linux-%E5%AE%89%E8%A3%85Tomcat/"/>
      <url>/2019/01/15/Linux-%E5%AE%89%E8%A3%85Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>此处以 Tomcat 8.5.23 为例</p><a id="more"></a><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a></p><h2 id="解压缩并移动到指定目录"><a href="#解压缩并移动到指定目录" class="headerlink" title="解压缩并移动到指定目录"></a>解压缩并移动到指定目录</h2><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.23.tar.gz</span><br></pre></td></tr></table></figure><h3 id="变更目录名"><a href="#变更目录名" class="headerlink" title="变更目录名"></a>变更目录名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-tomcat-8.5.23 tomcat</span><br></pre></td></tr></table></figure><h3 id="移动目录"><a href="#移动目录" class="headerlink" title="移动目录"></a>移动目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv tomcat/ /usr/local/</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/bin/shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="目录内执行脚本"><a href="#目录内执行脚本" class="headerlink" title="目录内执行脚本"></a>目录内执行脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-安装Java</title>
      <link href="/2019/01/15/Linux-%E5%AE%89%E8%A3%85Java/"/>
      <url>/2019/01/15/Linux-%E5%AE%89%E8%A3%85Java/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>此处以 JDK 1.8.0_152 为例</p><a id="more"></a><h2 id="官方下载"><a href="#官方下载" class="headerlink" title="官方下载"></a>官方下载</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h2 id="解压缩并移动到指定目录"><a href="#解压缩并移动到指定目录" class="headerlink" title="解压缩并移动到指定目录"></a>解压缩并移动到指定目录</h2><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u152-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/java</span><br></pre></td></tr></table></figure><h3 id="移动安装包"><a href="#移动安装包" class="headerlink" title="移动安装包"></a>移动安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv jdk1.8.0_152/ /usr/local/java/</span><br></pre></td></tr></table></figure><h3 id="设置所有者"><a href="#设置所有者" class="headerlink" title="设置所有者"></a>设置所有者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root /usr/local/java/</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h3 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/environment</span><br></pre></td></tr></table></figure><h3 id="添加如下语句"><a href="#添加如下语句" class="headerlink" title="添加如下语句"></a>添加如下语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_152</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_152/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br></pre></td></tr></table></figure><h3 id="配置用户环境变量"><a href="#配置用户环境变量" class="headerlink" title="配置用户环境变量"></a>配置用户环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/profile</span><br></pre></td></tr></table></figure><h3 id="添加如下语句-1"><a href="#添加如下语句-1" class="headerlink" title="添加如下语句"></a>添加如下语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$PS1&quot; ]; then</span><br><span class="line">  if [ &quot;$BASH&quot; ] &amp;&amp; [ &quot;$BASH&quot; != &quot;/bin/sh&quot; ]; then</span><br><span class="line">    # The file bash.bashrc already sets the default PS1.</span><br><span class="line">    # PS1=&apos;\h:\w\$ &apos;</span><br><span class="line">    if [ -f /etc/bash.bashrc ]; then</span><br><span class="line">      . /etc/bash.bashrc</span><br><span class="line">    fi</span><br><span class="line">  else</span><br><span class="line">    if [ &quot;`id -u`&quot; -eq 0 ]; then</span><br><span class="line">      PS1=&apos;# &apos;</span><br><span class="line">    else</span><br><span class="line">      PS1=&apos;$ &apos;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_152</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_152/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH:$HOME/bin</span><br><span class="line"></span><br><span class="line">if [ -d /etc/profile.d ]; then</span><br><span class="line">  for i in /etc/profile.d/*.sh; do</span><br><span class="line">    if [ -r $i ]; then</span><br><span class="line">      . $i</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">  unset i</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="环境变量生效"><a href="#环境变量生效" class="headerlink" title="环境变量生效"></a>环境变量生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="其他用户更新环境变量"><a href="#其他用户更新环境变量" class="headerlink" title="其他用户更新环境变量"></a>其他用户更新环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su **</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-标签</title>
      <link href="/2019/01/15/Git-%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/01/15/Git-%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h1><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><a id="more"></a><p>比如说，我们想为我们的 runoob 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0</span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --decorate --graph</span><br><span class="line">*   88afe0e (HEAD, tag: v1.0, master) Merge branch &apos;change_site&apos;</span><br><span class="line">|\  </span><br><span class="line">| * d7e7346 (change_site) changed the site</span><br><span class="line">* | 14b4dca 新增加一行</span><br><span class="line">|/  </span><br><span class="line">* 556f0a0 removed test2.txt</span><br><span class="line">* 2e082b7 add test2.txt</span><br><span class="line">* 048598f add test.txt</span><br><span class="line">* 85fc7e7 test comment from runoob.com</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.9 85fc7e7</span><br><span class="line">$ git log --oneline --decorate --graph</span><br><span class="line">*   88afe0e (HEAD, tag: v1.0, master) Merge branch &apos;change_site&apos;</span><br><span class="line">|\  </span><br><span class="line">| * d7e7346 (change_site) changed the site</span><br><span class="line">* | 14b4dca 新增加一行</span><br><span class="line">|/  </span><br><span class="line">* 556f0a0 removed test2.txt</span><br><span class="line">* 2e082b7 add test2.txt</span><br><span class="line">* 048598f add test.txt</span><br><span class="line">* 85fc7e7 (tag: v0.9) test comment from runoob.com</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure><p>转： 菜鸟教程</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-提交历史</title>
      <link href="/2019/01/15/Git-%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2/"/>
      <url>/2019/01/15/Git-%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-查看提交历史"><a href="#Git-查看提交历史" class="headerlink" title="Git 查看提交历史"></a>Git 查看提交历史</h1><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。</p><a id="more"></a><p>针对我们前一章节的操作，使用 git log 命令列出历史提交记录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 88afe0e02adcdfea6844bb627de97da21eb10af1</span><br><span class="line">Merge: 14b4dca d7e7346</span><br><span class="line">Author: runoob &lt;runoob@runoob.com&gt;</span><br><span class="line">Date:   Sun Mar 1 15:03:42 2015 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch &apos;change_site&apos;</span><br><span class="line">    </span><br><span class="line">    Conflicts:</span><br><span class="line">        test.txt</span><br><span class="line"></span><br><span class="line">commit 14b4dcadbdc847207651d5a9fae0d315057f346e</span><br><span class="line">Author: runoob &lt;runoob@runoob.com&gt;</span><br><span class="line">Date:   Sun Mar 1 14:53:15 2015 +0800</span><br><span class="line"></span><br><span class="line">    新增加一行</span><br><span class="line"></span><br><span class="line">commit d7e734640da06055e107eaf29cf350b3f1de1c2c</span><br><span class="line">Author: runoob &lt;runoob@runoob.com&gt;</span><br><span class="line">Date:   Sun Mar 1 14:48:57 2015 +0800</span><br><span class="line"></span><br><span class="line">    changed the site</span><br><span class="line"></span><br><span class="line">commit 556f0a0637978097b82287ac665a717623b21f3f</span><br><span class="line">Author: runoob &lt;runoob@runoob.com&gt;</span><br><span class="line">Date:   Sun Mar 1 14:40:34 2015 +0800</span><br><span class="line"></span><br><span class="line">    removed test2.txt</span><br></pre></td></tr></table></figure><p>我们可以用 –oneline 选项来查看历史记录的简洁的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">88afe0e Merge branch &apos;change_site&apos;</span><br><span class="line">14b4dca 新增加一行</span><br><span class="line">d7e7346 changed the site</span><br><span class="line">556f0a0 removed test2.txt</span><br><span class="line">2e082b7 add test2.txt</span><br><span class="line">048598f add test.txt</span><br><span class="line">85fc7e7 test comment from runoob.com</span><br></pre></td></tr></table></figure><p>这告诉我们的是，此项目的开发历史。</p><p>我们还可以用 –graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --graph</span><br><span class="line">*   88afe0e Merge branch &apos;change_site&apos;</span><br><span class="line">|\  </span><br><span class="line">| * d7e7346 changed the site</span><br><span class="line">* | 14b4dca 新增加一行</span><br><span class="line">|/  </span><br><span class="line">* 556f0a0 removed test2.txt</span><br><span class="line">* 2e082b7 add test2.txt</span><br><span class="line">* 048598f add test.txt</span><br><span class="line">* 85fc7e7 test comment from runoob.com</span><br></pre></td></tr></table></figure><p>现在我们可以更清楚明了地看到何时工作分叉、又何时归并。</p><p>你也可以用 ‘–reverse’参数来逆向显示所有日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git log --reverse --oneline</span><br><span class="line">85fc7e7 test comment from runoob.com</span><br><span class="line">048598f add test.txt</span><br><span class="line">2e082b7 add test2.txt</span><br><span class="line">556f0a0 removed test2.txt</span><br><span class="line">d7e7346 changed the site</span><br><span class="line">14b4dca 新增加一行</span><br><span class="line">88afe0e Merge branch &apos;change_site&apos;</span><br></pre></td></tr></table></figure><p>如果只想查找指定用户的提交日志可以使用命令：git log –author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --author=Linus --oneline -5</span><br><span class="line">81b50f3 Move &apos;builtin-*&apos; into a &apos;builtin/&apos; subdirectory</span><br><span class="line">3bb7256 make &quot;index-pack&quot; a built-in</span><br><span class="line">377d027 make &quot;git pack-redundant&quot; a built-in</span><br><span class="line">b532581 make &quot;git unpack-file&quot; a built-in</span><br><span class="line">112dd51 make &quot;mktag&quot; a built-in</span><br></pre></td></tr></table></figure><p>如果你要指定日期，可以执行几个选项：–since 和 –before，但是你也可以用 –until 和 –after。</p><p>例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges</span><br><span class="line">5469e2d Git 1.7.1-rc2</span><br><span class="line">d43427d Documentation/remote-helpers: Fix typos and improve language</span><br><span class="line">272a36b Fixup: Second argument may be any arbitrary string</span><br><span class="line">b6c8d2d Documentation/remote-helpers: Add invocation section</span><br><span class="line">5ce4f4e Documentation/urls: Rewrite to accomodate transport::address</span><br><span class="line">00b84e9 Documentation/remote-helpers: Rewrite description</span><br><span class="line">03aa87e Documentation: Describe other situations where -z affects git diff</span><br><span class="line">77bc694 rebase-interactive: silence warning when no commits rewritten</span><br><span class="line">636db2c t3301: add tests to use --format=&quot;%N&quot;</span><br></pre></td></tr></table></figure><p>更多 git log 命令可查看：<a href="http://git-scm.com/docs/git-log" target="_blank" rel="noopener">http://git-scm.com/docs/git-log</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 提交历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-分支管理</title>
      <link href="/2019/01/15/Git-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>/2019/01/15/Git-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h1><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><a id="more"></a><p>有人把 Git 的分支模型称为”必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。</p><p>创建分支命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><hr><h2 id="Git-分支管理-1"><a href="#Git-分支管理-1" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><h3 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h3><p>列出分支基本命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，git branch 会列出你在本地的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做”master”的分支，并且该分支是当前分支。</p><p>当你执行 git init 的时候，缺省情况下 Git 就会为你创建”master”分支。</p><p>如果我们要手动创建一个分支。执行 git branch (branchname) 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 testing。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了”testing”分支，Git 将还原你的工作目录到你创建分支时候的样子</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">README</span><br><span class="line">$ echo &apos;runoob.com&apos; &gt; test.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &apos;add test.txt&apos;</span><br><span class="line">[master 048598f] add test.txt</span><br><span class="line"> 2 files changed, 1 insertion(+), 3 deletions(-)</span><br><span class="line"> delete mode 100644 hello.php</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line">$ git checkout testing</span><br><span class="line">Switched to branch &apos;testing&apos;</span><br><span class="line">$ ls</span><br><span class="line">README        hello.php</span><br></pre></td></tr></table></figure><p>当我们切换到”testing”分支的时候，我们添加的新文件test.txt被移除了, 原来被删除的文件hello.php文件又出现了。切换回”master”分支的时候，它们有重新出现了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b newtest</span><br><span class="line">Switched to a new branch &apos;newtest&apos;</span><br><span class="line">$ git rm test2.txt </span><br><span class="line">rm &apos;test2.txt&apos;</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line">$ git commit -am &apos;removed test2.txt&apos;</span><br><span class="line">[newtest 556f0a0] removed test2.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test2.txt</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt    test2.txt</span><br></pre></td></tr></table></figure><p>如你所见，我们创建了一个分支，在该分支的上下文中移除了一些文件，然后切换回我们的主分支，那些文件又回来了。</p><p>使用分支将工作切分开来，从而让我们能够在不同上下文中做事，并来回切换。</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除分支命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure><p>例如我们要删除”testing”分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br><span class="line">$ git branch -d testing</span><br><span class="line">Deleted branch testing (was 85fc7e7).</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  newtest</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt    test2.txt</span><br><span class="line">$ git merge newtest</span><br><span class="line">Updating 2e082b7..556f0a0</span><br><span class="line">Fast-forward</span><br><span class="line"> test2.txt | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test2.txt</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure><p>以上实例中我们将 newtest 分支合并到主分支去，test2.txt 文件被删除。</p><h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">$ cat test.txt</span><br><span class="line">runoob.com</span><br></pre></td></tr></table></figure><p>首先，我们创建一个叫做”change_site”的分支，切换过去，我们将内容改为 <a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b change_site</span><br><span class="line">Switched to a new branch &apos;change_site&apos;</span><br><span class="line">$ vim test.txt </span><br><span class="line">$ head -1 test.txt </span><br><span class="line">www.runoob.com</span><br><span class="line">$ git commit -am &apos;changed the site&apos;</span><br><span class="line">[change_site d7e7346] changed the site</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>将修改的内容提交到 “change_site” 分支中。 现在，假如切换回 “master” 分支我们可以看内容恢复到我们修改前的，我们再次修改test.txt文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">$ head -1 test.txt </span><br><span class="line">runoob.com</span><br><span class="line">$ vim test.txt </span><br><span class="line">$ cat test.txt</span><br><span class="line">runoob.com</span><br><span class="line">新增加一行</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/test.txt b/test.txt</span><br><span class="line">index 704cce7..f84c2a4 100644</span><br><span class="line">--- a/test.txt</span><br><span class="line">+++ b/test.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> runoob.com</span><br><span class="line">+新增加一行</span><br><span class="line">$ git commit -am &apos;新增加一行&apos;</span><br><span class="line">[master 14b4dca] 新增加一行</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> $ git merge change_site</span><br><span class="line">Auto-merging test.txt</span><br><span class="line">CONFLICT (content): Merge conflict in test.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line">$ cat test.txt </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">runoob.com</span><br><span class="line">新增加一行</span><br><span class="line">=======</span><br><span class="line">www.runoob.com</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site</span><br></pre></td></tr></table></figure><p>我们将前一个分支合并到 “master” 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim test.txt </span><br><span class="line">$ cat test.txt </span><br><span class="line">www.runoob.com</span><br><span class="line">新增加一行</span><br><span class="line">$ git diff</span><br><span class="line">diff --cc test.txt</span><br><span class="line">index f84c2a4,bccb7c2..0000000</span><br><span class="line">--- a/test.txt</span><br><span class="line">+++ b/test.txt</span><br><span class="line">@@@ -1,2 -1,1 +1,2 @@@</span><br><span class="line">- runoob.com</span><br><span class="line">+ www.runoob.com</span><br><span class="line"> +新增加一行</span><br></pre></td></tr></table></figure><p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">UU test.txt</span><br><span class="line">$ git add test.txt </span><br><span class="line">$ git status -s</span><br><span class="line">M  test.txt</span><br><span class="line">$ git commit</span><br><span class="line">[master 88afe0e] Merge branch &apos;change_site&apos;</span><br></pre></td></tr></table></figure><p>现在我们成功解决了合并中的冲突，并提交了结果。</p><p>转：菜鸟教程</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 分支管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-简单操作</title>
      <link href="/2019/01/15/Git-%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/01/15/Git-%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/15/Git-简单操作/image.jpg"><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><a id="more"></a><h1 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h1><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p><p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p><p>Git 与 SVN 区别点：</p><ul><li>1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li><li>2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li><li>3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li><li>4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li><li>5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Linux（ubuntu）安装"><a href="#Linux（ubuntu）安装" class="headerlink" title="Linux（ubuntu）安装"></a>Linux（ubuntu）安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \</span><br><span class="line">  libz-dev libssl-dev</span><br><span class="line"></span><br><span class="line">$ apt-get install git</span><br><span class="line"></span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure><h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><p>下载地址：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a>，根据安装指引安装，注意安装过程中的一些选项即可。</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p>下图展示了 Git 的工作流程：</p><img src="/2019/01/15/Git-简单操作/image1.png"><h1 id="Git工作区，暂存区和版本库"><a href="#Git工作区，暂存区和版本库" class="headerlink" title="Git工作区，暂存区和版本库"></a>Git工作区，暂存区和版本库</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><img src="/2019/01/15/Git-简单操作/image2.jpg"><p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p><p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p><p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p><p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</file></p><p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</file></p><p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></p><h1 id="操作一把"><a href="#操作一把" class="headerlink" title="操作一把"></a>操作一把</h1><p>在本地创建一个仓库文件夹，让后通过密令将gitHub测试项目克隆下来，简单操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir testRepo</span><br><span class="line">cd testRepo/</span><br><span class="line">git init</span><br><span class="line">git clone url</span><br><span class="line">git status -s</span><br><span class="line">git commit</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>注意：将SSH Key公钥添加至GitHub。</p><p>当然我们也可通过Git GUI图形界面进行相关操作，过程简单，这里就不做演示。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>截至这里，简单的git操作基本也就完成。</p><p>参考：</p><p>菜鸟教程</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-常规</title>
      <link href="/2019/01/10/Linux-%E5%B8%B8%E8%A7%84/"/>
      <url>/2019/01/10/Linux-%E5%B8%B8%E8%A7%84/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/10/Linux-常规/image1.png"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先来个“Hello world !”，哈哈，开玩笑。这里不会有hello world，只是传达一个由浅入深，循序渐进的思想。</p><a id="more"></a><h1 id="操作文件目录"><a href="#操作文件目录" class="headerlink" title="操作文件目录"></a>操作文件目录</h1><p>1.显示文件和目录列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ls -l  列出文件详细信息</span><br><span class="line">ls -a  列出当前目录所有文件，包含隐藏文件</span><br></pre></td></tr></table></figure><p>2.创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir 文件名</span><br><span class="line">mkdir -p 文件名   父级目录不存在情况下先生成父级目录</span><br></pre></td></tr></table></figure><p>3.生成一个空文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch</span><br></pre></td></tr></table></figure><p>4.生成一个带内容的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 12345678 &gt; test.txt</span><br></pre></td></tr></table></figure><p>5.显示文本文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat fileName</span><br></pre></td></tr></table></figure><p>6.复制文件或目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp source dest</span><br></pre></td></tr></table></figure><p>7.删除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm name</span><br><span class="line">rm -f name 强制删除</span><br><span class="line">rm -r name 同时删除该目录下的所有文件</span><br></pre></td></tr></table></figure><p>8.移动文件或目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv source dest</span><br></pre></td></tr></table></figure><p>9.在文件系统中查找制定文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find name</span><br></pre></td></tr></table></figure><p>10.在指定的文本文件中查找指定的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep</span><br></pre></td></tr></table></figure><p>11.用于以树状图列出目录的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tree  </span><br><span class="line">在ubuntu系统中默认是没有tree这个命令的，需要安装，用下面的命令就可以安装tree这个命令工具sudo apt-get install tree</span><br><span class="line"></span><br><span class="line">查看不同级别子目录和文件使用&quot;tree -L 1 &quot;这个命令，只查看当前第一级的目录。和文件使用&quot;tree -L 2 &quot;这个命令，只查看当前第二级的目录和文件使用&quot;tree -L N &quot;这个命令，只查看当前第N级的目录和文件</span><br><span class="line"></span><br><span class="line">使用下面的命令将当前文件的第二级子目录的目录结构信息输入保存到/home/xxx/tree.txt文件中命令：tree -L 2 &gt; /home/xxx/tree.txt。其中&gt;是重定向符</span><br><span class="line"></span><br><span class="line">打开/home/xyh/tree.txt文件查看里面保存的结果是否和之前使用的命令显示的结果是一样的，可以看到文件保存的结果就是使用&quot;tree -L 2 &quot;这个命令的输入结果</span><br></pre></td></tr></table></figure><p>12.显示当前工作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p>13.建立软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln</span><br><span class="line">当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的 目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。例如：ln -s /bin/less /usr/local/bin/less</span><br><span class="line">-s 是代号（symbolic）的意思。</span><br><span class="line">这 里有两点要注意：第一，ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；第二，ln的链接又软链接 和硬链接两种，软链接就是ln -s ** **,它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接ln ** **,没有参数-s, 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</span><br></pre></td></tr></table></figure><p>14.分页显示文本文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">more</span><br><span class="line">实例1：显示文件中从第3行起的内容</span><br><span class="line">more +3 log2018.log</span><br><span class="line"></span><br><span class="line">实例2：从文件中查找第一个出现”day3”字符串的行，并从该处前两行开始显示输出</span><br><span class="line">more +/day3 log2018.log</span><br><span class="line"></span><br><span class="line">实例3：设定每屏显示行数</span><br><span class="line">more -5 log2018.log</span><br><span class="line"></span><br><span class="line">实例4：列一个目录下的文件，由于内容太多，我们应该学会用more来分页显示。这得和管道 | 结合起来</span><br><span class="line">ls -l  | more -5</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">每页显示5个文件信息，按 Ctrl+F 或者 空格键 将会显示下5条文件信息</span><br><span class="line">Enter 向下n行，需要定义。默认为1行</span><br><span class="line">Ctrl+F 向下滚动一屏</span><br><span class="line">空格键 向下滚动一屏</span><br><span class="line">Ctrl+B 返回上一屏</span><br><span class="line">= 输出当前行的行号</span><br><span class="line">：f 输出文件名和当前行的行号</span><br><span class="line">V 调用vi编辑器</span><br><span class="line">!命令 调用Shell，并执行命令</span><br><span class="line">q 退出more</span><br></pre></td></tr></table></figure><p>15.显示文件开头内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head</span><br></pre></td></tr></table></figure><p>16.显示文件结尾内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tail</span><br><span class="line">命令和 head 命令的格式基本一致，默认会显示文件的后 10 行。如果想显示指定的行数，则只需使用&quot;-n&quot;选项即可，例如：</span><br><span class="line">tail -n 20 anaconda-ks.cfg</span><br><span class="line"></span><br><span class="line">也可直接写&quot;-行数&quot;，例如：</span><br><span class="line">tail -20 anaconda-ks.cfg</span><br></pre></td></tr></table></figure><h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>stat</td><td>显示指定文件的相关信息,比ls命令显示内容更多</td></tr><tr><td>who</td><td>显示在线登录用户</td></tr><tr><td>hostname</td><td>显示主机名称</td></tr><tr><td>uname</td><td>显示系统信息</td></tr><tr><td>top</td><td>显示当前系统中耗费资源最多的进程</td></tr><tr><td>ps</td><td>显示瞬间的进程状态</td></tr><tr><td>du</td><td>显示指定的文件（目录）已使用的磁盘空间的总量</td></tr><tr><td>df</td><td>显示文件系统磁盘空间的使用情况</td></tr><tr><td>free</td><td>显示当前内存和交换空间的使用情况</td></tr><tr><td>ifconfig</td><td>显示网络接口信息</td></tr><tr><td>ping</td><td>测试网络的连通性</td></tr><tr><td>netstat</td><td>显示网络状态信息</td></tr><tr><td>clear</td><td>清屏</td></tr><tr><td>kill</td><td>杀死一个进程</td></tr></tbody></table><h1 id="开关机"><a href="#开关机" class="headerlink" title="开关机"></a>开关机</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">shutdown -t seconds time message</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line"></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line">shutdown -r now</span><br><span class="line"></span><br><span class="line">关机</span><br><span class="line"></span><br><span class="line">shutdown -h now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-t: 设定在几秒后进行关机程序</span><br><span class="line"></span><br><span class="line">-k: 不会真的关机，会将警告信息传送给所有使用者</span><br><span class="line"></span><br><span class="line">-r: 关机后重新开机</span><br><span class="line"></span><br><span class="line">-h: 关机后停机</span><br><span class="line"></span><br><span class="line">-n: 使用强迫的方式杀掉所有执行中的程序后自行关机</span><br><span class="line"></span><br><span class="line">-c: 取消目前已经进行中的关机动作</span><br><span class="line"></span><br><span class="line">-F: 关机时，强迫进行fsck动作</span><br><span class="line"></span><br><span class="line">time: 设定关机时间</span><br><span class="line"></span><br><span class="line">message: 传送给使用者的警告信息</span><br></pre></td></tr></table></figure><h1 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">压缩文件夹：`tar -zcvf test.tar.gz test\`</span><br><span class="line"></span><br><span class="line">解压文件夹：`tar -zxvf test.tar.gz</span><br></pre></td></tr></table></figure><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim</span><br><span class="line">编辑模式：等待编辑命令输入</span><br><span class="line">插入模式：编辑模式下，输入 i 进入插入模式，插入文本信息</span><br><span class="line">命令模式：在编辑模式下，输入 : 进行命令模式</span><br><span class="line">命令</span><br><span class="line">:q 直接退出vi</span><br><span class="line">:wq 保存后退出vi ，并可以新建文件</span><br><span class="line">:q! 强制退出</span><br><span class="line">:w file 将当前内容保存成某个文件</span><br><span class="line">:set number 在编辑文件显示行号</span><br><span class="line">:set nonumber在编辑文件不显示行号</span><br></pre></td></tr></table></figure><h1 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h1><p>APT(Advanced Packaging Tool) 是 Debian/Ubuntu 类 Linux 系统中的软件包管理程序, 使用它可以找到想要的软件包, 而且安装、卸载、更新都很简便；也可以用来对 Ubuntu 进行升级; APT 的源文件为 <code>/etc/apt/</code> 目录下的 <code>sources.list</code> 文件</p><p>修改数据源</p><p>由于国内的网络环境问题，我们需要将 Ubuntu 的数据源修改为国内数据源，操作步骤如下：</p><p>查看系统版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 16.04 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> Codename 为 <code>xenial</code>，该名称为我们 Ubuntu 系统的名称，修改数据源需要用到该名称</p><p>编辑数据源编辑数据源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>删除全部内容并修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新数据源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>常用 APT 命令</p><p>安装软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install packagename</span><br></pre></td></tr></table></figure><p>删除软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove packagename</span><br></pre></td></tr></table></figure><p>更新软件包列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>升级有可用更新的系统（慎用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><p>其它 APT 命令</p><p>搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search package</span><br></pre></td></tr></table></figure><p>获取包信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache show package</span><br></pre></td></tr></table></figure><p>删除包及配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove package --purge</span><br></pre></td></tr></table></figure><p>了解使用依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache depends package</span><br></pre></td></tr></table></figure><p>查看被哪些包依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache rdepends package</span><br></pre></td></tr></table></figure><p>安装相关的编译环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get build-dep package</span><br></pre></td></tr></table></figure><p>下载源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get source package</span><br></pre></td></tr></table></figure><p>清理无用的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get clean &amp;&amp; apt-get autoclean</span><br></pre></td></tr></table></figure><p>检查是否有损坏的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get check</span><br></pre></td></tr></table></figure><h1 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h1><p>Linux 操作系统是一个多用户操作系统，它允许多用户同时登录到系统上并使用资源。系统会根据账户来区分每个用户的文件，进程，任务和工作环境，使得每个用户工作都不受干扰。</p><p>使用 Root 用户</p><p>在实际生产操作中，我们基本上都是使用超级管理员账户操作 Linux 系统，也就是 Root 用户，Linux 系统默认是关闭 Root 账户的，我们需要为 Root 用户设置一个初始密码以方便我们使用。</p><p>设置 Root 账户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>切换到 Root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p>设置允许远程登录 Root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># Authentication:</span><br><span class="line">LoginGraceTime 120</span><br><span class="line">#PermitRootLogin without-password     //注释此行</span><br><span class="line">PermitRootLogin yes                             //加入此行</span><br><span class="line">StrictModes yes</span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p>用户账户说明</p><p>普通用户</p><p>普通用户在系统上的任务是进行普通操作</p><p>超级管理员</p><p>管理员在系统上的任务是对普通用户和整个系统进行管理。对系统具有绝对的控制权，能够对系统进行一切操作。用 root 表示，root 用户在系统中拥有最高权限，默认下 Ubuntu 用户的 root 用户是不能登录的。</p><p>安装时创建的系统用户</p><p>此用户创建时被添加到 admin 组中，在 Ubuntu 中，admin 组中的用户默认是可以使用 <code>sudo</code> 命令来执行只有管理员才能执行的命令的。如果不使用 <code>sudo</code> 就是一个普通用户。</p><p>组账户说明</p><p>私有组</p><p>当创建一个用户时没有指定属于哪个组，Linux 就会建立一个与用户同名的私有组，此私有组只含有该用户。</p><p>标准组</p><p>当创建一个用户时可以选定一个标准组，如果一个用户同时属于多个组时，登录后所属的组为主组，其他的为附加组。</p><p>账户系统文件说明</p><p>/etc/passwd</p><p>每一行代表一个账号，众多账号是系统正常运行所必须的，例如 bin，nobody 每行定义一个用户账户，此文件对所有用户可读。每行账户包含如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><ul><li><strong>用户名：</strong> 就是账号，用来对应 UID，root UID 是 0。</li><li><strong>口令：</strong> 密码，早期 UNIX 系统密码存在此字段，由于此文件所有用户都可以读取，密码容易泄露，后来这个字段数据就存放到 /etc/shadow 中，这里只能看到 X。</li><li><strong>用户标示号（UID）：</strong> 系统内唯一，root 用户的 UID 为 0，普通用户从 1000 开始，1-999 是系统的标准账户，500-65536 是可登陆账号。</li><li><strong>组标示号（GID）：</strong> 与 /etc/group 相关用来规定组名和 GID 相对应。</li><li><strong>注释：</strong> 注释账号</li><li><strong>宿主目录（主文件夹）：</strong> 用户登录系统后所进入的目录 root 在 /root/itcast</li><li><strong>命令解释器（shell）：</strong> 指定该用户使用的 shell ，默认的是 /bin/bash</li></ul><p>/etc/shadow</p><p>为了增加系统的安全性，用户口令通常用 shadow passwords 保护。只有 root 可读。每行包含如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:$6$Reu571.V$Ci/kd.OTzaSGU.TagZ5KjYx2MLzQv2IkZ24E1.yeTT3Pp4o/yniTjus/rRaJ92Z18MVy6suf1W5uxxurqssel.:17465:0:99999:7:::</span><br></pre></td></tr></table></figure><ul><li><p><strong>账号名称：</strong> 需要和 /etc/passwd 一致。</p></li><li><p>密码：</p></li></ul><p>  经过加密，虽然加密，但不表示不会被破解，该文件默认权限如下：</p><ul><li>-rw——- 1 root root 1560 Oct 26 17:20 passwd-</li><li>只有root能都读写</li></ul><ul><li><p><strong>最近修改密码日期：</strong> 从1970-1-1起，到用户最后一次更改口令的天数</p></li><li><p><strong>密码最小时间间隔：</strong> 从1970-1-1起，到用户可以更改口令的天数</p></li><li><p><strong>密码最大时间间隔：</strong> 从1970-1-1起，必须更改的口令天数</p></li><li><p><strong>密码到期警告时间：</strong> 在口令过期之前几天通知</p></li><li><p><strong>密码到期后账号宽限时间</strong></p></li><li><p><strong>密码到期禁用账户时间：</strong> 在用户口令过期后到禁用账户的天数</p></li><li><p><strong>保留</strong></p></li></ul><p>/etc/group</p><p>用户组的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:</span><br></pre></td></tr></table></figure><ul><li><strong>用户组名称</strong></li><li><strong>用户组密码：</strong> 给用户组管理员使用，通常不用</li><li><strong>GID：</strong> 用户组的ID</li><li><strong>此用户支持的账号名称：</strong> 一个账号可以加入多个用户组，例如想要 itcast 加入 root 这个用户组，将该账号填入该字段即可 root❌0:root, icast 将用户进行分组是 Linux 对用户进行管理及控制访问权限的一种手段。一个中可以有多个用户，一个用户可以同时属于多个组。该文件对所有用户可读。</li></ul><p>/etc/gshadow</p><p>该文件用户定义用户组口令，组管理员等信息只有root用户可读。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:\*::</span><br></pre></td></tr></table></figure><ul><li><strong>用户组名</strong></li><li><strong>密码列</strong></li><li><strong>用户组管理员的账号</strong></li><li><strong>用户组所属账号</strong></li></ul><p>账户管理常用命令</p><p>增加用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名</span><br><span class="line">useradd -u (UID号)</span><br><span class="line">useradd -p (口令)</span><br><span class="line">useradd -g (分组)</span><br><span class="line">useradd -s (SHELL)</span><br><span class="line">useradd -d (用户目录)</span><br></pre></td></tr></table></figure><p>如：<code>useradd lusifer</code></p><p>增加用户名为 lusifer 的账户</p><p>修改用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">usermod -u (新UID)</span><br><span class="line">usermod -d (用户目录)</span><br><span class="line">usermod -g (组名)</span><br><span class="line">usermod -s (SHELL)</span><br><span class="line">usermod -p (新口令)</span><br><span class="line">usermod -l (新登录名)</span><br><span class="line">usermod -L (锁定用户账号密码)</span><br><span class="line">usermod -U (解锁用户账号)</span><br></pre></td></tr></table></figure><p>如：<code>usermod -u 1024 -g group2 -G root lusifer</code></p><p>将 lusifer 用户 uid 修改为 1024，默认组改为系统中已经存在的 group2，并且加入到系统管理员组</p><p>删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名 (删除用户账号)</span><br><span class="line">userdel -r 删除账号时同时删除目录</span><br></pre></td></tr></table></figure><p>如：<code>userdel -r lusifer</code></p><p>删除用户名为 lusifer 的账户并同时删除 lusifer 的用户目录</p><p>组账户维护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组账户名 (创建新组)</span><br><span class="line">groupadd -g 指定组GID</span><br><span class="line">groupmod -g 更改组的GID</span><br><span class="line">groupmod -n 更改组账户名</span><br><span class="line">groupdel 组账户名 (删除指定组账户)</span><br></pre></td></tr></table></figure><p>口令维护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户账户名 (设置用户口令)</span><br><span class="line">passwd -l 用户账户名 (锁定用户账户)</span><br><span class="line">passwd -u 用户账户名 (解锁用户账户)</span><br><span class="line">passwd -d 用户账户名 (删除账户口令)</span><br><span class="line">gpasswd -a 用户账户名 组账户名 (将指定用户添加到指定组)</span><br><span class="line">gpasswd -d 用户账户名 组账户名 (将用户从指定组中删除)</span><br><span class="line">gpasswd -A 用户账户名 组账户名 (将用户指定为组的管理员)</span><br></pre></td></tr></table></figure><p>用户和组状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su 用户名(切换用户账户)</span><br><span class="line">id 用户名(显示用户的UID，GID)</span><br><span class="line">whoami (显示当前用户名称)</span><br><span class="line">groups (显示用户所属组)</span><br></pre></td></tr></table></figure><h1 id="查看文件和目录的权限"><a href="#查看文件和目录的权限" class="headerlink" title="查看文件和目录的权限"></a>查看文件和目录的权限</h1><p>ls –al<code>使用 ls 不带参数只显示文件名称，通过</code>ls –al` 可以显示文件或者目录的权限信息。</p><p><code>ls -l 文件名</code> 显示信息包括：文件类型 (<code>d</code> 目录，<code>-</code> 普通文件，<code>l</code> 链接文件)，文件权限，文件的用户，文件的所属组，文件的大小，文件的创建时间，文件的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 lusifer lusifer 675 Oct 26 17:20 .profile</span><br></pre></td></tr></table></figure><ul><li><code>-</code>：普通文件</li><li><code>rw-</code>：说明用户 lusifer 有读写权限，没有运行权限</li><li><code>r--</code>：表示用户组 lusifer 只有读权限，没有写和运行的权限</li><li><code>r--</code>：其他用户只有读权限，没有写权限和运行的权限</li></ul><table><thead><tr><th>-rw-r–r–</th><th>1</th><th>lusifer</th><th>lusifer</th><th>675</th><th>Oct 26 17:20</th><th>.profile</th></tr></thead><tbody><tr><td>文档类型及权限</td><td>连接数</td><td>文档所属用户</td><td>文档所属组</td><td>文档大小</td><td>文档最后被修改日期</td><td>文档名称</td></tr></tbody></table><table><thead><tr><th>-</th><th>rw-</th><th>r–</th><th>r–</th></tr></thead><tbody><tr><td>文档类型</td><td>文档所有者权限（user）</td><td>文档所属用户组权限（group）</td><td>其他用户权限（other）</td></tr></tbody></table><p>文档类型</p><ul><li><code>d</code> 表示目录</li><li><code>l</code> 表示软连接</li><li><code>–</code> 表示文件</li><li><code>c</code> 表示串行端口字符设备文件</li><li><code>b</code> 表示可供存储的块设备文件</li><li>余下的字符 3 个字符为一组。<code>r</code> 只读，<code>w</code> 可写，<code>x</code> 可执行，<code>-</code> 表示无此权限</li></ul><p>连接数</p><p>指有多少个文件指向同一个索引节点。</p><p>文档所属用户和所属组</p><p>就是文档属于哪个用户和用户组。文件所属用户和组是可以更改的</p><p>文档大小</p><p>默认是 bytes</p><p>更改操作权限</p><p>chown</p><p>是 change owner 的意思，主要作用就是改变文件或者目录所有者，所有者包含用户和用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] 用户名称 文件或者目录</span><br><span class="line">chown [-R] 用户名称 用户组名称 文件或目录</span><br></pre></td></tr></table></figure><p>-R：进行递归式的权限更改，将目录下的所有文件、子目录更新为指定用户组权限</p><p>chmod</p><p>改变访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [who] [+ | - | =] [mode] 文件名</span><br></pre></td></tr></table></figure><p>who</p><p>表示操作对象可以是以下字母的一个或者组合</p><ul><li>u：用户 user</li><li>g：用户组 group</li><li>o：表示其他用户</li><li>a：表示所有用户是系统默认的</li></ul><p>操作符号</p><ul><li>+：表示添加某个权限</li><li>-：表示取消某个权限</li><li>=：赋予给定的权限，取消文档以前的所有权限</li></ul><p>mode</p><p>表示可执行的权限，可以是 r、w、x</p><p>文件名</p><p>文件名可以使空格分开的文件列表</p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lusifer@UbuntuBase:~$ ls -al test.txt </span><br><span class="line">-rw-rw-r-- 1 lusifer lusifer 6 Nov  2 21:47 test.txt</span><br><span class="line">lusifer@UbuntuBase:~$ chmod u=rwx,g+r,o+r test.txt </span><br><span class="line">lusifer@UbuntuBase:~$ ls -al test.txt </span><br><span class="line">-rwxrw-r-- 1 lusifer lusifer 6 Nov  2 21:47 test.txt</span><br><span class="line">lusifer@UbuntuBase:~$</span><br></pre></td></tr></table></figure><p>数字设定法</p><p>数字设定法中数字表示的含义</p><ul><li>0 表示没有任何权限</li><li>1 表示有可执行权限 = <code>x</code></li><li>2 表示有可写权限 = <code>w</code></li><li>4 表示有可读权限 = <code>r</code></li></ul><p>也可以用数字来表示权限如 chmod 755 file_name</p><table><thead><tr><th>r w x</th><th>r – x</th><th>r - x</th></tr></thead><tbody><tr><td>4 2 1</td><td>4 - 1</td><td>4 - 1</td></tr><tr><td>user</td><td>group</td><td>others</td></tr></tbody></table><p>若要 rwx 属性则 4+2+1=7</p><p>若要 rw- 属性则 4+2=6</p><p>若要 r-x 属性则 4+1=5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lusifer@UbuntuBase:~$ chmod 777 test.txt </span><br><span class="line">lusifer@UbuntuBase:~$ ls -al test.txt </span><br><span class="line">-rwxrwxrwx 1 lusifer lusifer 6 Nov  2 21:47 test.txt</span><br><span class="line"></span><br><span class="line">lusifer@UbuntuBase:~$ chmod 770 test.txt </span><br><span class="line">lusifer@UbuntuBase:~$ ls -al test.txt </span><br><span class="line">-rwxrwx--- 1 lusifer lusifer 6 Nov  2 21:47 test.txt</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上内容有个人笔记也有参考网上一些博文资料，先就这么多！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-实战</title>
      <link href="/2019/01/10/Linux-%E5%AE%9E%E6%88%98/"/>
      <url>/2019/01/10/Linux-%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本地安装ubuntu,然后又安装JDK,Tomcat,MySql,那么接下来肯定是打包个项目，在本地linux服务器上面跑起来。嗯，想一想，这是非常合乎开发常理的事。就是这么合乎常理的事，当我想要写篇blog来记录时，突然感觉不用写了–因为过程非常符合开发常理。</p><p>是的，你可能已经想到了，打个包，丢到Tomcat里，跑起来，完事！所以这里不做记录，只是强调一点：操作过程要细心哦！</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-目录结构</title>
      <link href="/2019/01/10/Linux-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2019/01/10/Linux-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>深入一点</p><a id="more"></a><h1 id="树状目录结构"><a href="#树状目录结构" class="headerlink" title="树状目录结构"></a>树状目录结构</h1><img src="/2019/01/10/Linux-目录结构/image1.jpg"><p>以下是对这些目录的解释：</p><ul><li><p><strong>/bin</strong>：<br>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p></li><li><p><strong>/lib</strong>：<br>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：<br>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br> 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/selinux</strong>：<br> 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p> 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p><p>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。</p></li></ul><p>  该文件系统是内核设备树的一个直观反映。</p><p>  当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p><ul><li><p><strong>/tmp</strong>：<br>这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>/var</strong>：<br>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。</p><p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。</p><p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019整理再出发</title>
      <link href="/2019/01/09/2019%E6%95%B4%E7%90%86%E5%86%8D%E5%87%BA%E5%8F%91/"/>
      <url>/2019/01/09/2019%E6%95%B4%E7%90%86%E5%86%8D%E5%87%BA%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/09/2019整理再出发/image1.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>古时候一个佛学造诣很深的人，去拜访一位德高望重的老禅师。老禅师的徒弟接待他时，他态度傲慢。后来老禅师恭敬地接待了他，并为他沏茶。可在倒水时，明明杯子已经满了，老禅师还不停地倒。他不解地问：“大师，为什么杯子已经满了，还要往里倒？”大师说：“是啊，既然已满了，干吗还倒呢？”访客恍然大悟。</p><a id="more"></a><p>这就是“归零心态”的起源，象征意义是，做事的前提是先要有好心态，如果想要获取更多的知识、技能，获得更大的成就，必须定期给自己的内心清零。</p><p>归零心态要求我们不能沉迷过去的业绩，要调整自己去适应新的变化。归零心态的本质就是挑战自我，永不满足。</p><p>归零的心态。归零的心态就是空杯、谦虚的心态，就是重新开始。第一次成功相对比较容易，第二次却不容易了，原因是不能归零。</p><p>（来自《归零心态》是 2011年1月1日由<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E7%9F%B3%E5%8C%96%E5%87%BA%E7%89%88%E7%A4%BE/2814665" target="_blank" rel="noopener">中国石化出版社</a>出版的图书，作者是<a href="https://baike.baidu.com/item/%E5%BC%A0%E6%8C%AF%E5%AE%97" target="_blank" rel="noopener">张振宗</a>。）</p><h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>本来这篇博客应该是第一时间发布，但最终只能穿插着发布了！</p><p>从未想过自己建站来写Blog，可能是打心底受到鲁迅先生的影响–“我也早觉得有写一点东西的必要了”。之前陆陆续续在CSDN，简书和GitHub上写过些东西，主要是记录一些技术心得和Bug修复，但都写的很零散，不成体系。但是最近，来自内心深处的自问越渐明晰—-你到底想做什么？</p><p>于是意识到有必要重新审视下自己，也就是自省吧！话题范围太大，无从下手，那干脆就先从自己会什么着手，好好认识下自己。这样做的目的是为接下来的发展定位提供参考。</p><p>嗯，建站写Blog，这个想法不错。以前的Blog更多是基于Bug驱动的，也就是出了问题就写一下，比较零散。现在我要按照时间倒叙，基于达到一个目的，如实现微服务架构，来整理周边知识，达到技术知识的体系化。</p><p>也就是说，要换个思路，重新写Blog，当然内容来源也还是会参考个人笔记和博文以及网络资源。希望能帮到自己。</p><p>嗯，说干就干！</p><p>2019，我在这里整理再出发！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-远程控制</title>
      <link href="/2019/01/09/Linux-%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/01/09/Linux-%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/09/Linux-远程控制/image1.jpg" title="Xshell"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没有安全作为保障，其它先不谈！</p><a id="more"></a><p>传统的网络服务程序，如：<a href="https://baike.baidu.com/item/ftp" target="_blank" rel="noopener">ftp</a>、pop和<a href="https://baike.baidu.com/item/telnet" target="_blank" rel="noopener">telnet</a>在本质上都是不安全的，因为它们在网络上用<a href="https://baike.baidu.com/item/%E6%98%8E%E6%96%87" target="_blank" rel="noopener">明文</a>传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81" target="_blank" rel="noopener">安全验证</a>方式也是有其弱点的， 就是很容易受到“中间人”（man-in-the-middle）这种方式的攻击。所谓“中间人”的攻击方式， 就是“中间人”冒充真正的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">服务器</a>接收你传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中间人”一转手做了手脚之后，就会出现很严重的问题。通过使用SSH，你可以把所有传输的数据进行加密，这样”中间人”这种攻击方式就不可能实现了，而且也能够防止DNS欺骗和IP欺骗。使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的<a href="https://baike.baidu.com/item/%E9%80%9F%E5%BA%A6/5456" target="_blank" rel="noopener">速度</a>。SSH有很多功能，它既可以代替<a href="https://baike.baidu.com/item/Telnet" target="_blank" rel="noopener">Telnet</a>，又可以为<a href="https://baike.baidu.com/item/FTP" target="_blank" rel="noopener">FTP</a>、<a href="https://baike.baidu.com/item/PoP" target="_blank" rel="noopener">PoP</a>、甚至为<a href="https://baike.baidu.com/item/PPP" target="_blank" rel="noopener">PPP</a>提供一个安全的”通道”</p><h1 id="OpenSSH"><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a>OpenSSH</h1><p>OpenSSH 是 <a href="https://baike.baidu.com/item/SSH" target="_blank" rel="noopener">SSH</a> （Secure <a href="https://baike.baidu.com/item/SHell" target="_blank" rel="noopener">SHell</a>） 协议的免费开源实现。SSH协议族可以用来进行远程控制， 或在计算机之间传送文件。</p><p>OpenSSH 由客户端和服务端组成。</p><ul><li>基于口令的安全验证：知道服务器的帐号密码即可远程登录，口令和数据在传输过程中都会被加密。</li><li>基于密钥的安全验证：此时需要在创建一对密钥，把公有密钥放到远程服务器上自己的宿主目录中，而私有密钥则由自己保存。</li></ul><p>检查软件是否安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy openssh-client openssh-server</span><br></pre></td></tr></table></figure><p>安装服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>安装客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install openssh-client</span><br></pre></td></tr></table></figure><p>OpenSSH 服务器的主要配置文件为 <code>/etc/ssh/sshd\_config</code>，几乎所有的配置信息都在此文件中。</p><h1 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h1><p>Xshell [1]  是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。Xshell 通过互联网到远程<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151" target="_blank" rel="noopener">主机</a>的安全连接以及它创新性的设计和特色帮助用户在复杂的网络环境中享受他们的工作。</p><p>Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。除此之外，其还有丰富的外观配色方案以及样式选择。</p><p>下载：<a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">https://xshell.en.softonic.com/</a></p><p>安装过程就不详细说明。</p><h5 id="来源："><a href="#来源：" class="headerlink" title="来源："></a>来源：</h5><p>百度百科</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Xshell </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu-VMware上装</title>
      <link href="/2019/01/09/Ubuntu-VMware%E4%B8%8A%E8%A3%85/"/>
      <url>/2019/01/09/Ubuntu-VMware%E4%B8%8A%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/09/Ubuntu-VMware上装/image1.png"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记笔记的过程，好比建立一条内存索引，大脑只需记住这条索引即可！想想都激动！</p><a id="more"></a><p>Ubuntu（友帮拓、优般图、乌班图）是一个以<a href="https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2" target="_blank" rel="noopener">桌面</a>应用为主的开源GNU/Linux操作系统，Ubuntu 是基于<a href="https://baike.baidu.com/item/Debian" target="_blank" rel="noopener">Debian</a>GNU/<a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>，支持x86、amd64（即x64）和<a href="https://baike.baidu.com/item/ppc/150" target="_blank" rel="noopener">ppc</a>架构，由全球化的专业开发团队（Canonical Ltd）打造的。 [1] </p><p>其名称来自非洲南部<a href="https://baike.baidu.com/item/%E7%A5%96%E9%B2%81%E8%AF%AD/7274976" target="_blank" rel="noopener">祖鲁语</a>或豪萨语的“ubuntu”一词 [2]  ，类似儒家“仁爱”的思想，意思是“人性”、“我的存在是因为大家的存在”，是非洲传统的一种价值观。</p><p>（来源：百度百科）</p><p>原生云应用基本都是基于云服务器部署，本地化的 Linux 操作基本也都是在虚拟机中进行模拟操作。因此我们先安装虚拟机，然后在虚拟机上安装对应的 Linux 操作系统（Ubuntu）。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="VMware安装"><a href="#VMware安装" class="headerlink" title="VMware安装"></a>VMware安装</h2><p>可自行查阅安装。</p><h2 id="Ubuntu-Server安装"><a href="#Ubuntu-Server安装" class="headerlink" title="Ubuntu Server安装"></a>Ubuntu Server安装</h2><p>一方面网上热心人士整理相关攻略较多，二来安装过程基本也是跟着next走。这里就简单介绍下Ubuntu的安装流程，也就给自己建立一个索引，以便来日快速上手。</p><p>版本：</p><p>VMwareworkstation64_14.1.0.27582</p><p>ubuntu-16.04-server-amd64.iso</p><p>step 1</p><p>打开VMware</p><img src="/2019/01/09/Ubuntu-VMware上装/1.jpg"><p>step 2</p><p>选择自定义安装</p><img src="/2019/01/09/Ubuntu-VMware上装/2.jpg"><p>step 3</p><p>选择Workstation 14.x</p><img src="/2019/01/09/Ubuntu-VMware上装/3.jpg"><p>step 4</p><p>选择稍后安装，以便后面设置相关信息。</p><img src="/2019/01/09/Ubuntu-VMware上装/4.jpg"><p>step 5</p><p>虚拟机命名，建议使用Ubuntu Server X64这样的方式。位置选择，优先选择SSD，路径命名上建议使用\VMware\Ubuntu Server X64这样的方式。强调这样的命名方式，只要是方便文件的管理。</p><img src="/2019/01/09/Ubuntu-VMware上装/5.jpg"><p>step 6</p><p>选择NAT</p><img src="/2019/01/09/Ubuntu-VMware上装/6.jpg"><p>step 7</p><img src="/2019/01/09/Ubuntu-VMware上装/7.jpg"><p>step 8</p><img src="/2019/01/09/Ubuntu-VMware上装/8.jpg"><p>step 9</p><img src="/2019/01/09/Ubuntu-VMware上装/9.jpg"><p>step 10</p><img src="/2019/01/09/Ubuntu-VMware上装/10.jpg"><p>step 11</p><img src="/2019/01/09/Ubuntu-VMware上装/11.jpg"><p>step 12</p><img src="/2019/01/09/Ubuntu-VMware上装/12.jpg"><p>step 13</p><img src="/2019/01/09/Ubuntu-VMware上装/13.jpg"><p>step 14</p><img src="/2019/01/09/Ubuntu-VMware上装/14.jpg"><p>step 15</p><img src="/2019/01/09/Ubuntu-VMware上装/15.jpg"><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上只是安装过程中的部分截图，供参考！其它的安装选项基本保持默认选项即可。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-简介</title>
      <link href="/2019/01/09/Linux-%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/01/09/Linux-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/09/Linux-简介/image1.png"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Linux是一套免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUnix" target="_blank" rel="noopener">类Unix</a><a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192" target="_blank" rel="noopener">操作系统</a>，是一个基于<a href="https://baike.baidu.com/item/POSIX" target="_blank" rel="noopener">POSIX</a>和<a href="https://baike.baidu.com/item/UNIX" target="_blank" rel="noopener">UNIX</a>的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764" target="_blank" rel="noopener">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404" target="_blank" rel="noopener">多线程</a>和多<a href="https://baike.baidu.com/item/CPU" target="_blank" rel="noopener">CPU</a>的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218" target="_blank" rel="noopener">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D" target="_blank" rel="noopener">64位</a>硬件。Linux继承了<a href="https://baike.baidu.com/item/Unix" target="_blank" rel="noopener">Unix</a>以<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C/143243" target="_blank" rel="noopener">网络</a>为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p>Linux操作系统诞生于1991 年10 月5 日（这是第一次正式向外公布时间）。Linux存在着许多不同的Linux版本，但它们都使用了<a href="https://baike.baidu.com/item/Linux%E5%86%85%E6%A0%B8" target="_blank" rel="noopener">Linux内核</a>。Linux可安装在各种计算机硬件设备中，比如<a href="https://baike.baidu.com/item/%E6%89%8B%E6%9C%BA/6342" target="_blank" rel="noopener">手机</a>、<a href="https://baike.baidu.com/item/%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91/1348389" target="_blank" rel="noopener">平板电脑</a>、<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8/108294" target="_blank" rel="noopener">路由器</a>、视频游戏控制台、台式计算机、大型机和超级计算机。</p><p>严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用<a href="https://baike.baidu.com/item/GNU" target="_blank" rel="noopener">GNU</a>工程各种工具和数据库的操作系统。</p><p>目前市面上较知名的发行版有：<code>Ubuntu</code>、RedHat、<code>CentOS</code>、Debian、Fedora、SuSE、OpenSUSE、TurboLinux、BluePoint、RedFlag、Xterm、SlackWare等。</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p>百度百科</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础设施即服务(IaaS) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-初识</title>
      <link href="/2019/01/08/Docker-%E5%88%9D%E8%AF%86/"/>
      <url>/2019/01/08/Docker-%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/08/Docker-初识/image1.jpg" title="This is an example image"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>确认过眼神，这就是想要的！</p><a id="more"></a><p>百度百科释：</p><p>Docker 是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339" target="_blank" rel="noopener">开源</a>的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a> 机器上，也可以实现<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96/547949" target="_blank" rel="noopener">虚拟化</a>。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318" target="_blank" rel="noopener">沙箱</a>机制，相互之间不会有任何接口。</p><h1 id="What"><a href="#What" class="headerlink" title="What ?"></a>What ?</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>Docker 是 <a href="https://baike.baidu.com/item/PaaS" target="_blank" rel="noopener">PaaS</a> 提供商 dotCloud 开源的一个基于 <a href="https://baike.baidu.com/item/LXC" target="_blank" rel="noopener">LXC</a> 的高级容器引擎，源代码托管在 <a href="https://baike.baidu.com/item/Github" target="_blank" rel="noopener">Github</a> 上, 基于<a href="https://baike.baidu.com/item/go%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">go语言</a>并遵从Apache2.0协议开源。</p><p>Docker自2013年以来非常火热，无论是从 github 上的代码活跃度，还是<a href="https://baike.baidu.com/item/Redhat" target="_blank" rel="noopener">Redhat</a>在RHEL6.5中集成对Docker的支持, 就连 Google 的 Compute Engine 也支持 docker 在其之上运行。</p><p>一款开源软件能否在商业上成功，很大程度上依赖三件事 - 成功的 user case(用例), 活跃的社区和一个好故事。 dotCloud 自家的 PaaS 产品建立在<a href="https://baike.baidu.com/item/docker" target="_blank" rel="noopener">docker</a>之上，长期维护且有大量的用户，社区也十分活跃，接下来我们看看docker的故事。</p><ul><li>环境管理复杂 - 从各种OS到各种中间件到各种app, 一款产品能够成功作为开发者需要关心的东西太多，且难于管理，这个问题几乎在所有现代IT相关行业都需要面对。</li><li>云计算时代的到来 - AWS的成功, 引导开发者将应用转移到 cloud 上, 解决了硬件管理的问题，然而中间件相关的问题依然存在 (所以openstack HEAT和 AWS cloudformation 都着力解决这个问题)。开发者思路变化提供了可能性。</li><li>虚拟化手段的变化 - cloud 时代采用标配硬件来降低成本，采用虚拟化手段来满足用户按需使用的需求以及保证可用性和隔离性。然而无论是KVM还是Xen在 docker 看来,都在浪费资源，因为用户需要的是高效运行环境而非OS, GuestOS既浪费资源又难于管理, 更加轻量级的LXC更加灵活和快速</li><li>LXC的移动性 - LXC在 linux 2.6 的 kernel 里就已经存在了，但是其设计之初并非为云计算考虑的，缺少标准化的描述手段和容器的可迁移性，决定其构建出的环境难于迁移和标准化管理(相对于KVM之类image和snapshot的概念)。docker 就在这个问题上做出实质性的革新。这是docker最独特的地方。</li></ul><img src="/2019/01/08/Docker-初识/image2.jpg" title="This is an example image"><p>面对上述几个问题，docker设想是交付运行环境如同海运，OS如同一个货轮，每一个在OS基础上的软件都如同一个集装箱，用户可以通过标准化手段自由组装运行环境，同时集装箱的内容可以由用户自定义，也可以由专业人员制造。这样，交付一个软件，就是一系列标准化组件的集合的交付，如同乐高积木，用户只需要选择合适的积木组合，并且在最顶端署上自己的名字(最后一个标准化组件是用户的app)。这也就是基于docker的PaaS产品的原型。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。 [3] </p><table><thead><tr><th>Docker</th><th>面向对象</th></tr></thead><tbody><tr><td>容器</td><td>对象</td></tr><tr><td>镜像</td><td>类</td></tr></tbody></table><p>Docker采用 C/S架构 Docker daemon 作为服务端接受来自客户的请求，并处理这些请求（创建、运行、分发容器）。 客户端和服务端既可以运行在一个机器上，也可通过 socket 或者RESTful API 来进行通信。</p><p>Docker daemon 一般在宿主主机后台运行，等待接收来自客户端的消息。 Docker 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟 Docker daemon 交互。</p><img src="/2019/01/08/Docker-初识/image3.jpg" title="This is an example image"><h1 id="Why"><a href="#Why" class="headerlink" title="Why ?"></a>Why ?</h1><h2 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h2><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h2 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h2><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h2 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h2><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 <em>「这段代码在我机器上没问题啊」</em> 这类问题。</p><h2 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h2><p>对开发和运维（<a href="https://zh.wikipedia.org/wiki/DevOps" target="_blank" rel="noopener">DevOps</a>）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 <code>Dockerfile</code>来进行镜像构建，并结合 <a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="noopener">持续集成(Continuous Integration)</a> 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 <a href="https://en.wikipedia.org/wiki/Continuous_delivery" target="_blank" rel="noopener">持续部署(Continuous Delivery/Deployment)</a> 系统进行自动部署。</p><p>而且使用 <code>Dockerfile</code> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h2 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h2><p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h2 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h2><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 <a href="https://store.docker.com/search?q=&amp;source=verified&amp;type=image" target="_blank" rel="noopener">官方镜像</a>，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://baike.baidu.com/item/Docker/13344470?fr=aladdin#1_3" target="_blank" rel="noopener">https://baike.baidu.com/item/Docker/13344470?fr=aladdin#1_3</a></p><p><a href="https://zh.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Docker</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-杂记</title>
      <link href="/2019/01/08/Hexo-%E6%9D%82%E8%AE%B0/"/>
      <url>/2019/01/08/Hexo-%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="中文文档地址"><a href="#中文文档地址" class="headerlink" title="中文文档地址"></a>中文文档地址</h1><p><a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs</a></p><h1 id="自定义中文表述"><a href="#自定义中文表述" class="headerlink" title="自定义中文表述"></a>自定义中文表述</h1><p>在/themes/next/languages/zh-CN.yml文件中定义即可</p><h1 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h1><p>在主题的配置文件中搜索Canvas-nest，下面有几种动态背景可设置。</p><p>其中canvas_nest只需将enable属性设置为true，即可。</p><p>另外三种JavaScript 3D library设置方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Step 1 </span><br><span class="line">$ cd themes/next</span><br><span class="line"></span><br><span class="line">Step 2 </span><br><span class="line">$ git clone https://github.com/theme-next/theme-next-three source/lib/three</span><br><span class="line"></span><br><span class="line">Step 3 → Set it up</span><br><span class="line">Enable module in NexT _config.yml file:</span><br><span class="line"></span><br><span class="line">three_waves: true</span><br><span class="line">OR</span><br><span class="line">canvas_lines: true</span><br><span class="line">OR</span><br><span class="line">canvas_sphere: true</span><br><span class="line"></span><br><span class="line">step 4 Update</span><br><span class="line">$ cd themes/next/source/lib/three</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure><h1 id="更换背景图片"><a href="#更换背景图片" class="headerlink" title="更换背景图片"></a>更换背景图片</h1><p>先将选好的图片放入主题source文件下的images文件夹下面，让后找到\themes\next\source\css\_custom下的custom.styl文件，添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123; background:url(/images/backimage.png);&#125;</span><br></pre></td></tr></table></figure><p>另外如果想要每次刷新，背景图能更换则配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(https://source.unsplash.com/1920x1080/?nature);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片类型可进入官网：<a href="https://source.unsplash.com/" target="_blank" rel="noopener">https://source.unsplash.com</a>自己挑选。</p><h1 id="添加背景音乐"><a href="#添加背景音乐" class="headerlink" title="添加背景音乐"></a>添加背景音乐</h1><p>step 1</p><p>修改 <code>themes/next/layout/_macro/sidebar.swig</code> 文件theme.creative_commons.license上面增加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 音乐播放器 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;% if theme.background_music %&#125;</span><br><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=427017519&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>step 2</p><p>在 <code>themes/next/_config.yml</code> 配置文件中添加歌单地址配置,也就是上面src后面的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//music.163.com/outchain/player?type=2&amp;id=427017519&amp;auto=1&amp;height=66</span><br></pre></td></tr></table></figure><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">step 1</span><br><span class="line">cd /blog</span><br><span class="line"></span><br><span class="line">step 2</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">step 2</span><br><span class="line">更改hexo配置文件如下：</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><h1 id="设置左边菜单栏"><a href="#设置左边菜单栏" class="headerlink" title="设置左边菜单栏"></a>设置左边菜单栏</h1><p>进入主题的配置文件，找到menu,将注释的打开，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: / || home</span><br><span class="line">  关于: /about/ || user</span><br><span class="line">  标签: /tags/ || tags</span><br><span class="line">  分类: /categories/ || th</span><br><span class="line">  归档: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><h1 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h1><p>进入主题的配置文件，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  url: /images/avatar1.JPG</span><br><span class="line">  rounded: true</span><br><span class="line">  opacity: 1</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure><p>让后将avatar1.JPG图片放进主题的source文件夹下的images文件中。</p><h1 id="文章底部tag前的-替换"><a href="#文章底部tag前的-替换" class="headerlink" title="文章底部tag前的#替换"></a>文章底部tag前的#替换</h1><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将<code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h1 id="主页添加阴影"><a href="#主页添加阴影" class="headerlink" title="主页添加阴影"></a>主页添加阴影</h1><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">margin-top: 60px;</span><br><span class="line">margin-bottom: 60px;</span><br><span class="line">padding: 25px;</span><br><span class="line">-webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">-moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h1><p>将制作好的图标放进/themes/next/source/images里，让后到主题配置文件中修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><h1 id="添加评论和统计"><a href="#添加评论和统计" class="headerlink" title="添加评论和统计"></a>添加评论和统计</h1><p>1.官网注册账号<a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a></p><p>2.注册并登录LeanCloud后，进入控制台，单击“创建应用”按钮进行应用的创建，输入新应用名称，选择开发版，单击“创建”按钮完成创建</p><p>3.进入到刚刚创建的应用中，选择左侧导航栏的“存储”，然后点击“创建Class”，为了与Next形成配置关系，将Class名称填为<code>Counter</code>，然后单击“创建Class”按钮完成Class的创建</p><p>4.让后打开主题配置文件<code>D:\DEV\myhexo\blog\themes\next\_config.yml</code>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: ture</span><br><span class="line">  app_id: </span><br><span class="line">  app_key: </span><br><span class="line">  security: true</span><br><span class="line">  betterPerformance: false</span><br><span class="line">  </span><br><span class="line">  valine:</span><br><span class="line">  enable: true </span><br><span class="line">  appid: </span><br><span class="line">  appkey: </span><br><span class="line">  notify: false </span><br><span class="line">  verify: false </span><br><span class="line">  placeholder: 说点什么吧！ </span><br><span class="line">  avatar: mm </span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 </span><br><span class="line">  visitor: true </span><br><span class="line">  comment_count: true</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.上面<code>app_id</code>和<code>app_key</code>见leancloud官网；</p><p>2.要正常显示阅读次数，须将valine的visitor项改为true;</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-分享</title>
      <link href="/2019/01/08/Hexo-%E5%88%86%E4%BA%AB/"/>
      <url>/2019/01/08/Hexo-%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/08/Hexo-分享/image1.jpg" title="This is an example image"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候我们宁可花大把时间google和百度，也不愿看看官方文档！论能看，会看文档的重要性！</p><a id="more"></a><p>打开Hexo主题站点的资源文件（即主题的source文件）中的配置文件，官方配置了三种不同的分享方式：</p><ul><li>Baidu Share</li><li>AddThis Share</li><li>NeedMoreShare2</li></ul><p>其中_config.yml文件中也明确说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Baidu Share does not support https.</span><br></pre></td></tr></table></figure><p>说是BaiduShare不支持https，那能使用Baidu Share吗？答案肯定是可以得，就是麻烦些。</p><p>这里只说明NeedMoreShare2和Baidu Share两种方式的分享配置。</p><h1 id="NeedMoreShare2-配置"><a href="#NeedMoreShare2-配置" class="headerlink" title="NeedMoreShare2 配置"></a>NeedMoreShare2 配置</h1><p>正当思考着如何下手时，瞟见_config.yml文件给出了如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># NeedMoreShare2</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-needmoreshare2</span><br></pre></td></tr></table></figure><p>那就先看看github。果然很靠谱，内容整理如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Step 1</span><br><span class="line">$ cd themes/next</span><br><span class="line"></span><br><span class="line">Step 2</span><br><span class="line">$ git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton</span><br><span class="line"></span><br><span class="line">Step 3</span><br><span class="line">打开 NexT 的 _config.yml 文件，更改配置如下:</span><br><span class="line">needmoreshare2:</span><br><span class="line">  enable: true</span><br><span class="line">  postbottom:</span><br><span class="line">    enable: true</span><br><span class="line">  float:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure><p>嗯，就这样完事，5分钟不到哈！</p><h1 id="Baidu-Share"><a href="#Baidu-Share" class="headerlink" title="Baidu Share"></a>Baidu Share</h1><p>Baidu Share在另一个LandScape主题里有配置，当前使用的是NexT主题，配置的是NeedMoreShare2，但还是记录下如何解决如下问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Baidu Share does not support https.</span><br></pre></td></tr></table></figure><p>方案比较粗暴：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">step 1</span><br><span class="line">打开http://share.baidu.com/code网站，复制分享代码</span><br><span class="line"></span><br><span class="line">step 2</span><br><span class="line">打开themes\landscape\layout_partial\article.ejs，找到“&lt;footer class=&quot;article-footer&quot;&gt;”标签并将标签对包含代码替换为百度分享代码</span><br><span class="line"></span><br><span class="line">并将上面替换后的百度分享里的src做如下修改：</span><br><span class="line">src=&apos;/static/api/js/share.js?v=89860593.js 其它不动</span><br><span class="line"></span><br><span class="line">step 3</span><br><span class="line">下载static文件：https://github.com/hrwhisper/baiduShare </span><br><span class="line">解压后将static文件放到\themes\landscape\source路径下</span><br></pre></td></tr></table></figure><p>完成配置。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>个人更加喜欢NeedMoreShare2。使用命令一顿操作，配置简洁优雅，让人心情愉悦。百度分享，由于does not support https问题，破坏了轮子的使用平滑度，中间还需要找方案解决问题，让惜时如金的程序狗有点不爽！</p><p>（以上为个人操作，仅供参考！）</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-上手</title>
      <link href="/2019/01/08/Hexo-%E4%B8%8A%E6%89%8B/"/>
      <url>/2019/01/08/Hexo-%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<img src="/2019/01/08/Hexo-上手/image1.jpg" title="This is an example image"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>高中老师曾说过一句话：“一听就懂，一看就会，一做就错”，来形容学生眼高手低。编程做项目亦是如此。写Blog不（就）是为了BG，而是检验自己对项目技术理解程度。</p><a id="more"></a><p>目前比较流行的Blog框架如下：</p><ul><li>Jekyll (<a href="https://jekyllrb.com/" target="_blank" rel="noopener">https://jekyllrb.com/</a>)</li><li>hugo (<a href="http://www.gohugo.org/" target="_blank" rel="noopener">http://www.gohugo.org/</a>)</li><li>django (<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">https://www.djangoproject.com/</a>)</li><li>hexo (<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a>)</li></ul><p>这里选择Hexo（别问为什么，反正我是没收广告费的）。当然，如果你是python学习者,请选择django。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><h2 id="设置npm镜像"><a href="#设置npm镜像" class="headerlink" title="设置npm镜像"></a>设置npm镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry &quot;https://registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure><h2 id="Github账号"><a href="#Github账号" class="headerlink" title="Github账号"></a>Github账号</h2><h2 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：比如你的github账号为zhanshang，那么仓库名应为zhangshang.github.io</span><br></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><h2 id="公匙添加到github上"><a href="#公匙添加到github上" class="headerlink" title="公匙添加到github上"></a>公匙添加到github上</h2><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 安装hexo，我这里是cd进D:\DEV\myhexo路径安装的hexo,可根据自己习惯安装。</span><br><span class="line">npm install hexo-cli g</span><br><span class="line"># 初始化博客文件夹</span><br><span class="line">hexo init blog</span><br><span class="line"># 切换到该路径</span><br><span class="line">cd blog</span><br><span class="line"># 安装hexo的扩展插件</span><br><span class="line">npm install</span><br><span class="line"># 安装其它插件</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p>打开终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 生成静态页面</span><br><span class="line">hexo generate</span><br><span class="line"># 开启本地服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，地址栏中输入：<strong><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></strong></p><h1 id="将hexo博客上传到github上"><a href="#将hexo博客上传到github上" class="headerlink" title="将hexo博客上传到github上"></a>将hexo博客上传到github上</h1><p>1.先进入D:\DEV\myhexo\blog路径下，打开_config.yml配置文件，将deploy修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Deployment 注释</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  # 类型</span><br><span class="line">  type: git</span><br><span class="line">  # 仓库</span><br><span class="line">  repo: git@github.com:github_name/github_name.github.io.git</span><br><span class="line">  # 分支</span><br><span class="line">  branch: master</span><br><span class="line">  </span><br><span class="line">注意：冒号后面都要有空格</span><br></pre></td></tr></table></figure><p>2.在终端依次输入如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 清空静态页面</span><br><span class="line">hexo clean</span><br><span class="line"># 生成静态页面</span><br><span class="line">hexo generate</span><br><span class="line"># 部署 </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>3.在浏览器地址栏输入：<a href="http://github_name.github.io,正常无误即可看见部署好的Blog页面。" target="_blank" rel="noopener">http://github_name.github.io,正常无误即可看见部署好的Blog页面。</a></p><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>当运行hexo clean 后，此D:\DEV\myhexo\blog路径下的public文件将被清除；</p><p>运行hexo generate后，将重新生成public文件；</p><p>如果需要修改title /subtitle 等信息，进入D:\DEV\myhexo\blog路径下的_config.yml文件修改；</p><p>如果需要更换主题，进入D:\DEV\myhexo\blog路径下的themes文件操作，但别忘记更改_config.yml文件中的theme: landscape值。</p><h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p>一顿操作下来，Hexo给人的感觉还是非常爽的！简单易上手，hexo clean,hexo g,hexo d,三步操作，敲着完全停不下来（有种爱上写博客的假象）。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
