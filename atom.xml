<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mao Jing</title>
  
  <subtitle>匮乏即是富足，自律产生喜悦！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-21T04:54:39.813Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mao Jing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Compose-概念</title>
    <link href="http://yoursite.com/2019/01/21/Docker-Compose-%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/01/21/Docker-Compose-概念/</id>
    <published>2019-01-21T04:54:39.000Z</published>
    <updated>2019-01-21T04:54:39.813Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker-常用命令</title>
    <link href="http://yoursite.com/2019/01/20/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/01/20/Docker-常用命令/</id>
    <published>2019-01-20T07:45:43.000Z</published>
    <updated>2019-01-20T07:54:28.741Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.查看 Docker 版本：docker version</span><br><span class="line"></span><br><span class="line">2.从 Docker 文件构建 Docker 映像：docker build -t image-name docker-file-location</span><br><span class="line"></span><br><span class="line">3.运行 Docker 映像：docker run -d image-name</span><br><span class="line"></span><br><span class="line">4.查看可用的 Docker 映像：docker images</span><br><span class="line"></span><br><span class="line">5.查看最近的运行容器：docker ps -l</span><br><span class="line"></span><br><span class="line">6.查看所有正在运行的容器：docker ps -a</span><br><span class="line"></span><br><span class="line">7.停止运行容器：docker stop container_id</span><br><span class="line"></span><br><span class="line">8.删除一个镜像：docker rmi image-name</span><br><span class="line"></span><br><span class="line">9.删除所有镜像：docker rmi $(docker images -q)</span><br><span class="line"></span><br><span class="line">10.强制删除所有镜像：docker rmi -r $(docker images -q)</span><br><span class="line"></span><br><span class="line">11.删除所有虚悬镜像：docker rmi $(docker images -q -f dangling=true)</span><br><span class="line"></span><br><span class="line">12.删除所有容器：docker rm $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line">13.进入 Docker 容器：docker exec -it container-id /bin/bash</span><br><span class="line"></span><br><span class="line">14.查看所有数据卷：docker volume ls</span><br><span class="line"></span><br><span class="line">15.删除指定数据卷：docker volume rm [volume_name]</span><br><span class="line"></span><br><span class="line">16.删除所有未关联的数据卷：docker volume rm $(docker volume ls -qf dangling=true)</span><br><span class="line"></span><br><span class="line">17.从主机复制文件到容器：sudo docker cp host_path containerID:container_path</span><br><span class="line"></span><br><span class="line">18.从容器复制文件到主机：sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这里将列举比较常用的Docker命令。
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="常用命令" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker-MySql</title>
    <link href="http://yoursite.com/2019/01/20/Docker-MySql/"/>
    <id>http://yoursite.com/2019/01/20/Docker-MySql/</id>
    <published>2019-01-20T03:19:12.000Z</published>
    <updated>2019-01-21T06:59:08.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>我们可先使用如下命令，查询Docker Hub上关于MySql相关信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/mysql# docker search mysql</span><br></pre></td></tr></table></figure><h1 id="获取MySql"><a href="#获取MySql" class="headerlink" title="获取MySql"></a>获取MySql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/mysql# docker pull mysql</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">177e7ef0df69: Pull complete </span><br><span class="line">cac25352c4c8: Pull complete </span><br><span class="line">8585afabb40a: Pull complete </span><br><span class="line">1e4af4996053: Pull complete </span><br><span class="line">c326522894da: Pull complete </span><br><span class="line">9020d6b6b171: Pull complete </span><br><span class="line">55eb37ec6e5f: Pull complete </span><br><span class="line">37f3f3d72fbd: Pull complete </span><br><span class="line">03f098d64268: Pull complete </span><br><span class="line">46a52a54cfe9: Pull complete </span><br><span class="line">202bc662895d: Pull complete </span><br><span class="line">46014f07b258: Pull complete </span><br><span class="line">Digest: sha256:196c04e1944c5e4ea3ab86ae5f78f697cf18ee43865f25e334a6ffb1dbea81e6</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/mysql# docker run -p 3306:3306 --name mysql \</span><br><span class="line"> -v /usr/local/docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line"> -v /usr/local/docker/mysql/logs:/var/log/mysql \</span><br><span class="line"> -v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line"> -d mysql</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>-p 3306:3306</code>：将容器的3306端口映射到主机的3306端口</li><li><code>-v /usr/local/docker/mysql/conf:/etc/mysql/conf.d</code>：将主机当前目录下的 conf 挂载到容器的 <code>/etc/mysql/conf.d</code></li><li><code>-v /usr/local/docker/mysql/logs:/var/log/mysql</code>：将主机当前目录下的 logs 目录挂载到容器的<code>/var/log/mysql</code></li><li><code>-v /usr/local/docker/mysql/data:/var/lib/mysql</code>：将主机当前目录下的 data 目录挂载到容器的 <code>/var/lib/mysql</code></li><li><code>-e MYSQL\_ROOT\_PASSWORD=123456</code>：初始化root用户的密码</li></ul><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker ps</span><br></pre></td></tr></table></figure><table><thead><tr><th>CONTAINER ID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>3d04b5c68a08</td><td>mysql</td><td>“docker-entrypoint.s…”</td><td>8 minutes ago</td><td>Up 8 minutes</td><td>0.0.0.0:3306-&gt;3306/tcp, 33060/tcp</td><td>mysql</td></tr></tbody></table><p>使用SQLyog链接不上，并抛出如下问题：</p><img src="/2019/01/20/Docker-MySql/mysqlError1.jpg"><p>原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password</span><br></pre></td></tr></table></figure><p>方案：</p><p>我们把mysql用户登录密码加密规则还原成mysql_native_password。</p><p>步骤：</p><p>1.进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 3d0 bash</span><br></pre></td></tr></table></figure><p>2.链接mysql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@3d04b5c68a08:/# mysql -uroot -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>3.配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER  USER  &apos;root&apos;  IDENTIFIED  WITH  mysql_native_password  BY  &apos;123456&apos;;</span><br></pre></td></tr></table></figure><p>5.然后再使用SQLyog测试链接，成功！</p><img src="/2019/01/20/Docker-MySql/mysqlError2.jpg">]]></content>
    
    <summary type="html">
    
      这里将记录在Docker上构建MySql。
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Positive Discipline-初衷</title>
    <link href="http://yoursite.com/2019/01/19/Positive-Discipline-%E5%88%9D%E8%A1%B7/"/>
    <id>http://yoursite.com/2019/01/19/Positive-Discipline-初衷/</id>
    <published>2019-01-19T06:52:49.000Z</published>
    <updated>2019-01-21T04:43:50.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    在《孩子，把你的手给我》书中这样说：我们不但要有一颗爱孩子的心，更要懂得如何去爱孩子。我知道这句话前部分是为人父母最基本的品质，但重点在后面一部分，如何去爱孩子？重点在于爱的表现方式上，最典型笼统式的两种常见方式是溺爱和惩罚，当然这都是极端，是不太可取的。但准爸妈们是否有过自问：我该如何正确的爱孩子？</p><h1 id="我的初衷"><a href="#我的初衷" class="headerlink" title="我的初衷"></a>我的初衷</h1><p>​    16年5月15日，注定是我人生意义非凡的一天—大女儿出生。记得当时，产房外，得知母女平安后，我激动的哭了出来。</p><p>​    女儿出生，给我们两个原生家庭带来了无限幸福感。刚开始，亲戚朋友见了面，都会相互恭喜，恭喜什么？无外乎就是，恭喜你做爷爷，做奶奶，做伯伯……到后来，时间稍长些，新奇感便也渐渐淡下来，更多便是孩子如何与自己与周遭相处的事儿。</p><p>​    陪伴孩子成长中，我和老婆刚开始不察觉，但现在来看，原来我们也变了很多。孩子出生后，老婆变各种育儿科普–育儿书籍.网站论坛。慢慢也形成了自己一套育儿理论方式，想在同辈里的宝妈们，大多会主动向她请教育儿经。当然，我只是站在老公的角度看待这些客观现象，但老婆做出这些学习的行动以及能坚持这些行为的内在驱动力，似乎应该是很少去尝试理解（但这也成为现在打心底佩服老婆的原因）。</p><p>​    我心里，只有未来。关于宝贝的未来，我思考了很多，似乎得出的结论只有一个：我得好好挣钱！一个总是思考未来的爸爸，必然会忽视很多当下的细节！这估计也是偶尔跟老婆在关于育儿方面起争执的症结所在吧！</p><p>​    最近，女儿慢慢成长了，2岁半，上了蒙氏幼儿园。在学校老师们用心的喂了点“盐”，经常在家就是：爸爸，没经过我的允许，你不可以怎样怎样。当然我是非常认可老师们教会宝贝们正确表达自己。只是很多时候，孩子会用“哭闹”这种方式来表达自己的诉求，不对，准确说是，我有种被要挟然后被打败的感觉！</p><p>​    和孩子的博弈每天都会上演，剧情一般是这样。</p><p>​    “爸爸，我要…….(需求)”</p><p>​    “不可以”</p><p>​    “呜呜呜……啊啊啊啊啊……”</p><p>​    如果需求正常，到好，满足便是，父女相安无事！但宝贝经常会提一些不合时，不合适的要求，作为爸爸能全部满足吗？当然是不可以。可越是孩子长大，精力越盛，面对她的各种哭诉，我的确是疲于应对，但自己的宝贝，不能说采取恐吓威胁，武力解决，亦或是百依百顺，这样子，实在不敢想象，今后会教出怎样的孩子。</p><p>​    “你要用和善而坚定的态度拒绝宝贝的不合理需求…..”，老婆对我说过的这句话，我一直没深究它的出处。也就是今天我得到了答案，在老婆之前看过的一本书里–《Positive Discipline 正面管教》。</p><p>​    《Positive Discipline 正面管教》是由美籍作家Jane Nelsen(简.尼尔森)著，由中国作家王冰译。简.尼尔森是一名教育学博士，杰出的心理学家，教育家，反正是个“大家”，当然作者的社会荣誉，倒不是我最关心的，当我看到介绍，作者是7个孩子的母亲，22个孩子的祖母或外祖母，还是两个孩子的曾祖母，我开始好奇了！作者是如何面对和处理与子女关系的。</p><p>​    书中译者王冰在使用了《Positive Discipline 正面管教》里面提及的系列正面管教方法后，按她自己的原话”我很快发现自己可以不再需要’克制’自己，开始自然而然地‘出乎本能‘地改变着我和孩子之间的相处模式。孩子也因此变得更配合，更可爱。我如饥似渴地读下去，不知不觉进入一个豁然开朗的新天地”。译者王冰的自述，不正是我内心所渴望的吗。</p><p>​    另外译者还提及翻译《Positive Discipline 正面管教》一书的初衷，当然我的思想境界可能还未达到她那个高度，用我自己的话来说“我希望，使用有效的，正面的方法管教孩子，让孩子在自信，自立的快乐环境中健康成长，把良好的行为品德，有益的社会技能深深植入孩子心底”。这也是我的初衷！</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>​    思考下：如何不惩罚，不骄纵地有效管教孩子！</p><p>​    </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      在《孩子，把你的手给我》书中这样说：我们不但要有一颗爱孩子的心，更要懂得如何去爱孩子。我知道这句话前部分是为人父母最基本的品质，但重点在后面一部分，如何去爱孩子？重点在于爱，表现的方式上，最典型笼统式的两种常见方式是溺爱和惩罚，当然这都是两种极端，我们都是不赞同的。但准爸妈们是否有过自问：我该如何正确的爱孩子？
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Positive Discipline" scheme="http://yoursite.com/tags/Positive-Discipline/"/>
    
      <category term="正面管教" scheme="http://yoursite.com/tags/%E6%AD%A3%E9%9D%A2%E7%AE%A1%E6%95%99/"/>
    
      <category term="育儿" scheme="http://yoursite.com/tags/%E8%82%B2%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Tomcat</title>
    <link href="http://yoursite.com/2019/01/19/Docker-Tomcat/"/>
    <id>http://yoursite.com/2019/01/19/Docker-Tomcat/</id>
    <published>2019-01-19T06:50:12.000Z</published>
    <updated>2019-01-20T03:15:58.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Hub上查找Tomcat"><a href="#Docker-Hub上查找Tomcat" class="headerlink" title="Docker Hub上查找Tomcat"></a>Docker Hub上查找Tomcat</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/tomcat# docker search tomcat</span><br><span class="line">NAME                                       DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">tomcat                                     Apache Tomcat is an open source implementati…   2259                [OK]                </span><br><span class="line">tomee                                      Apache TomEE is an all-Apache Java EE certif…   60                  [OK]                </span><br><span class="line">dordoka/tomcat                             Ubuntu 14.04, Oracle JDK 8 and Tomcat 8 base…   51                                      [OK]</span><br><span class="line">davidcaste/alpine-tomcat                   Apache Tomcat 7/8 using Oracle Java 7/8 with…   34                                      [OK]</span><br><span class="line">bitnami/tomcat                             Bitnami Tomcat Docker Image                     27                                      [OK]</span><br><span class="line">consol/tomcat-7.0                          Tomcat 7.0.57, 8080, &quot;admin/admin&quot;              16                                      [OK]</span><br><span class="line">cloudesire/tomcat                          Tomcat server, 6/7/8                            14                                      [OK]</span><br><span class="line">tutum/tomcat                               Base docker image to run a Tomcat applicatio…   11                                      </span><br><span class="line">meirwa/spring-boot-tomcat-mysql-app        a sample spring-boot app using tomcat and My…   10                                      [OK]</span><br><span class="line">aallam/tomcat-mysql                        Debian, Oracle JDK, Tomcat &amp; MySQL              10                                      [OK]</span><br><span class="line">jeanblanchard/tomcat                       Minimal Docker image with Apache Tomcat         8                                       </span><br><span class="line">arm32v7/tomcat                             Apache Tomcat is an open source implementati…   6                                       </span><br><span class="line">rightctrl/tomcat                           CentOS , Oracle Java, tomcat application ssl…   3                                       [OK]</span><br><span class="line">maluuba/tomcat7-java8                      Tomcat7 with java8.                             3                                       </span><br><span class="line">fabric8/tomcat-8                           Fabric8 Tomcat 8 Image                          2                                       [OK]</span><br><span class="line">amd64/tomcat                               Apache Tomcat is an open source implementati…   2                                       </span><br><span class="line">arm64v8/tomcat                             Apache Tomcat is an open source implementati…   2                                       </span><br><span class="line">99taxis/tomcat7                            Tomcat7                                         1                                       [OK]</span><br><span class="line">cfje/tomcat-resource                       Tomcat Concourse Resource                       0                                       </span><br><span class="line">1and1internet/debian-9-java-8-tomcat-8.5   Our tomcat 8.5 image                            0                                       [OK]</span><br><span class="line">s390x/tomcat                               Apache Tomcat is an open source implementati…   0                                       </span><br><span class="line">jelastic/tomcat                            An image of the Tomcat Java application serv…   0                                       </span><br><span class="line">picoded/tomcat7                            tomcat7 with jre8 and MANAGER_USER / MANAGER…   0                                       [OK]</span><br><span class="line">oobsri/tomcat8                             Testing CI Jobs with different names.           0                                       </span><br><span class="line">swisstopo/service-print-tomcat             backend tomcat for service-print &quot;the true, …   0</span><br></pre></td></tr></table></figure><h1 id="拉取官方镜像"><a href="#拉取官方镜像" class="headerlink" title="拉取官方镜像"></a>拉取官方镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/tomcat# docker pull tomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/tomcat</span><br><span class="line">cd8eada9c7bb: Pull complete </span><br><span class="line">c2677faec825: Pull complete </span><br><span class="line">fcce419a96b1: Pull complete </span><br><span class="line">00d7fcb5828a: Pull complete </span><br><span class="line">f8c860563d60: Pull complete </span><br><span class="line">46f754145d12: Pull complete </span><br><span class="line">bff15a87739e: Pull complete </span><br><span class="line">6b5d3f0336b9: Pull complete </span><br><span class="line">1d858972966c: Pull complete </span><br><span class="line">4f2dc2e148d0: Pull complete </span><br><span class="line">db18a2f7d48d: Pull complete </span><br><span class="line">Digest: sha256:fd162e0f238deae5b7028934377abc40658e82d7c9b2a0038546466bb0d89e6d</span><br><span class="line">Status: Downloaded newer image for tomcat:latest</span><br></pre></td></tr></table></figure><h1 id="运行Tomcat"><a href="#运行Tomcat" class="headerlink" title="运行Tomcat"></a>运行Tomcat</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/docker/tomcat# docker run --name tomcat -p 8080:8080 -d tomcat</span><br><span class="line">dfdccb5fb79403a3111d99f381afc9ad92a1aeb7e06d6f51846c142a6ebced87</span><br><span class="line">root@mkin:/usr/local/docker/tomcat# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">dfdccb5fb794        tomcat              &quot;catalina.sh run&quot;   11 seconds ago      Up 10 seconds       0.0.0.0:8080-&gt;8080/tcp   tomcat</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>打开浏览器输入：<code>http://192.168.20.141:8080/</code>(以自己虚拟机ip地址为准)。显示如下：</p><img src="/2019/01/19/Docker-Tomcat/image1.jpg">]]></content>
    
    <summary type="html">
    
      这里我们将在Docker上构建Tomcat镜像，并将其运行起来。
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Docker-仓库</title>
    <link href="http://yoursite.com/2019/01/19/Docker-%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2019/01/19/Docker-仓库/</id>
    <published>2019-01-19T06:49:50.000Z</published>
    <updated>2019-01-19T10:10:10.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><a id="more"></a><h1 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>地址： <a href="https://cloud.docker.com" target="_blank" rel="noopener">https://cloud.docker.com</a></p><p>可以通过执行 <code>docker login</code> 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p><p>你可以通过 <code>docker logout</code> 退出登录。</p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>以centos为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search centos</span><br><span class="line"></span><br><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><p>用户也可以在登录后通过 <code>docker push</code> 命令来将自己的镜像推送到 Docker Hub。</p><p>以下命令中的 <code>username</code> 请替换为你的 Docker 账号用户名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag ubuntu:17.10 username/ubuntu:17.10</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">$ docker push username/ubuntu:17.10</span><br><span class="line"></span><br><span class="line">$ docker search username</span><br></pre></td></tr></table></figure><h1 id="Docker-私有仓库"><a href="#Docker-私有仓库" class="headerlink" title="Docker 私有仓库"></a>Docker 私有仓库</h1><h2 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h2><p>你可以通过获取官方 <code>registry</code> 镜像来运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure><p>这将使用官方的 <code>registry</code> 镜像来启动私有仓库。默认情况下，仓库会被创建在容器的 <code>/var/lib/registry</code> 目录下。你可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 <code>/opt/data/registry</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /opt/data/registry:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><h2 id="私有仓库操作"><a href="#私有仓库操作" class="headerlink" title="私有仓库操作"></a>私有仓库操作</h2><p>创建好私有仓库之后，就可以使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 <code>127.0.0.1:5000</code>。</p><p>先在本机查看已有的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY     TAG       IMAGE ID      CREATED     VIRTUAL SIZE</span><br><span class="line">ubuntu       latest     ba5877dc9bec  6 weeks ago     192.7 MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker tag</code> 将 <code>ubuntu:latest</code> 这个镜像标记为 <code>127.0.0.1:5000/ubuntu:latest</code>。</p><p>格式为 <code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br><span class="line">127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker push</code> 上传标记的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker push 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">The push refers to repository [127.0.0.1:5000/ubuntu]</span><br><span class="line">373a30c24545: Pushed</span><br><span class="line">a9148f5200b0: Pushed</span><br><span class="line">cdd3de0940ab: Pushed</span><br><span class="line">fc56279bbb33: Pushed</span><br><span class="line">b38367233d37: Pushed</span><br><span class="line">2aebd096e0e2: Pushed</span><br><span class="line">latest: digest: sha256:fe4277621f10b5026266932ddf760f5a756d2facd505a94d2da12f4f52f71f5a size: 1568</span><br></pre></td></tr></table></figure><p>用 <code>curl</code> 查看仓库中的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"ubuntu"</span>]&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到 <code>{&quot;repositories&quot;:[&quot;ubuntu&quot;]}</code>，表明镜像已经被成功上传了。</p><p>先删除已有镜像，再尝试从私有仓库中下载这个镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm 127.0.0.1:5000/ubuntu:latest</span><br><span class="line"></span><br><span class="line">$ docker pull 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">Pulling repository 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">ba5877dc9bec: Download complete</span><br><span class="line">511136ea3c5a: Download complete</span><br><span class="line">9bad880da3d2: Download complete</span><br><span class="line">25f11f5fb0cb: Download complete</span><br><span class="line">ebc34468f71d: Download complete</span><br><span class="line">2318d26665ef: Download complete</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.Ubuntu 16.04+, Debian 8+, centos 7</p><p>对于使用 <code>systemd</code> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"192.168.199.100:5000"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.如果你不想使用 <code>127.0.0.1:5000</code> 作为仓库地址，比如想让本网段的其他主机也能把镜像推送到私有仓库。你就得把例如 <code>192.168.199.100:5000</code> 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。</p><p>这是因为 Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制，或者查看下一节配置能够通过 <code>HTTPS</code> 访问的私有仓库。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前 Docker 官方维护了一个公共仓库 &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker Hub&lt;/a&gt;，其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Docker Hub" scheme="http://yoursite.com/tags/Docker-Hub/"/>
    
  </entry>
  
  <entry>
    <title>Docker-容器</title>
    <link href="http://yoursite.com/2019/01/19/Docker-%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/01/19/Docker-容器/</id>
    <published>2019-01-19T06:49:30.000Z</published>
    <updated>2019-01-19T09:55:50.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>概念性的内容前面已经做过铺垫，这里不再赘述，直接进入实操！</p><a id="more"></a><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>主要为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br></pre></td></tr></table></figure><p>启动一个bash终端，允许用户进行交互：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker images</span><br><span class="line">REPOSITORY     TAG         IMAGE ID        CREATED           SIZE</span><br><span class="line">nginx          v3        fcd07ecaa685    33 minutes ago      109MB</span><br><span class="line">nginx         latest     7042885a156a     3 weeks ago        109MB</span><br><span class="line">hello-world   latest     4ab4c602aa5e     4 months ago       1.84kB</span><br><span class="line"></span><br><span class="line">root@mkin:/usr/local/nginx# docker run -t -i fcd07ecaa685  /bin/bash</span><br><span class="line">root@58193836306b:/#</span><br></pre></td></tr></table></figure><p>退出容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@58193836306b:/# exit   </span><br><span class="line">exit</span><br><span class="line">root@mkin:/usr/local/nginx#</span><br></pre></td></tr></table></figure><p>另外可通过如下命令将一个已经终止的容器启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container start</span><br></pre></td></tr></table></figure><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p><h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p>我们可使用<code>docker container stop</code>来终止一个容器。</p><p>另外，只启动了一个终端的容器，通过 <code>exit</code> 命令或 <code>Ctrl+d</code>来退出终端时，所创建的容器立刻终止。</p><p>通过如下命令查看终止状态的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure><p>然后再通过<code>docker container start</code>来启动容器，另外<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker exec -it 58193836306b /bin/bash</span><br><span class="line">root@58193836306b:/# exit</span><br><span class="line">exit</span><br><span class="line">root@mkin:/usr/local/nginx# docker container ls -a</span><br></pre></td></tr></table></figure><p>使用这种方式进入容器，然后使用<code>exit</code>推出容器，不会导致容器停止。</p><p>而另外一种<code>attach</code>当使用<code>exit</code>退出容器时，会导致容器停止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker attach 58193836306b</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;概念性的内容前面已经做过铺垫，这里不再赘述，直接进入实操！&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker-镜像</title>
    <link href="http://yoursite.com/2019/01/19/Docker-%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/01/19/Docker-镜像/</id>
    <published>2019-01-19T06:49:02.000Z</published>
    <updated>2019-01-19T09:35:39.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面已经介绍了什么是Docker，为什么要使用Docker,以及其它一些关于Docker的相关概念，目的是加身对Docker的理解。其中就有介绍过Docker镜像这个概念（这里就不展开说），接下来我们要知道如何使用Docker镜像，以及如何使用Dockerfile定制镜像。</p><a id="more"></a><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.地址格式一般是 &lt;域名/IP&gt;[:端口号] ，默认地址是Docker Hub；</p><p>2.仓库名是两段式名称，即&lt;用户名&gt;/&lt;软件名&gt;,对于Docker Hub，如果不给出用户名，则默认为library，也即是官方镜像。</p><p>例子：获取ubuntu镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker pull ubuntu:16.04</span><br><span class="line">16.04: Pulling from library/ubuntu</span><br><span class="line">b849b56b69e7: Pull complete </span><br><span class="line">42986ef25bcd: Pull complete </span><br><span class="line">d927c1b717ec: Pull complete </span><br><span class="line">15b86ea20233: Pull complete </span><br><span class="line">Digest: sha256:b967b9f2a5625231a22db642609e61b7b1a5481128f51fe771e91bb92e0a35d0</span><br><span class="line">Status: Downloaded newer image for ubuntu:16.04</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.仔细观察下载过程，是符合前面提及的分层存储的概念，终端显示了每一层的ID的前12位。另外下载完成后也给出了镜像完整的sha256摘要。</p><p>2.如果下载镜像缓慢，记得参考前面，配置加速。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>这里我们以前面获取的ubuntu镜像为基础，启动并运行一个容器。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker run -it --rm ubuntu:16.04 bash  </span><br><span class="line">root@d22246635fdc:/# cat /etc/os-release</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;16.04.5 LTS (Xenial Xerus)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 16.04.5 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;16.04&quot;</span><br><span class="line">HOME_URL=&quot;http://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">VERSION_CODENAME=xenial</span><br><span class="line">UBUNTU_CODENAME=xenial</span><br><span class="line">root@d22246635fdc:/# </span><br><span class="line">root@d22246635fdc:/# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.其中docker run 便是运行容器的命令；</p><p>2.-it: -i是交互式操作；-t是终端；</p><p>3.-rm: 在容器退出后将其删除，避免测试时，浪费空间；</p><p>4.ubuntu：16.04： 是指用ubuntu：16.04镜像为基础来启动容器；</p><p>5.bash是放在镜像名后的命令，表示我们希望有交互式shell，因此使用的是bash;</p><p>6.进入容器后，我们执行了cat /etc/os-release命令，这是查看当前系统版本的命令。</p><p>7.exit:退出容器。</p><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              16.04               b0ef3016420a        3 weeks ago         117MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        4 months ago        1.84kB</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.体积：ubuntu在Docker Hub上和这里显示的体积大小是不一样的。这是因为这里显示的是镜像下载到本地展开后的大小，Docker Hub上显示的是压缩后的大小。</p><p>另外需要注意的是，这里列出的镜像体积总和并不一定是镜像实际占用的体积，因为Docker镜像采用的是多层存储结构，可以继承，复用，所以不同镜像可能使用相同的镜像基础，所以这里列出的镜像体积可能比实际镜像占用的体积大些。</p><p>查看镜像，容器，数据卷所占空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker system df</span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              2                   1                   116.7MB             116.7MB (99%)</span><br><span class="line">Containers          1                   0                   0B                  0B</span><br><span class="line">Local Volumes       0                   0                   0B                  0B</span><br><span class="line">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure><h2 id="dangling-image"><a href="#dangling-image" class="headerlink" title="dangling image"></a>dangling image</h2><p>使用docker image ls命令查看镜像时如果有显示为<code>&lt;none&gt;</code>的镜像，即为<code>dangling image</code>。出现原因：</p><ol><li><p><code>docker pull</code> 可能导致这种情况;</p></li><li><p><code>docker build</code> 也同样可以导致这种现象。</p><p>由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。</p></li></ol><p>可使用如下命令专门显示<code>dangling image</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -f dangling=true</span><br></pre></td></tr></table></figure><p>删除<code>dangling image</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><h2 id="显示所有包括中间层在内的镜像"><a href="#显示所有包括中间层在内的镜像" class="headerlink" title="显示所有包括中间层在内的镜像"></a>显示所有包括中间层在内的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -a</span><br></pre></td></tr></table></figure><p>注意：加速镜像构建、重复利用资源，Docker 会利用中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果想显示中间层镜像，需要使用<code>-a</code>参数。</p><p>这样会有很多没有标签的镜像，与前面的<code>dangling image</code>不同，这些无标签的镜像都是中间层镜像，是其它镜像所依赖的镜像，不应该被删除。</p><h2 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls ubuntu</span><br></pre></td></tr></table></figure><h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><p>先列出镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              16.04               b0ef3016420a        3 weeks ago         117MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        4 months ago        1.84kB</span><br></pre></td></tr></table></figure><p>使用<code>imgae ID</code>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:~# docker image rm b0e</span><br><span class="line">Untagged: ubuntu:16.04</span><br><span class="line">Untagged: ubuntu@sha256:b967b9f2a5625231a22db642609e61b7b1a5481128f51fe771e91bb92e0a35d0</span><br><span class="line">Deleted: sha256:b0ef3016420a4052400d0a36f5144ebdee5d358ef6942afee072517b5a94168c</span><br><span class="line">Deleted: sha256:7c42fc68785f05435c7d0a15ab5eba645dd51431ff85ba8c81aac71b6d7fa676</span><br><span class="line">Deleted: sha256:9ae10a8fb5d0419283b7d8ede59c6cb17df79c1bc0f0367ad5d5fd5f9040b9b7</span><br><span class="line">Deleted: sha256:8c7764429ac5850455be6b16dcbf2f3e916522ea400c90133b498701debfe3a2</span><br><span class="line">Deleted: sha256:8241afc74c6f5ca20c3bd7f3ddb3e5621d637ee85aaf40de440bf465b2a9984f</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.ID可以是完整的，也可以是ID的前三位即可;</p><p>2.也可以使用<code>docker image rm &lt;仓库名如centos&gt;</code>;</p><p>3.也可食用<code>docker image rm 镜像摘要</code>。</p><p>4.删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><h2 id="配合docker-image-ls"><a href="#配合docker-image-ls" class="headerlink" title="配合docker image ls"></a>配合docker image ls</h2><p>删除所有仓库名为 <code>redis</code> 的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure><p>删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="Dockerfile定制镜像"><a href="#Dockerfile定制镜像" class="headerlink" title="Dockerfile定制镜像"></a>Dockerfile定制镜像</h2><p>以定制<code>ngnix</code>镜像为例：</p><p>1.在<code>/usr/local/</code>路径下创建<code>nginx</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nginx</span><br></pre></td></tr></table></figure><p>2.进入<code>nginx</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx</span><br></pre></td></tr></table></figure><p>3.创建并编辑<code>Dockerfile</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p>编辑内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>4.构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/<span class="built_in">local</span>/nginx<span class="comment"># docker build -t nginx:v3 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM nginx</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">177e7ef0df69: Pull complete </span><br><span class="line">ea57c53235df: Pull complete </span><br><span class="line">bbdb1fbd4a86: Pull complete </span><br><span class="line">Digest: sha256:b543f6d0983fbc25b9874e22f4fe257a567111da96fd1d8f1b44315f1236398c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line"> ---&gt; 7042885a156a</span><br><span class="line">Step 2/2 : RUN <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 498081e4a8f3</span><br><span class="line">Removing intermediate container 498081e4a8f3</span><br><span class="line"> ---&gt; fcd07ecaa685</span><br><span class="line">Successfully built fcd07ecaa685</span><br><span class="line">Successfully tagged nginx:v3</span><br></pre></td></tr></table></figure><p>5.查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker image ls</span><br><span class="line">REPOSITORY          TAG         IMAGE ID        CREATED             SIZE</span><br><span class="line">nginx               v3        fcd07ecaa685     9 seconds ago       109MB</span><br></pre></td></tr></table></figure><p>6.运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker run --name mynginx -d fcd07ecaa685</span><br><span class="line">eade36419390f809357fbe7eaa93df2448b64a8c5928315972552fb902cc935f</span><br></pre></td></tr></table></figure><p>7.运行容器查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@mkin:/usr/local/nginx# docker ps</span><br></pre></td></tr></table></figure><table><thead><tr><th>CONTAINER ID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>eade36419390</td><td>fcd07ecaa685</td><td>“nginx -g’daemon of…”</td><td>54 seconds ago</td><td>Up 52 seconds</td><td>80/tcp</td><td>mynginx</td></tr></tbody></table><h2 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h2><p>请参考：</p><p>Dockerfie 官方文档](<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面已经介绍了什么是Docker，为什么要使用Docker,以及其它一些关于Docker的相关概念，目的是加身对Docker的理解。其中就有介绍过Docker镜像这个概念（这里就不展开说），接下来我们要知道如何使用Docker镜像，以及如何使用Dockerfile定制镜像。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="镜像" scheme="http://yoursite.com/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>SSH-Win10使用SSH免密拉取GitLab代码</title>
    <link href="http://yoursite.com/2019/01/17/SSH-Win10%E4%BD%BF%E7%94%A8SSH%E5%85%8D%E5%AF%86%E6%8B%89%E5%8F%96GitLab%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/01/17/SSH-Win10使用SSH免密拉取GitLab代码/</id>
    <published>2019-01-17T05:42:07.000Z</published>
    <updated>2019-01-17T05:52:58.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>1.打开电脑终端 cd 进入文件路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Git\usr\bin</span><br></pre></td></tr></table></figure><p>2.运行如下密令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;maojing&quot;</span><br><span class="line"></span><br><span class="line">注：后面的用户名根据实际情况填写，只要确保唯一性即可，填什么都可。</span><br></pre></td></tr></table></figure><p>3.终端显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Git\usr\bin&gt;ssh-keygen -trsa -C &quot;maojing&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</span><br><span class="line">Created directory &apos;/c/Users/Administrator/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:NjSd5gVOH+iPNlfqV7eHtp9350ismT7oxEP2eEyEQJY maojing</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|       .+.o..    |</span><br><span class="line">|       .E=.= .   |</span><br><span class="line">|        o.* +    |</span><br><span class="line">|       . +.o  .  |</span><br><span class="line">|        S +o.o   |</span><br><span class="line">|       . =+=+.  o|</span><br><span class="line">|         .==+ ooo|</span><br><span class="line">|         ..oo=+o*|</span><br><span class="line">|         ...=+o=B|</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">C:\Program Files\Git\usr\bin&gt;</span><br></pre></td></tr></table></figure><p>4.获取公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.</span><br><span class="line"></span><br><span class="line">根据这句话即可找到公钥</span><br></pre></td></tr></table></figure><p>5.gitlab后台添加公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击用户-设置-SSH密钥，将上面复制的密钥粘贴进对应的位置，点击add key即可。</span><br></pre></td></tr></table></figure><p>6.ssh免密拉取远端代码到本地代码仓库</p><p>剩余操作详见《gitLab http 操作》一文</p>]]></content>
    
    <summary type="html">
    
      SSH-Win10使用SSH免密拉取GitLab代码
    
    </summary>
    
      <category term="SSH" scheme="http://yoursite.com/categories/SSH/"/>
    
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
      <category term="Win 10" scheme="http://yoursite.com/tags/Win-10/"/>
    
      <category term="rsa" scheme="http://yoursite.com/tags/rsa/"/>
    
  </entry>
  
  <entry>
    <title>SSH-访问远程主机</title>
    <link href="http://yoursite.com/2019/01/17/SSH-%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/01/17/SSH-访问远程主机/</id>
    <published>2019-01-17T05:41:35.000Z</published>
    <updated>2019-01-17T06:40:37.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="口令登录"><a href="#口令登录" class="headerlink" title="口令登录"></a>口令登录</h1><p>如果你是第一次登录对方主机，系统会出现下面的提示：</p><blockquote><p>　　$ ssh root@主机ip</p><p>　　The authenticity of host ‘host (12.18.429.21)’ can’t be established.</p><p>　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</p><p>　　Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p><p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。</p><p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p><p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p><blockquote><p>　　Are you sure you want to continue connecting (yes/no)? yes</p></blockquote><p>系统会出现一句提示，表示host主机已经得到认可。</p><blockquote><p>　　Warning: Permanently added ‘host,12.18.429.21’ (RSA) to the list of known hosts.</p></blockquote><p>然后，会要求输入密码。</p><blockquote><p>　　Password: (enter password)</p></blockquote><p>如果密码正确，就可以登录了。</p><p>当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p><h1 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h1><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>如何生成公钥请参考《SSH-Win10使用SSH免密拉取GitLab代码》，成功生成后再继续下面操作。</p><p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p><blockquote><p>　　$ ssh-copy-id root@主机ip</p></blockquote><p>好了，从此你再登录，就不需要输入密码了。</p><p>如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面”#”注释是否取掉。</p><blockquote><p>　　RSAAuthentication yes<br>　　PubkeyAuthentication yes<br>　　AuthorizedKeysFile .ssh/authorized_keys</p></blockquote><p>然后，重启远程主机的ssh服务。</p><blockquote><p>　　// ubuntu系统<br>　　service ssh restart</p><p>　　// debian系统<br>　　/etc/init.d/ssh restart</p></blockquote>]]></content>
    
    <summary type="html">
    
      ssh口令登陆和公钥登录
    
    </summary>
    
      <category term="SSH" scheme="http://yoursite.com/categories/SSH/"/>
    
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
      <category term="免密登录" scheme="http://yoursite.com/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo-阿里云</title>
    <link href="http://yoursite.com/2019/01/17/hexo-%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    <id>http://yoursite.com/2019/01/17/hexo-阿里云/</id>
    <published>2019-01-17T04:51:54.000Z</published>
    <updated>2019-01-21T04:31:33.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>将博客部署在GitHub上，不失为一种省时，省力，省钱的优选方案，但我打心底还是想部署到阿里云上面，主要出于两方面考虑，一是隐私（当然github也可操作）；二是稳定性，毕竟阿里云服可选国内的。</p><a id="more"></a><p>但事实确实验证上面所说的。博客前面整理了阿里云ECS购买，域名备案等流程（整理来自个人笔记），特别是域名备案，算不上复杂，但走流程是需要提供材料，然后你懂的，就是耐心等待！这也是第一次个人实操域名备案（之前只是买买ECS做开发测试用）。</p><p>且先不管域名备案是否通过，我们先了解下如何将博客部署到阿里云上。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>遇到问题不可怕，可怕的是遇到问题后毫无思绪！</p><p>操作思路是这样，在云主机上搭建git仓库，使用nginx作为网页服务器，最终通过git将hexo博客部署到云主机上。</p><p>系统环境:Ubuntu Server 16.04.1 LTS 64位</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-设置SSH登陆"><a href="#1-设置SSH登陆" class="headerlink" title="1.设置SSH登陆"></a>1.设置SSH登陆</h2><p>关于如何生成密钥请参考《SSH-Win10使用SSH免密拉取GitLab代码》。然后再window命令提示符执行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@云主机ip</span><br></pre></td></tr></table></figure><p>将用户的公钥存储到远程主机上，过程会让你输入远程主机的密码（在购买ECS过程中有设置过的）。</p><ul><li><p>原理：用户将公钥储存在远程主机上。登录时，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回给远程主机。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，允许登录，不再要求密码。</p></li><li><p>注意：在window上执行命令时可能抛出” ‘ssh’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。“问题，那么请在环境变量中添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GIT_HOME:C:\Program Files\Git</span><br><span class="line">然后编辑path新增</span><br><span class="line">%GIT_HOME%\bin</span><br><span class="line">然后在命令提示符输入：</span><br><span class="line">sh</span><br><span class="line">再执行</span><br><span class="line">ssh-copy-id root@云主机ip</span><br><span class="line">将公钥拷贝到远程云主机</span><br></pre></td></tr></table></figure></li><li><p>口令登陆：不用讲公钥拷贝到云主机，直接使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@云主机ip</span><br></pre></td></tr></table></figure><p>然后按照提示输入主机root账户的登陆密码即可。</p></li></ul><h2 id="2-安装Git和nginx"><a href="#2-安装Git和nginx" class="headerlink" title="2.安装Git和nginx"></a>2.安装Git和nginx</h2><p>我这里使用的是Xshell访问云服务器，输入如下密令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install git-core nginx</span><br></pre></td></tr></table></figure><h2 id="3-配置nginx"><a href="#3-配置nginx" class="headerlink" title="3.配置nginx"></a>3.配置nginx</h2><p>执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/blog</span><br></pre></td></tr></table></figure><p>进入nginx配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/blog.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    root /var/www/blog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="4-Git-Hooks"><a href="#4-Git-Hooks" class="headerlink" title="4.Git Hooks"></a>4.Git Hooks</h2><p>我们要将hexo在本地生成的静态博客同步到远程git仓库。那么先要在远程主机上设置Git仓库，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/blog.git &amp;&amp; cd ~/blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><p>配置Hooks脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/www/blog</span><br><span class="line">git clone /root/blog.git /var/www/blog</span><br></pre></td></tr></table></figure><p>解释：先将原有的blog删除，然后从仓库克隆一份到blog文件下。</p><p>注意：如果上面vim进入post-receive文件中，退出时有问题，则按照路径一步步进入到hooks文件夹下，再执行vim post-receive进入，编辑脚本，再保存退出即可。</p><h2 id="5-修改Hexo配置文件"><a href="#5-修改Hexo配置文件" class="headerlink" title="5.修改Hexo配置文件"></a>5.修改Hexo配置文件</h2><p>修改_config.yml如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: root@云主机ip:blog.git</span><br></pre></td></tr></table></figure><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6.部署"></a>6.部署</h2><p>依次输入如下密令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>让后打开浏览器输入：http://云主机ip:8080即可访问。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>将hexo部署到阿里云上相比部署到github上，还是复杂些。除了涉及服务器ECS购买，域名购买绑定，域名备案外，另外技术上还涉及SSH，ngnix，git等的使用。但考虑到阿里云具备的开篇所提到的两点好处，一切都值了！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;将博客部署在GitHub上，不失为一种省时，省力，省钱的优选方案，但我打心底还是想部署到阿里云上面，主要出于两方面考虑，一是隐私（当然github也可操作）；二是稳定性，毕竟阿里云服可选国内的。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="aliyun" scheme="http://yoursite.com/tags/aliyun/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>阿里云-域名备案</title>
    <link href="http://yoursite.com/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88/"/>
    <id>http://yoursite.com/2019/01/16/阿里云-域名备案/</id>
    <published>2019-01-16T06:24:33.000Z</published>
    <updated>2019-01-16T07:20:11.241Z</updated>
    
    <content type="html"><![CDATA[<p>来来来，大家一起看阿里云官方文档！</p><a id="more"></a><p>详细流程请参考阿里云官方文档：</p><p><a href="https://help.aliyun.com/knowledge_detail/36922.html?spm=a2c4g.11186623.6.558.262422f0zyedbj" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/36922.html?spm=a2c4g.11186623.6.558.262422f0zyedbj</a></p><p>注意：</p><p>1.购买的服务器ECS效期须大于3个月；</p><p>2.初审很快，大概半个小时左右就接到95187电话，简单核实了下身份信息；</p><p>3.在提交材料时，手机上显示的是什么“承诺书”，实质上就是“网站备案系信息真实性核验单”；</p><p>4.网站备案系信息真实性核验单，选择电脑上传资料时，变会看见下载链接，以及填写样例图；</p><p>5.另外教程中有如何获取阿里云幕布的操作（简直贴心）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来来来，大家一起看阿里云官方文档！&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="域名备案" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>阿里云-域名购买</title>
    <link href="http://yoursite.com/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0/"/>
    <id>http://yoursite.com/2019/01/16/阿里云-域名购买/</id>
    <published>2019-01-16T06:13:34.000Z</published>
    <updated>2019-01-16T06:21:05.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里使用阿里云iOS手机端购买域名为例。</p><a id="more"></a><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>直接上图不解释！</p><p>step1 :</p><img src="/2019/01/16/阿里云-域名购买/yuming1.png"><p>step2:</p><img src="/2019/01/16/阿里云-域名购买/yuming2.png"><p>step3:</p><img src="/2019/01/16/阿里云-域名购买/yuming3.png"><p>step4:</p><img src="/2019/01/16/阿里云-域名购买/yuming4.png"><p>step5:</p><img src="/2019/01/16/阿里云-域名购买/yuming5.png"><p>step6:</p><img src="/2019/01/16/阿里云-域名购买/yuming6.png">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这里使用阿里云iOS手机端购买域名为例。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="域名购买" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0/"/>
    
  </entry>
  
  <entry>
    <title>阿里云-ECS购买</title>
    <link href="http://yoursite.com/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-ECS%E8%B4%AD%E4%B9%B0/"/>
    <id>http://yoursite.com/2019/01/16/阿里云-ECS购买/</id>
    <published>2019-01-16T05:16:32.000Z</published>
    <updated>2019-01-16T06:09:40.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>阿里云创立于2009年，是<a href="https://baike.baidu.com/item/%E5%85%A8%E7%90%83/2741427" target="_blank" rel="noopener">全球</a>领先的<a href="https://baike.baidu.com/item/%E4%BA%91%E8%AE%A1%E7%AE%97/9969353" target="_blank" rel="noopener">云计算</a>及人工智能科技<a href="https://baike.baidu.com/item/%E5%85%AC%E5%8F%B8" target="_blank" rel="noopener">公司</a>，致力于以在线公共<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1/85523" target="_blank" rel="noopener">服务</a>的<a href="https://baike.baidu.com/item/%E6%96%B9%E5%BC%8F/3616191" target="_blank" rel="noopener">方式</a>，提供<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8/5573311" target="_blank" rel="noopener">安全</a>、可靠的计算和数据处理能力，让计算和人工智能成为普惠<a href="https://baike.baidu.com/item/%E7%A7%91%E6%8A%80/662906" target="_blank" rel="noopener">科技</a>。</p><a id="more"></a><p>阿里云服务着制造、金融、<a href="https://baike.baidu.com/item/%E6%94%BF%E5%8A%A1/533839" target="_blank" rel="noopener">政务</a>、交通、<a href="https://baike.baidu.com/item/%E5%8C%BB%E7%96%97/3232414" target="_blank" rel="noopener">医疗</a>、<a href="https://baike.baidu.com/item/%E7%94%B5%E4%BF%A1/15421798" target="_blank" rel="noopener">电信</a>、能源等众多领域的领军企业，包括<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9A/194673" target="_blank" rel="noopener">中国联通</a>、<a href="https://baike.baidu.com/item/12306" target="_blank" rel="noopener">12306</a>、<a href="https://baike.baidu.com/item/%E4%B8%AD%E7%9F%B3%E5%8C%96/5290131" target="_blank" rel="noopener">中石化</a>、<a href="https://baike.baidu.com/item/%E4%B8%AD%E7%9F%B3%E6%B2%B9/9684575" target="_blank" rel="noopener">中石油</a>、<a href="https://baike.baidu.com/item/%E9%A3%9E%E5%88%A9%E6%B5%A6/14316" target="_blank" rel="noopener">飞利浦</a>、华大基因等大型企业客户，以及微博、<a href="https://baike.baidu.com/item/%E7%9F%A5%E4%B9%8E/4691322" target="_blank" rel="noopener">知乎</a>、锤子科技等明星互联网公司。在天猫<a href="https://baike.baidu.com/item/%E5%8F%8C11" target="_blank" rel="noopener">双11</a>全球狂欢节、12306春运购票等极富挑战的应用场景中，阿里云保持着良好的运行纪录 [1]  。</p><p>阿里云在全球各地部署高效节能的绿色数据中心，利用清洁计算为万物互联的新世界提供源源不断的能源动力，目前开服的区域包括中国（华北、华东、华南、香港）、新加坡、美国（美东、美西）、欧洲、中东、澳大利亚、日本。</p><p>2014年，阿里云曾帮助用户抵御全球互联网史上最大的DDoS攻击，峰值流量达到每秒453.8Gb [2]  。在Sort Benchmark 2016 排序竞赛 CloudSort项目中，阿里云以1.44$/TB的排序花费打破了AWS保持的4.51$/TB纪录 [3]  。在Sort Benchmark 2015，阿里云利用自研的分布式计算平台ODPS，377秒完成100TB数据排序，刷新了Apache Spark 1406秒的世界纪录 [3]  。</p><p>2018年9月22日，2018杭州·云栖大会上阿里云宣布成立全球交付中心。</p><p>(来源：百度百科)</p><h1 id="购买流程"><a href="#购买流程" class="headerlink" title="购买流程"></a>购买流程</h1><p>1.登陆阿里云官网：<a href="https://www.aliyun.com（注册用户并实名认证），另外建议下载阿里云App！" target="_blank" rel="noopener">https://www.aliyun.com（注册用户并实名认证），另外建议下载阿里云App！</a></p><p>2.点击”产品”，再点击”云服务器ECS”如下：</p><img src="/2019/01/16/阿里云-ECS购买/buy1.jpg"><p>3.点击“立即购买”，如图：</p><img src="/2019/01/16/阿里云-ECS购买/buy2.jpg"><p>4.可根据自己实际情况勾选，进入自定义购买界面，示例设置如下图：</p><img src="/2019/01/16/阿里云-ECS购买/buy3.jpg"><img src="/2019/01/16/阿里云-ECS购买/buy4.jpg"><p>5.网路和安全组，基本保持默认即可：</p><img src="/2019/01/16/阿里云-ECS购买/buy5.jpg"><p>6.系统配置界面，按照要求设置相关信息即可：</p><img src="/2019/01/16/阿里云-ECS购买/buy6.jpg"><p>7.下面的分组设置保持默认即可。</p><p>其实在第六步即可选择“确认订单”，进入付款流程，完成支付。</p><p>到此阿里云服务器ECS购买完毕！（操作仅供参考，大家以自己实际情况购买！）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;阿里云创立于2009年，是&lt;a href=&quot;https://baike.baidu.com/item/%E5%85%A8%E7%90%83/2741427&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;全球&lt;/a&gt;领先的&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%91%E8%AE%A1%E7%AE%97/9969353&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;云计算&lt;/a&gt;及人工智能科技&lt;a href=&quot;https://baike.baidu.com/item/%E5%85%AC%E5%8F%B8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公司&lt;/a&gt;，致力于以在线公共&lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1/85523&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;服务&lt;/a&gt;的&lt;a href=&quot;https://baike.baidu.com/item/%E6%96%B9%E5%BC%8F/3616191&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;方式&lt;/a&gt;，提供&lt;a href=&quot;https://baike.baidu.com/item/%E5%AE%89%E5%85%A8/5573311&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安全&lt;/a&gt;、可靠的计算和数据处理能力，让计算和人工智能成为普惠&lt;a href=&quot;https://baike.baidu.com/item/%E7%A7%91%E6%8A%80/662906&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;科技&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="阿里云 ECS" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91-ECS/"/>
    
      <category term="aliyun ECS" scheme="http://yoursite.com/tags/aliyun-ECS/"/>
    
      <category term="购买" scheme="http://yoursite.com/tags/%E8%B4%AD%E4%B9%B0/"/>
    
  </entry>
  
  <entry>
    <title>阿里云-ECS与域名绑定</title>
    <link href="http://yoursite.com/2019/01/16/%E9%98%BF%E9%87%8C%E4%BA%91-ECS%E4%B8%8E%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/01/16/阿里云-ECS与域名绑定/</id>
    <published>2019-01-16T05:15:58.000Z</published>
    <updated>2019-01-16T07:16:56.687Z</updated>
    
    <content type="html"><![CDATA[<p>域名ip绑定。</p><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>step1：进入阿里云“管理控制台”，再点击“域名服务”，如下操作：</p><img src="/2019/01/16/阿里云-ECS与域名绑定/jiexi1.jpg"><p>step2:刚开始记录应为空，点击“添加记录”，如图：</p><img src="/2019/01/16/阿里云-ECS与域名绑定/jiexi2.jpg"><p>step3:按要求填写相关信息，如图：</p><img src="/2019/01/16/阿里云-ECS与域名绑定/jiexi3.jpg"><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>1.记录类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要将域名指向主机服务商提供的IP地址，请选择「A记录」；要将域名指向主机服务商提供的另一个域名，请选择「CNAME记录」。</span><br></pre></td></tr></table></figure><p>2.主机记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www ：将域名解析为www.example.com，填写www；</span><br><span class="line">@：将域名解析为example.com（不带www），填写@或者不填写；</span><br><span class="line">mail ：将域名解析为mail.example.com，通常用于解析邮箱服务器；</span><br><span class="line">泛解析，所有子域名均被解析到统一地址（除单独设置的子域名解析）；</span><br><span class="line">二级域名 ：如：mail.example.com或abc.example.com，填写mail或abc；</span><br><span class="line">手机网站 ：如：m.example.com，填写m。</span><br></pre></td></tr></table></figure><p>3.记录值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A记录值请填写您的服务器IP地址。</span><br></pre></td></tr></table></figure><p>4.TTL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10分钟。</span><br></pre></td></tr></table></figure><p>（以上操作仅供参考！）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;域名ip绑定。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="域名绑定" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>Docker-安装</title>
    <link href="http://yoursite.com/2019/01/15/Docker-%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/01/15/Docker-安装/</id>
    <published>2019-01-15T10:04:30.000Z</published>
    <updated>2019-01-15T10:25:51.519Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面《Docker-初识》《Docker-再识》两篇介绍，目的是从理论上了解Docker，这将有助于理解后面实践操作。如果真是初次接触可能还是要花些时间消化理解。接下来我们先安装Docker。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><p>警告：切勿在没有配置 Docker APT 源的情况下直接使用 apt 命令安装 Docker.</p></blockquote><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Docker CE 支持以下版本的 <a href="https://www.ubuntu.com/server" target="_blank" rel="noopener">Ubuntu</a> 操作系统：</p><ul><li>Artful 17.10 (Docker CE 17.11 Edge +)</li><li>Xenial 16.04 (LTS)</li><li>Trusty 14.04 (LTS)</li></ul><p>Docker CE 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本,当前最新的 LTS 版本为 Ubuntu 16.04。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-14-04-可选内核模块"><a href="#Ubuntu-14-04-可选内核模块" class="headerlink" title="Ubuntu 14.04 可选内核模块"></a>Ubuntu 14.04 可选内核模块</h3><p>从 Ubuntu 14.04 开始，一部分内核模块移到了可选内核模块包 (<code>linux-image-extra-*</code>) ，以减少内核软件包的体积。正常安装的系统应该会包含可选内核模块包，而一些裁剪后的系统可能会将其精简掉。<code>AUFS</code> 内核驱动属于可选内核模块的一部分，作为推荐的 Docker 存储层驱动，一般建议安装可选内核模块包以使用 <code>AUFS</code>。</p><p>如果系统没有安装可选内核模块的话，可以执行下面的命令来安装可选内核模块包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    linux-image-extra-$(uname -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04 +"></a>Ubuntu 16.04 +</h3><p>Ubuntu 16.04 + 上的 Docker CE 默认使用 <code>overlay2</code> 存储层驱动,无需手动配置。</p><h2 id="使用-APT-安装"><a href="#使用-APT-安装" class="headerlink" title="使用 APT 安装"></a>使用 APT 安装</h2><h3 id="安装必要的一些系统工具"><a href="#安装必要的一些系统工具" class="headerlink" title="安装必要的一些系统工具"></a>安装必要的一些系统工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h3 id="安装-GPG-证书"><a href="#安装-GPG-证书" class="headerlink" title="安装 GPG 证书"></a>安装 GPG 证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="写入软件源信息"><a href="#写入软件源信息" class="headerlink" title="写入软件源信息"></a>写入软件源信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><h3 id="更新并安装-Docker-CE"><a href="#更新并安装-Docker-CE" class="headerlink" title="更新并安装 Docker CE"></a>更新并安装 Docker CE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><blockquote><p>以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。</p></blockquote><h2 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h2><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># 可能会出现 404 错误，请移步下面的特别说明</span></span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。</p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>2018 年 7 月 21 日，貌似阿里云这边在做调整，故导致 Docker 的 Aliyun 安装脚本不可用，是永久性还是临时性的尚不清除，如果你已经按照之前的操作安装 Docker，请按以下步骤进行修复并重新安装</p><ul><li>如果已经使用了 Aliyun 脚本安装并成功的<ul><li>请先卸载 Docker，命令为：<code>apt-get autoremove docker-ce</code></li><li>删除 <code>/etc/apt/sources.list.d</code> 目录下的 <code>docker.list</code> 文件</li></ul></li><li>使用 <code>AzureChinaCloud</code> 镜像脚本重新安装，命令为：<code>sudo sh get-docker.sh --mirror AzureChinaCloud</code></li></ul><h2 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>Ubuntu 14.04 请使用以下命令启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure><h2 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h2><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket" target="_blank" rel="noopener">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><h2 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p><h1 id="加速镜像"><a href="#加速镜像" class="headerlink" title="加速镜像"></a>加速镜像</h1><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p><ul><li><a href="https://docs.docker.com/registry/recipes/mirror/#use-case-the-china-registry-mirror" target="_blank" rel="noopener">Docker 官方提供的中国 registry mirror</a></li><li><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a></li><li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a></li></ul><p>我们以 Docker 官方加速器为例进行介绍。</p><h2 id="Ubuntu-14-04、Debian-7-Wheezy"><a href="#Ubuntu-14-04、Debian-7-Wheezy" class="headerlink" title="Ubuntu 14.04、Debian 7 Wheezy"></a>Ubuntu 14.04、Debian 7 Wheezy</h2><p>对于使用 <a href="http://upstart.ubuntu.com/" target="_blank" rel="noopener">upstart</a> 的系统而言，编辑 <code>/etc/default/docker</code> 文件，在其中的 <code>DOCKER_OPTS</code> 中配置加速器地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">"--registry-mirror=https://registry.docker-cn.com"</span></span><br></pre></td></tr></table></figure><p>重新启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-16-04-、Debian-8-、CentOS-7"><a href="#Ubuntu-16-04-、Debian-8-、CentOS-7" class="headerlink" title="Ubuntu 16.04+、Debian 8+、CentOS 7"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h2><p>对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>之后重新启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果您之前查看旧教程，修改了 <code>docker.service</code> 文件内容，请去掉您添加的内容（<code>--registry-mirror=https://registry.docker-cn.com</code>），这里不再赘述。</p></blockquote><h2 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h2><p>配置加速器之后，如果拉取镜像仍然十分缓慢，请手动检查加速器配置是否生效，在命令行执行 <code>docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过前面《Docker-初识》《Docker-再识》两篇介绍，目的是从理论上了解Docker，这将有助于理解后面实践操作。如果真是初次接触可能还是要花些时间消化理解。接下来我们先安装Docker。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-再识</title>
    <link href="http://yoursite.com/2019/01/15/Docker-%E5%86%8D%E8%AF%86/"/>
    <id>http://yoursite.com/2019/01/15/Docker-再识/</id>
    <published>2019-01-15T09:51:20.000Z</published>
    <updated>2019-01-15T10:04:05.349Z</updated>
    
    <content type="html"><![CDATA[<p>Docker容器技术已在云计算市场中风靡一时了，而众多主流供应商则面临着技术落后的窘境。那么，是什么让Docker容器技术变得如此受欢迎呢？对于刚入门的新手来说，容器技术可实现不同云计算之间应用程序的可移植性，以及提供了一个把应用程序拆分为分布式组件的方法。此外，用户还可以管理和扩展这些容器成为集群。</p><a id="more"></a><h1 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h1><p>Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。</p><ul><li>一种服务器，它是一种称为守护进程并且长时间运行的程序。</li><li>REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。</li><li>一个有命令行界面 (CLI) 工具的客户端。</li></ul><p>Docker 引擎组件的流程如下图所示：</p><img src="/2019/01/15/Docker-再识/image1.png"><h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p><img src="/2019/01/15/Docker-再识/image2.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">镜像(Images)：Docker 镜像是用于创建 Docker 容器的模板。</span><br><span class="line"></span><br><span class="line">容器(Container)：容器是独立运行的一个或一组应用。</span><br><span class="line"></span><br><span class="line">客户端(Client)： Docker 客户端通过命令行或者其他工具使用 Docker API (&lt;https://docs.docker.com/reference/api/docker_remote_api&gt;) 与 Docker 的守护进程通信。</span><br><span class="line"></span><br><span class="line">主机(Host)：一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</span><br><span class="line"></span><br><span class="line">仓库(Registry)：Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub([https://hub.docker.com](https://hub.docker.com/)) 提供了庞大的镜像集合供使用。</span><br><span class="line"></span><br><span class="line">Docker Machine：Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</span><br></pre></td></tr></table></figure><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:16.04</code> 就包含了完整的一套 Ubuntu 16.04 最小系统的 <code>root</code> 文件系统。</p><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h1 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h1><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为<strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <code>数据卷（Volume）</code>、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h1 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h1><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<code>Docker Registry</code> 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个<strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个<strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p>以 <a href="https://store.docker.com/images/ubuntu" target="_blank" rel="noopener">Ubuntu 镜像</a> 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>14.04</code>, <code>16.04</code>。我们可以通过 <code>ubuntu:14.04</code>，或者 <code>ubuntu:16.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><h2 id="公有-Docker-Registry"><a href="#公有-Docker-Registry" class="headerlink" title="公有 Docker Registry"></a>公有 Docker Registry</h2><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><p>最常使用的 Registry 公开服务是官方的 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 <a href="https://coreos.com/" target="_blank" rel="noopener">CoreOS</a> 的 <a href="https://quay.io/repository/" target="_blank" rel="noopener">Quay.io</a>，CoreOS 相关的镜像存储在这里；Google 的 <a href="https://cloud.google.com/container-registry/" target="_blank" rel="noopener">Google Container Registry</a>，<a href="http://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a> 的镜像使用的就是这个服务。</p><p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（<code>Registry Mirror</code>），这些镜像服务被称为<strong>加速器</strong>。常见的有 <a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a> 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。</p><p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云镜像仓库</a>、<a href="https://c.163.com/hub#/m/library/" target="_blank" rel="noopener">网易云镜像服务</a>、<a href="https://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud 镜像市场</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">阿里云镜像库</a> 等。</p><h2 id="私有-Docker-Registry"><a href="#私有-Docker-Registry" class="headerlink" title="私有 Docker Registry"></a>私有 Docker Registry</h2><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://store.docker.com/images/registry/" target="_blank" rel="noopener">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务。</p><p>开源的 Docker Registry 镜像只提供了 <a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry API</a> 的服务端实现，足以支持 <code>docker</code> 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 <a href="https://docs.docker.com/datacenter/dtr/2.0/" target="_blank" rel="noopener">Docker Trusted Registry</a> 中，提供了这些高级功能。</p><p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，<a href="https://github.com/vmware/harbor" target="_blank" rel="noopener">VMWare Harbor</a> 和 <a href="https://www.sonatype.com/docker" target="_blank" rel="noopener">Sonatype Nexus</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker容器技术已在云计算市场中风靡一时了，而众多主流供应商则面临着技术落后的窘境。那么，是什么让Docker容器技术变得如此受欢迎呢？对于刚入门的新手来说，容器技术可实现不同云计算之间应用程序的可移植性，以及提供了一个把应用程序拆分为分布式组件的方法。此外，用户还可以管理和扩展这些容器成为集群。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux-安装MySql</title>
    <link href="http://yoursite.com/2019/01/15/Linux-%E5%AE%89%E8%A3%85MySql/"/>
    <id>http://yoursite.com/2019/01/15/Linux-安装MySql/</id>
    <published>2019-01-15T09:13:49.000Z</published>
    <updated>2019-01-15T09:22:41.580Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="更新数据源"><a href="#更新数据源" class="headerlink" title="更新数据源"></a>更新数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>系统将提示您在安装过程中创建 root 密码。选择一个安全的密码，并确保你记住它，因为你以后需要它。接下来，我们将完成 MySQL 的配置。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>因为是全新安装，您需要运行附带的安全脚本。这会更改一些不太安全的默认选项，例如远程 root 登录和示例用户。在旧版本的 MySQL 上，您需要手动初始化数据目录，但 Mysql 5.7 已经自动完成了。</p><p>运行安全脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>这将提示您输入您在之前步骤中创建的 root 密码。您可以按 Y，然后 ENTER 接受所有后续问题的默认值，但是要询问您是否要更改 root 密码。您只需在之前步骤中进行设置即可，因此无需现在更改。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>按上边方式安装完成后，MySQL 应该已经开始自动运行了。要测试它，请检查其状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@ubuntu:~$ systemctl status mysql.service</span><br><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Tue 2017-11-21 13:04:34 CST; 3min 24s ago</span><br><span class="line"> Main PID: 2169 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysql.service</span><br><span class="line">           └─2169 /usr/sbin/mysqld</span><br><span class="line"></span><br><span class="line">Nov 21 13:04:33 ubuntu systemd[1]: Starting MySQL Community Server...</span><br><span class="line">Nov 21 13:04:34 ubuntu systemd[1]: Started MySQL Community Server.</span><br></pre></td></tr></table></figure><p>查看 MySQL 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -p -u root version</span><br></pre></td></tr></table></figure><h2 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h2><ul><li>修改配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><ul><li>注释掉(语句前面加上 # 即可)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure><ul><li>重启 MySQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><ul><li>登录 MySQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><ul><li>授权 root 用户允许所有人连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;你的 mysql root 账户密码&apos;;</span><br></pre></td></tr></table></figure><h3 id="因弱口令无法成功授权解决步骤"><a href="#因弱口令无法成功授权解决步骤" class="headerlink" title="因弱口令无法成功授权解决步骤"></a>因弱口令无法成功授权解决步骤</h3><ul><li>查看和设置密码安全级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@validate_password_policy;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br></pre></td></tr></table></figure><ul><li>查看和设置密码长度限制</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@validate_password_length;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_length=1;</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><p>修改配置 <code>mysqld.cnf</code> 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><h3 id="配置默认字符集"><a href="#配置默认字符集" class="headerlink" title="配置默认字符集"></a>配置默认字符集</h3><p>在 <code>[mysqld]</code> 节点上增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>在 <code>[mysqld]</code> 节点底部增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><h3 id="配置忽略数据库大小写敏感"><a href="#配置忽略数据库大小写敏感" class="headerlink" title="配置忽略数据库大小写敏感"></a>配置忽略数据库大小写敏感</h3><p>在 <code>[mysqld]</code> 节点底部增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower-case-table-names = 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux-安装Tomcat</title>
    <link href="http://yoursite.com/2019/01/15/Linux-%E5%AE%89%E8%A3%85Tomcat/"/>
    <id>http://yoursite.com/2019/01/15/Linux-安装Tomcat/</id>
    <published>2019-01-15T09:11:43.000Z</published>
    <updated>2019-01-15T09:19:27.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>此处以 Tomcat 8.5.23 为例</p><a id="more"></a><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a></p><h2 id="解压缩并移动到指定目录"><a href="#解压缩并移动到指定目录" class="headerlink" title="解压缩并移动到指定目录"></a>解压缩并移动到指定目录</h2><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.23.tar.gz</span><br></pre></td></tr></table></figure><h3 id="变更目录名"><a href="#变更目录名" class="headerlink" title="变更目录名"></a>变更目录名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-tomcat-8.5.23 tomcat</span><br></pre></td></tr></table></figure><h3 id="移动目录"><a href="#移动目录" class="headerlink" title="移动目录"></a>移动目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv tomcat/ /usr/local/</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/bin/shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="目录内执行脚本"><a href="#目录内执行脚本" class="headerlink" title="目录内执行脚本"></a>目录内执行脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;此处以 Tomcat 8.5.23 为例&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux-安装Java</title>
    <link href="http://yoursite.com/2019/01/15/Linux-%E5%AE%89%E8%A3%85Java/"/>
    <id>http://yoursite.com/2019/01/15/Linux-安装Java/</id>
    <published>2019-01-15T09:05:49.000Z</published>
    <updated>2019-01-15T09:20:05.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>此处以 JDK 1.8.0_152 为例</p><a id="more"></a><h2 id="官方下载"><a href="#官方下载" class="headerlink" title="官方下载"></a>官方下载</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h2 id="解压缩并移动到指定目录"><a href="#解压缩并移动到指定目录" class="headerlink" title="解压缩并移动到指定目录"></a>解压缩并移动到指定目录</h2><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u152-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/java</span><br></pre></td></tr></table></figure><h3 id="移动安装包"><a href="#移动安装包" class="headerlink" title="移动安装包"></a>移动安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv jdk1.8.0_152/ /usr/local/java/</span><br></pre></td></tr></table></figure><h3 id="设置所有者"><a href="#设置所有者" class="headerlink" title="设置所有者"></a>设置所有者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root /usr/local/java/</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h3 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/environment</span><br></pre></td></tr></table></figure><h3 id="添加如下语句"><a href="#添加如下语句" class="headerlink" title="添加如下语句"></a>添加如下语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_152</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_152/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br></pre></td></tr></table></figure><h3 id="配置用户环境变量"><a href="#配置用户环境变量" class="headerlink" title="配置用户环境变量"></a>配置用户环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/profile</span><br></pre></td></tr></table></figure><h3 id="添加如下语句-1"><a href="#添加如下语句-1" class="headerlink" title="添加如下语句"></a>添加如下语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$PS1&quot; ]; then</span><br><span class="line">  if [ &quot;$BASH&quot; ] &amp;&amp; [ &quot;$BASH&quot; != &quot;/bin/sh&quot; ]; then</span><br><span class="line">    # The file bash.bashrc already sets the default PS1.</span><br><span class="line">    # PS1=&apos;\h:\w\$ &apos;</span><br><span class="line">    if [ -f /etc/bash.bashrc ]; then</span><br><span class="line">      . /etc/bash.bashrc</span><br><span class="line">    fi</span><br><span class="line">  else</span><br><span class="line">    if [ &quot;`id -u`&quot; -eq 0 ]; then</span><br><span class="line">      PS1=&apos;# &apos;</span><br><span class="line">    else</span><br><span class="line">      PS1=&apos;$ &apos;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_152</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_152/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH:$HOME/bin</span><br><span class="line"></span><br><span class="line">if [ -d /etc/profile.d ]; then</span><br><span class="line">  for i in /etc/profile.d/*.sh; do</span><br><span class="line">    if [ -r $i ]; then</span><br><span class="line">      . $i</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">  unset i</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="环境变量生效"><a href="#环境变量生效" class="headerlink" title="环境变量生效"></a>环境变量生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="其他用户更新环境变量"><a href="#其他用户更新环境变量" class="headerlink" title="其他用户更新环境变量"></a>其他用户更新环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su **</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;此处以 JDK 1.8.0_152 为例&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
