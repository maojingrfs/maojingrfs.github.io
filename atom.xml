<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mao Jing</title>
  
  <subtitle>改变，源自於自我的一种用心进取，而不是等待什天赐良机。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-26T06:19:24.377Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mao Jing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx-虚拟主机&amp;反向代理&amp;负载均衡配置</title>
    <link href="http://yoursite.com/2019/02/26/Nginx-%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/02/26/Nginx-虚拟主机-反向代理-负载均衡配置/</id>
    <published>2019-02-26T06:02:55.000Z</published>
    <updated>2019-02-26T06:19:24.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简要列举Nginx在分别用作虚拟主机，反向代理和负载均衡配置时的配置。</p><a id="more"></a><h1 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  192.168.75.145;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/wwwroot/htmlservice;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>1.启动两个Tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">  tomcat1:</span><br><span class="line">    image: tomcat</span><br><span class="line">    container_name: tomcat1</span><br><span class="line">    ports:</span><br><span class="line">      - 9090:8080</span><br><span class="line"></span><br><span class="line">  tomcat2:</span><br><span class="line">    image: tomcat</span><br><span class="line">    container_name: tomcat2</span><br><span class="line">    ports:</span><br><span class="line">      - 9091:8080</span><br></pre></td></tr></table></figure><p>2.配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    # 配置一个代理即 tomcat1 服务器</span><br><span class="line">    upstream tomcat_server1 &#123;</span><br><span class="line">        server 192.168.75.145:9090;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置一个代理即 tomcat2 服务器</span><br><span class="line">    upstream tomcat_server2 &#123;</span><br><span class="line">        server 192.168.75.145:9091;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置一个虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name 192.168.75.145;</span><br><span class="line">        location / &#123;</span><br><span class="line">                # 域名 192.168.75.145 的请求全部转发到 tomcat_server1 即 tomcat1 服务上</span><br><span class="line">                proxy_pass http://tomcat_server1;</span><br><span class="line">                # 欢迎页面，按照从左到右的顺序查找页面</span><br><span class="line">                index index.jsp index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name 192.168.75.145;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # 域名 192.168.75.145 的请求全部转发到 tomcat_server2 即 tomcat2 服务上</span><br><span class="line">            proxy_pass http://tomcat_server2;</span><br><span class="line">            index index.jsp index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    upstream myapp1 &#123;</span><br><span class="line">        server 192.168.75.145:9090 weight=10;</span><br><span class="line">        server 192.168.75.145:9091 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name 192.168.75.145;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://myapp1;</span><br><span class="line">            index index.jsp index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简要列举Nginx在分别用作虚拟主机，反向代理和负载均衡配置时的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>系统架构-SOA与微服务</title>
    <link href="http://yoursite.com/2019/02/25/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-SOA%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/02/25/系统架构-SOA与微服务/</id>
    <published>2019-02-25T14:27:02.000Z</published>
    <updated>2019-02-25T14:53:52.942Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/02/25/系统架构-SOA与微服务/image1.png"><p>这里简单聊聊SOA与微服务两种架构，以及他们的区别。</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h2><p>面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。</p><p>SOA架构中有两个主要角色：服务提供者（Provider）和服务使用者（Consumer）。而软件代理则可以扮演这两个角色。该Consumer层是用户（人、应用程序或第三方的其它组件）与SOA交互的点，和Provider层则由SOA架构内的所有服务所构成。</p><p>SOA首先在90年代中期得名，当时一家名为Gartner Group的公司认识到了这个软件架构的新趋势，并在全球推广。通过这样做，他们设法大大加快了这种架构模式的采用和进一步发展。然而，使用分布式服务作为软件体系结构的最早记录可追溯到二十世纪80年代初。</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>其实和 SOA 架构类似,微服务是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。</p><p>此外，它们是完全独立的，也就是说它们可以写入不同的编程语言并使用不同的数据库。集中式服务管理几乎不存在，微服务使用轻量级HTTP、REST或Thrift API进行通信。</p><p>这个词本身起源于2011年5月在威尼斯附近举行的软件架构师研讨会。他们第一次使用“微服务”这个术语来描述参与者看到的一个共同的架构风格，其中许多参会者都在探索相似的内容。2012年5月，同一个团队决定将“微服务”作为最合适的名称。然而实际上，微软、亚马逊、Netflix和Facebook等主要的科技公司已经在微服务架构方面工作了十多年。</p><p>乍一看，微服务架构似乎谈论的是与SOA相同的事情。不过，如果引用微软服务领域的先驱Martin Flower的话，他曾经说过，“我们应该把SOA看作微服务的超集”。</p><h1 id="ESB和微服务API网关"><a href="#ESB和微服务API网关" class="headerlink" title="ESB和微服务API网关"></a>ESB和微服务API网关</h1><p>ESB（企业服务总线），简单 来说 ESB 就是一根管道，用来连接各个服务节点。为了集 成不同系统，不同协议的服务，ESB 做了消息的转化解释和路由工作，让不同的服务互联互通；</p><img src="/2019/02/25/系统架构-SOA与微服务/image2.png"><p>API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。</p><img src="/2019/02/25/系统架构-SOA与微服务/image3.png"><img src="/2019/02/25/系统架构-SOA与微服务/image4.png"><h1 id="SOA-vs-MicroServices"><a href="#SOA-vs-MicroServices" class="headerlink" title="SOA vs. MicroServices"></a>SOA vs. MicroServices</h1><img src="/2019/02/25/系统架构-SOA与微服务/image5.png"><table><thead><tr><th style="text-align:left">SOA</th><th>微服务</th></tr></thead><tbody><tr><td style="text-align:left">应用程序服务的可重用性的最大化</td><td>专注于解耦</td></tr><tr><td style="text-align:left">系统性的改变需要修改整体</td><td>系统性的改变是创建一个新的服务</td></tr><tr><td style="text-align:left">DevOps和持续交付正在变得流行，但还不是主流</td><td>强烈关注DevOps和持续交付</td></tr><tr><td style="text-align:left">专注于业务功能重用</td><td>更重视“上下文边界”的概念</td></tr><tr><td style="text-align:left">通信使用企业服务总线ESB</td><td>对于通信而言，使用较少精细和简单的消息系统</td></tr><tr><td style="text-align:left">支持多种消息协议</td><td>使用轻量级协议，例如HTTP，REST或Thrift API</td></tr><tr><td style="text-align:left">对部署到它的所有服务使用通用平台</td><td>应用程序服务器不是真的被使用，通常使用云平台</td></tr><tr><td style="text-align:left">容器（如Docker）的使用不太受欢迎</td><td>容器在微服务方面效果很好</td></tr><tr><td style="text-align:left">SOA服务共享数据存储</td><td>每个微服务可以有一个独立的数据存储</td></tr><tr><td style="text-align:left">共同的治理和标准</td><td>轻松的治理，更加关注团队协作和选择自由</td></tr></tbody></table><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>不能简单地说一种架构比另一种架构更好。这主要取决于您正在构建的应用程序的目的。SOA更适合需要与许多其他应用程序集成的大型复杂企业应用程序环境。这就是说，小型应用程序不适合SOA架构，因为它们不需要消息中间件组件。而微服务架构，在另一方面，是更适合于较小和良好的分割，基于Web的系统。另外，如果您正在开发移动或Web应用程序，那么微服务作为开发人员可以为您提供更大的控制权。最后，我们可以得出结论，因为它们服务于不同的目的，微服务和SOA确实是不同类型的体系结构。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/02/25/系统架构-SOA与微服务/image1.png&quot;&gt;
&lt;p&gt;这里简单聊聊SOA与微服务两种架构，以及他们的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="SOA" scheme="http://yoursite.com/tags/SOA/"/>
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SSM-整合MyBatis</title>
    <link href="http://yoursite.com/2019/02/20/SSM-%E6%95%B4%E5%90%88MyBatis/"/>
    <id>http://yoursite.com/2019/02/20/SSM-整合MyBatis/</id>
    <published>2019-02-20T10:51:57.000Z</published>
    <updated>2019-02-20T10:58:53.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h2><p>(做技术选型时首选Druid，效率最高，其它如c3p0等不考虑！)</p><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><p>使用maven导入Druid jar包</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.46&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="链接数据库配置jdbc-properties文件"><a href="#链接数据库配置jdbc-properties文件" class="headerlink" title="链接数据库配置jdbc.properties文件"></a>链接数据库配置jdbc.properties文件</h2><p>配置是数据库相关信息</p><pre><code># JDBCjdbc.driverClass=com.mysql.jdbc.Driverjdbc.connectionURL=jdbc:mysql://192.168.75.134:3306/myshop?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falsejdbc.username=rootjdbc.password=123456# JDBC Pooljdbc.pool.init=1jdbc.pool.minIdle=3jdbc.pool.maxActive=20# JDBC Testjdbc.testSql=SELECT &apos;x&apos; FROM DUAL</code></pre><h2 id="创建Spring整合Druid配置文件spring-context-druid-xml"><a href="#创建Spring整合Druid配置文件spring-context-druid-xml" class="headerlink" title="创建Spring整合Druid配置文件spring-context-druid.xml"></a>创建Spring整合Druid配置文件spring-context-druid.xml</h2><p>数据库的连接事宜通过这个配置文件全权交由spring管理，如下面bean id=”dataSource”,其对应的class也就是之前我们手动创建链接时的dataSource,这里是用com.alibaba.druid.pool.DruidDataSource封装了一道，bean下面包含的property则是为链接数据库提供必须的数据等信息，如数据库ip，用户名密码等，这些数据在上面jdbc.properties文件中已经配置了。</p><p>spring容器通过解析这个配置文件便能方便管Druid连接数据库。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;!-- 加载配置属性文件 --&gt;    &lt;context:property-placeholder ignore-unresolvable=&quot;true&quot; location=&quot;classpath:jdbc.properties&quot;/&gt;    &lt;!-- 数据源配置, 使用 Druid 数据库连接池 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;        &lt;!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass --&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClass}&quot;/&gt;        &lt;!-- 基本属性 url、user、password --&gt;        &lt;property name=&quot;url&quot; value=&quot;${jdbc.connectionURL}&quot;/&gt;        &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;        &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;        &lt;!-- 配置初始化大小、最小、最大 --&gt;        &lt;property name=&quot;initialSize&quot; value=&quot;${jdbc.pool.init}&quot;/&gt;        &lt;property name=&quot;minIdle&quot; value=&quot;${jdbc.pool.minIdle}&quot;/&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;${jdbc.pool.maxActive}&quot;/&gt;        &lt;!-- 配置获取连接等待超时的时间 --&gt;        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;        &lt;property name=&quot;validationQuery&quot; value=&quot;${jdbc.testSql}&quot;/&gt;        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;        &lt;!-- 配置监控统计拦截的filters --&gt;        &lt;property name=&quot;filters&quot; value=&quot;stat&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>截至上面我们使用spring整合了一款高效的连接池，接下来便要整合Mybatis.</p><h2 id="添加Spring整合MyBatis依赖包"><a href="#添加Spring整合MyBatis依赖包" class="headerlink" title="添加Spring整合MyBatis依赖包"></a>添加Spring整合MyBatis依赖包</h2><p>这三个包的关系：</p><p>首先Spring作为java开发集大成者的框架，其作为容器，扮演者管理bean的角色,那么换个角度，如像Mybatis这样的框架，如果想主动与spring做整合，实现spring容器管理数据持久化的相关操作，那么便需要实现spring的某些规范，达到让spring可以管理自己的目的，于是便有了mybatis-spring的中间件jar包。</p><p>另一方面spring也需要遵顼jdbc的规范（spring-jdbc）,这样便达到spring，mybatis,数据库的整合。</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;    &lt;version&gt;3.2.8&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;    &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;    &lt;version&gt;4.3.17.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="接下来先配置mybatis-config-xml文件"><a href="#接下来先配置mybatis-config-xml文件" class="headerlink" title="接下来先配置mybatis-config.xml文件"></a>接下来先配置mybatis-config.xml文件</h2><p>上面有Druid高效的管理着数据库连接对象，这里便通过Mybatis高效的实现数据库的增删该查工作（缓存机制）。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!-- 全局参数 --&gt;    &lt;settings&gt;        &lt;!-- 打印 SQL 语句 --&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;        &lt;!-- 使全局的映射器启用或禁用缓存。 --&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;false&quot;/&gt;        &lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --&gt;        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;        &lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --&gt;        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;        &lt;!-- 是否允许单条 SQL 返回多个数据集 (取决于驱动的兼容性) default:true --&gt;        &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;        &lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true --&gt;        &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;        &lt;!-- 允许 JDBC 生成主键。需要驱动器支持。如果设为了 true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 default:false  --&gt;        &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;        &lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不映射 PARTIAL：部分 FULL:全部  --&gt;        &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;        &lt;!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新） --&gt;        &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;        &lt;!-- 使用驼峰命名法转换字段。 --&gt;        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;        &lt;!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session --&gt;        &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;        &lt;!-- 设置 JDBC 类型为空时,某些驱动程序 要指定值, default:OTHER，插入空值时不需要指定类型 --&gt;        &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;    &lt;/settings&gt;&lt;/configuration&gt;</code></pre><h2 id="mybatis配置好了，通过配置“spring-context-mybatis-xml”交给spring去管理吧！"><a href="#mybatis配置好了，通过配置“spring-context-mybatis-xml”交给spring去管理吧！" class="headerlink" title="mybatis配置好了，通过配置“spring-context-mybatis.xml”交给spring去管理吧！"></a>mybatis配置好了，通过配置“spring-context-mybatis.xml”交给spring去管理吧！</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;    &lt;!-- 配置 SqlSession --&gt;    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;        &lt;!-- 用于配置对应实体类所在的包，多个 package 之间可以用 &apos;,&apos; 号分割 --&gt;        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.funtl.my.shop.domain&quot;/&gt;        &lt;!-- 用于配置对象关系映射配置文件所在目录 --&gt;        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:/mapper/**/*.xml&quot;/&gt;        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:/mybatis-config.xml&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 扫描 Mapper --&gt;    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;com.funtl.my.shop.web.admin.dao&quot; /&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>​    </p><h2 id="配置事务"><a href="#配置事务" class="headerlink" title="配置事务"></a>配置事务</h2><p>先要添加spring-aspects依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;    &lt;version&gt;4.3.17.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>其次在spring-context.xml中配置如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;context:annotation-config/&gt;    &lt;context:component-scan base-package=&quot;com.maojing.myshop.admin&quot;&gt;        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot; /&gt;    &lt;/context:component-scan&gt;    &lt;!-- 配置事务管理器 --&gt;    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 配置事务通知 --&gt;    &lt;!-- 定义哪些方法需要事物支持 --&gt;    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;        &lt;tx:attributes&gt;            &lt;!-- 传播行为 --&gt;            &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;            &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; /&gt;            &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; /&gt;            &lt;tx:method name=&quot;create*&quot; propagation=&quot;REQUIRED&quot; /&gt;            &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;            &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;            &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;            &lt;tx:method name=&quot;select*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;            &lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;!-- 配置顾问和切入点 --&gt;    &lt;aop:config&gt;        &lt;aop:pointcut id=&quot;myPointcut&quot; expression=&quot;execution(* com.maojing.myshop.admin.service.*.*(..))&quot; /&gt;        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;myPointcut&quot; /&gt;    &lt;/aop:config&gt;</code></pre><p>​        </p><h2 id="最后便是配置sql语句了。"><a href="#最后便是配置sql语句了。" class="headerlink" title="最后便是配置sql语句了。"></a>最后便是配置sql语句了。</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.maojing.myshop.admin.dao.TbUserDao&quot;&gt;    &lt;select id=&quot;selectAll&quot; resultType=&quot;TbUser&quot;&gt;        SELECT          a.id,          a.username,          a.password,          a.phone,          a.email,          a.created,          a.updated        FROM          tb_user AS a    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SSM可以这样理解</p><p>1.需要高效连接池技术，这里涉及连接池技术选型问题，和显然Druid是第一选择；</p><p>2.选择Druid便涉及jdbc.properties文件和spring-context-durid.xml两个文件的配置；</p><p>3.将高效连接池与spring整合后，咱们还需要一个更优秀的CRUD持久层框架，在技术选型中，Mybatis胜出；</p><p>4。选择Mybatis便需要涉及mybatis-config.xml和spring-context-mybatis.xml两个文件的配置。</p><p>配置前面两个文件将链接池交由spring容器管理，spring有了链接池，便可间接管理连接对象。</p><p>而后面两个文件将mybatis交由spring管理，那么此时spring具备了链接对象，具备了CURD能力，那么剩下的便是解析mapper文件，高效的进行数据库操作。</p>]]></content>
    
    <summary type="html">
    
      这里将记录SSM整合过程，配置多，看官别眨眼！
    
    </summary>
    
      <category term="SSM" scheme="http://yoursite.com/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://yoursite.com/tags/SSM/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring mvc" scheme="http://yoursite.com/tags/Spring-mvc/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>直播-拙见</title>
    <link href="http://yoursite.com/2019/02/20/%E7%9B%B4%E6%92%AD-%E6%8B%99%E8%A7%81/"/>
    <id>http://yoursite.com/2019/02/20/直播-拙见/</id>
    <published>2019-02-20T10:37:57.000Z</published>
    <updated>2019-02-20T10:47:14.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>前面基于OBS studio+腾讯云制作简单的直播功能，由此可以推测主流直播类网站架构大致。</p><h1 id="出门装（开发者测试装）"><a href="#出门装（开发者测试装）" class="headerlink" title="出门装（开发者测试装）"></a>出门装（开发者测试装）</h1><h2 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h2><p>OBS studio + 第三方云服务器（如阿里云、腾讯云等），关于此种方案的配置在&lt;直播（OBS+腾讯云）&gt;一文中详细介绍得了实现过程，当然还是要结合腾讯官方开发文档进行。</p><h2 id="基于出门装直播实现的再思考？"><a href="#基于出门装直播实现的再思考？" class="headerlink" title="基于出门装直播实现的再思考？"></a>基于出门装直播实现的再思考？</h2><h2 id="第一：直播类网站实现思路？"><a href="#第一：直播类网站实现思路？" class="headerlink" title="第一：直播类网站实现思路？"></a>第一：直播类网站实现思路？</h2><p>这里拿上面实现的方案用例：</p><h4 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h4><p>使用OBS studio进行数据采集，如屏幕，摄像头，录音设备等。</p><p>OBS设置中可以设置比特率，也叫码率。</p><p>涉及技术点：</p><pre><code>1.码率：比特率是指每秒传送的比特(bit)数。单位为 bps(Bit Per Second)，比特率越高，传送数据速度越快。声音中的比特率是指将模拟声音信号转换成数字声音信号后，单位时间内的二进制数据量，是间接衡量音频质量的一个指标。 视频中的比特率（码率）原理与声音中的相同，都是指由模拟信号转换为数字信号后，单位时间内的二进制数据量。2.码率基本计算公式：【码率】（kbps)=【文件大小】（字节）X8/【时间】（秒）/10003.码率的基本原则：    1）、码率和质量成正比，但是文件体积也和码率成正比。    2）、码率超过一定数值，对图像的质量没有多大影响。    总结的来说：码率直接影响了视频和音频的质量，视频的清晰度    一般来说，码率达到1600就是超清视频，达到4000就是1080p（估算，不能准确表示原则）4.编码格式的目的：几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真。</code></pre><p>​    </p><h4 id="如何达到在自己平台注册的主播通过服务器获得推流Url和播放地址？"><a href="#如何达到在自己平台注册的主播通过服务器获得推流Url和播放地址？" class="headerlink" title="如何达到在自己平台注册的主播通过服务器获得推流Url和播放地址？"></a>如何达到在自己平台注册的主播通过服务器获得推流Url和播放地址？</h4><p>详见腾讯开发文档：<br><a href="https://cloud.tencent.com/document/product/267/13457#.E6.8E.A8.E6.B5.81-url" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/267/13457#.E6.8E.A8.E6.B5.81-url</a></p><p>​<br>​    </p>]]></content>
    
    <summary type="html">
    
      前面基于OBS studio+腾讯云制作简单的直播功能，由此可以推测主流直播类网站架构大致。(个人观点)
    
    </summary>
    
      <category term="直播" scheme="http://yoursite.com/categories/%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="直播" scheme="http://yoursite.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>直播-（OBS+腾讯云）</title>
    <link href="http://yoursite.com/2019/02/20/%E7%9B%B4%E6%92%AD-%EF%BC%88OBS-%E8%85%BE%E8%AE%AF%E4%BA%91%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/20/直播-（OBS-腾讯云）/</id>
    <published>2019-02-20T10:36:03.000Z</published>
    <updated>2019-02-20T10:42:23.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>注册腾讯云账号，并通过实名认证；</p><h2 id="登陆直播管理平台"><a href="#登陆直播管理平台" class="headerlink" title="登陆直播管理平台"></a>登陆直播管理平台</h2><p><a href="https://console.qcloud.com/live/livecodemanage" target="_blank" rel="noopener">https://console.qcloud.com/live/livecodemanage</a></p><h2 id="OBS"><a href="#OBS" class="headerlink" title="OBS"></a>OBS</h2><p>根据<a href="https://cloud.tencent.com/document/product/267/7479?!preview=true&amp;lang=zh" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/267/7479?!preview=true&amp;lang=zh</a><br>开发文档要求，下载免费的OBS软件，安装。</p><h2 id="直播码接入-和-频道托管"><a href="#直播码接入-和-频道托管" class="headerlink" title="直播码接入 和 频道托管"></a>直播码接入 和 频道托管</h2><p>推荐使用直播码接入</p><h2 id="生成推流拉流链接"><a href="#生成推流拉流链接" class="headerlink" title="生成推流拉流链接"></a>生成推流拉流链接</h2><p>在后台管理的接入管理-直播玛接入-点击推流生成器，生成相关的url</p><h2 id="OBS-设置推流相关"><a href="#OBS-设置推流相关" class="headerlink" title="OBS 设置推流相关"></a>OBS 设置推流相关</h2><p>运行OBS ，设置场景（窗口），来源（根据实际情况）；</p><p>在设置的流选项中的流类型，选择自定义流媒体服务器；</p><p>填写URL和流名称</p><p>如上面生成的推流Url为：</p><p>rtmp://32537.livepush.myqcloud.com/live/32537_86667ce66f?bizid=32537&amp;txSecret=e2594c540a6c7a1c5e881222ce9c77fd&amp;txTime=5BAE4FFF</p><p>则URL为：rtmp://32537.livepush.myqcloud.com/live</p><p>流名称为：32537_86667ce66f?bizid=32537&amp;txSecret=e2594c540a6c7a1c5e881222ce9c77fd&amp;txTime=5BAE4FFF</p><p>保存即可</p><h2 id="OBS-推流"><a href="#OBS-推流" class="headerlink" title="OBS 推流"></a>OBS 推流</h2><p>经过上面设置后，在obs点击开始推流，</p><h2 id="web收看直播"><a href="#web收看直播" class="headerlink" title="web收看直播"></a>web收看直播</h2><p>在后台管理的接入管理的房间列表刷新下，即可看见一个房间正在直播，在后面则有测和分享链接两种方式，收看直播</p>]]></content>
    
    <summary type="html">
    
      在18年初对直播进行了简单的了解，这里是基于之前的直播简单实践整理的一份笔记，仅供参考！
    
    </summary>
    
      <category term="直播" scheme="http://yoursite.com/categories/%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="直播" scheme="http://yoursite.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="OBS" scheme="http://yoursite.com/tags/OBS/"/>
    
      <category term="腾讯云" scheme="http://yoursite.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>多线程-线程池原理（1）</title>
    <link href="http://yoursite.com/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/20/多线程-线程池原理（1）/</id>
    <published>2019-02-20T10:15:17.000Z</published>
    <updated>2019-02-20T10:29:31.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                          int maximumPoolSize,</span><br><span class="line">                          long keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><p>corePoolSize：线程池核心线程数量</p><p>maximumPoolSize:线程池最大线程数量</p><p>keepAliverTime：当活跃线程数大于核心线程数时，空闲的多余线程最大存活时间</p><p>unit：存活时间的单位</p><p>workQueue：存放任务的队列</p><p>handler：超出线程范围和队列容量的任务的处理程序</p><h1 id="原理概要"><a href="#原理概要" class="headerlink" title="原理概要"></a>原理概要</h1><p>提交一个任务到线程池中，线程池的处理流程如下：</p><p>1、判断<strong>线程池里的核心线程</strong>是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。</p><p>2、线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。</p><p>3、判断<strong>线程池里的线程</strong>是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>创建一个线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadPoolTest implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Thread.sleep(300);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池运行16个线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        LinkedBlockingQueue&lt;Runnable&gt; queue =</span><br><span class="line">            new LinkedBlockingQueue&lt;Runnable&gt;(5);</span><br><span class="line">        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(5, 10, 60, TimeUnit.SECONDS, queue);</span><br><span class="line">        for (int i = 0; i &lt; 16 ; i++)&#123;</span><br><span class="line">            threadPool.execute(</span><br><span class="line">                new Thread(new ThreadPoolTest(), &quot;Thread&quot;.concat(i + &quot;&quot;)));</span><br><span class="line">            System.out.println(&quot;线程池中活跃的线程数： &quot; + threadPool.getPoolSize());</span><br><span class="line">            if (queue.size() &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;----------------队列中阻塞的线程数&quot; + queue.size());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">线程池中活跃的线程数： 1</span><br><span class="line">线程池中活跃的线程数： 2</span><br><span class="line">线程池中活跃的线程数： 3</span><br><span class="line">线程池中活跃的线程数： 4</span><br><span class="line">线程池中活跃的线程数： 5</span><br><span class="line">线程池中活跃的线程数： 5</span><br><span class="line">----------------队列中阻塞的线程数1</span><br><span class="line">线程池中活跃的线程数： 5</span><br><span class="line">----------------队列中阻塞的线程数2</span><br><span class="line">线程池中活跃的线程数： 5</span><br><span class="line">----------------队列中阻塞的线程数3</span><br><span class="line">线程池中活跃的线程数： 5</span><br><span class="line">----------------队列中阻塞的线程数4</span><br><span class="line">线程池中活跃的线程数： 5</span><br><span class="line">----------------队列中阻塞的线程数5</span><br><span class="line">线程池中活跃的线程数： 6</span><br><span class="line">----------------队列中阻塞的线程数5</span><br><span class="line">线程池中活跃的线程数： 7</span><br><span class="line">----------------队列中阻塞的线程数5</span><br><span class="line">线程池中活跃的线程数： 8</span><br><span class="line">----------------队列中阻塞的线程数5</span><br><span class="line">线程池中活跃的线程数： 9</span><br><span class="line">----------------队列中阻塞的线程数5</span><br><span class="line">线程池中活跃的线程数： 10</span><br><span class="line">----------------队列中阻塞的线程数5</span><br><span class="line">Exception in thread &quot;main&quot; java.util.concurrent.RejectedExecutionException: Task Thread[Thread15,5,main] rejected from java.util.concurrent.ThreadPoolExecutor@232204a1[Running, pool size = 10, active threads = 10, queued tasks = 5, completed tasks = 0]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)</span><br><span class="line">    at test.ThreadTest.main(ThreadTest.java:17)</span><br></pre></td></tr></table></figure><p>刚开始都是在创建新的线程，达到核心线程数量5个后，新的任务进来后不再创建新的线程，而是将任务加入工作队列，任务队列到达上线5个后，新的任务又会创建新的普通线程，直到达到线程池最大的线程数量10个，后面的任务则根据配置的饱和策略来处理。我们这里没有具体配置，使用的是默认的配置AbortPolicy:直接抛出异常。</p><h1 id="饱和策略"><a href="#饱和策略" class="headerlink" title="饱和策略"></a>饱和策略</h1><p>当队列和线程池都满了，说明线程池处于饱和状态，那么必须对新提交的任务采用一种特殊的策略来进行处理。这个策略默认配置是AbortPolicy，表示无法处理新的任务而抛出异常。JAVA提供了4中策略：</p><p>1、AbortPolicy：直接抛出异常</p><p>2、CallerRunsPolicy：只用调用所在的线程运行任务</p><p>3、DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</p><p>4、DiscardPolicy：不处理，丢弃掉。</p>]]></content>
    
    <summary type="html">
    
      线程是稀缺资源，使用线程池可以减少创建和销毁线程的次数。
    
    </summary>
    
      <category term="Thread" scheme="http://yoursite.com/categories/Thread/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
      <category term="ThreadPoolExecutor" scheme="http://yoursite.com/tags/ThreadPoolExecutor/"/>
    
  </entry>
  
  <entry>
    <title>多线程-Exchanger</title>
    <link href="http://yoursite.com/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-Exchanger/"/>
    <id>http://yoursite.com/2019/02/20/多线程-Exchanger/</id>
    <published>2019-02-20T06:37:22.000Z</published>
    <updated>2019-02-20T06:43:09.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>A synchronization point at which threads can pair and swap elements within pairs. Each thread presents some object on entry to the exchange method, matches with a partner thread, and receives its partner’s object on return. An Exchanger may be viewed as a bidirectional form of a SynchronousQueue. Exchangers may be useful in applications such as genetic algorithms and pipeline designs.</p><p>​    在以上的描述中，有几个要点：</p><ul><li>此类提供对外的操作是同步的；</li><li>用于成对出现的线程之间交换数据；</li><li>可以视作双向的同步队列；</li><li><p>可应用于基因算法、流水线设计等场景。</p><p> 接着看api文档，这个类提供对外的接口非常简洁，一个无参构造函数，两个重载的范型exchange方法：<br>public V exchange(V x) throws InterruptedException<br>public V exchange(V x, long timeout, TimeUnit unit) throws InterruptedException, TimeoutException<br> 从官方的javadoc可以知道，当一个线程到达exchange调用点时，如果它的伙伴线程此前已经调用了此方法，那么它的伙伴会被调度唤醒并与之进行对象交换，然后各自返回。如果它的伙伴还没到达交换点，那么当前线程将会被挂起，直至伙伴线程到达——完成交换正常返回；或者当前线程被中断——抛出中断异常；又或者是等候超时——抛出超时异常。</p></li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.Exchanger;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">public class ExchangerTest &#123;</span><br><span class="line">    protected static final Logger log = Logger.getLogger(ExchangerTest.class);</span><br><span class="line">    private static volatile boolean isDone = false;</span><br><span class="line"></span><br><span class="line">    static class ExchangerProducer implements Runnable &#123;</span><br><span class="line">        private Exchanger&lt;Integer&gt; exchanger;</span><br><span class="line">        private static int data = 1;</span><br><span class="line">        ExchangerProducer(Exchanger&lt;Integer&gt; exchanger) &#123;</span><br><span class="line">            this.exchanger = exchanger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (!Thread.interrupted() &amp;&amp; !isDone) &#123;</span><br><span class="line">                for (int i = 1; i &lt;= 3; i++) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(1);</span><br><span class="line">                        data = i;</span><br><span class="line">                        System.out.println(&quot;producer before: &quot; + data);</span><br><span class="line">                        data = exchanger.exchange(data);</span><br><span class="line">                        System.out.println(&quot;producer after: &quot; + data);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        log.error(e, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                isDone = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class ExchangerConsumer implements Runnable &#123;</span><br><span class="line">        private Exchanger&lt;Integer&gt; exchanger;</span><br><span class="line">        private static int data = 0;</span><br><span class="line">        ExchangerConsumer(Exchanger&lt;Integer&gt; exchanger) &#123;</span><br><span class="line">            this.exchanger = exchanger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (!Thread.interrupted() &amp;&amp; !isDone) &#123;</span><br><span class="line">                data = 0;</span><br><span class="line">                System.out.println(&quot;consumer before : &quot; + data);</span><br><span class="line">                try &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(1);</span><br><span class="line">                    data = exchanger.exchange(data);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    log.error(e, e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;consumer after : &quot; + data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param args</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        Exchanger&lt;Integer&gt; exchanger = new Exchanger&lt;Integer&gt;();</span><br><span class="line">        ExchangerProducer producer = new ExchangerProducer(exchanger);</span><br><span class="line">        ExchangerConsumer consumer = new ExchangerConsumer(exchanger);</span><br><span class="line">        exec.execute(producer);</span><br><span class="line">        exec.execute(consumer);</span><br><span class="line">        exec.shutdown();</span><br><span class="line">        try &#123;</span><br><span class="line">            exec.awaitTermination(30, TimeUnit.SECONDS);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            log.error(e, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这大致可以看作是一个简易的生产者消费者模型，有两个任务类，一个递增地产生整数，一个产生整数0，然后双方进行交易。每次交易前的生产者和每次交易后的消费者都会sleep 1秒来模拟数据处理的消耗，并在交易前后把整数值打印到控制台以便检测结果。在这个例子里交易循环只执行三次，采用一个volatile boolean来控制交易双方线程的退出。</p><p>程序输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">consumer before : 0</span><br><span class="line">producer before: 1</span><br><span class="line">consumer after : 1</span><br><span class="line">producer after: 0</span><br><span class="line">consumer before : 0</span><br><span class="line">producer before: 2</span><br><span class="line">producer after: 0</span><br><span class="line">consumer after : 2</span><br><span class="line">consumer before : 0</span><br><span class="line">producer before: 3</span><br><span class="line">producer after: 0</span><br><span class="line">consumer after : 3</span><br></pre></td></tr></table></figure><p>输出结果验证了以下两件事情：</p><ul><li>exchange方法真的帮一对线程交换了数据；</li><li><p>exchange方法真的会阻塞调用方线程直至另一方线程参与交易。</p><p> 那么在中断和超时两种情况下程序的运行表现会是怎样呢？作为一个小练习，有兴趣的观众可以设想并编写测试用例覆盖验证之。</p></li></ul>]]></content>
    
    <summary type="html">
    
      Exchanger是自jdk1.5起开始提供的工具套件，一般用于两个工作线程之间交换数据。
    
    </summary>
    
      <category term="Thread" scheme="http://yoursite.com/categories/Thread/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
      <category term="Exchanger" scheme="http://yoursite.com/tags/Exchanger/"/>
    
  </entry>
  
  <entry>
    <title>多线程-CycliBarrier</title>
    <link href="http://yoursite.com/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-CycliBarrier/"/>
    <id>http://yoursite.com/2019/02/20/多线程-CycliBarrier/</id>
    <published>2019-02-20T04:06:53.000Z</published>
    <updated>2019-02-20T04:08:45.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类说明："><a href="#类说明：" class="headerlink" title="类说明："></a>类说明：</h2><p>一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。</p><h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><p>需要所有的子任务都完成时，才执行主任务，这个时候就可以选择使用CyclicBarrier。</p><h2 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h2><pre><code>public class CyclicBarrierTest {    public static void main(String[] args) throws IOException, InterruptedException {        //如果将参数改为4，但是下面只加入了3个选手，这永远等待下去        //Waits until all parties have invoked await on this barrier.         CyclicBarrier barrier = new CyclicBarrier(3);        ExecutorService executor = Executors.newFixedThreadPool(3);        executor.submit(new Thread(new Runner(barrier, &quot;1号选手&quot;)));        executor.submit(new Thread(new Runner(barrier, &quot;2号选手&quot;)));        executor.submit(new Thread(new Runner(barrier, &quot;3号选手&quot;)));        executor.shutdown();    }}class Runner implements Runnable {    // 一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)    private CyclicBarrier barrier;    private String name;    public Runner(CyclicBarrier barrier, String name) {        super();        this.barrier = barrier;        this.name = name;    }    @Override    public void run() {        try {            Thread.sleep(1000 * (new Random()).nextInt(8));            System.out.println(name + &quot; 准备好了...&quot;);            // barrier的await方法，在所有参与者都已经在此 barrier 上调用 await 方法之前，将一直等待。            barrier.await();        } catch (InterruptedException e) {            e.printStackTrace();        } catch (BrokenBarrierException e) {            e.printStackTrace();        }        System.out.println(name + &quot; 起跑！&quot;);    }}</code></pre><p>输出结果：<br>​<br>    3号选手 准备好了…<br>    2号选手 准备好了…<br>    1号选手 准备好了…<br>    1号选手 起跑！<br>    2号选手 起跑！<br>    3号选手 起跑！</p><h2 id="场景２"><a href="#场景２" class="headerlink" title="场景２"></a>场景２</h2><p>有四个游戏玩家玩游戏，游戏有三个关卡，每个关卡必须要所有玩家都到达后才能允许通过。其实这个场景里的玩家中如果有玩家A先到了关卡1，他必须等到其他所有玩家都到达关卡1时才能通过，也就是说线程之间需要相互等待。</p><h2 id="与countdownlatch区别"><a href="#与countdownlatch区别" class="headerlink" title="与countdownlatch区别"></a>与countdownlatch区别</h2><p>这和CountDownLatch的应用场景有区别，CountDownLatch里的线程是到了运行的目标后继续干自己的其他事情，而这里的线程需要等待其他线程后才能继续完成下面的工作。</p>]]></content>
    
    <summary type="html">
    
      一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。
    
    </summary>
    
      <category term="Thread" scheme="http://yoursite.com/categories/Thread/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
      <category term="CyclicBarrier" scheme="http://yoursite.com/tags/CyclicBarrier/"/>
    
  </entry>
  
  <entry>
    <title>多线程-Semaphore</title>
    <link href="http://yoursite.com/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-Semaphore/"/>
    <id>http://yoursite.com/2019/02/20/多线程-Semaphore/</id>
    <published>2019-02-20T04:04:36.000Z</published>
    <updated>2019-02-20T04:06:28.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>   Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，保证合理的使用公共资源。</p><p>   线程可以通过acquire()方法来获取信号量的许可，当信号量中没有可用的许可的时候，线程阻塞，直到有可用的许可为止。线程可以通过release()方法释放它持有</p><p>   的信号量的许可。</p><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p> Semaphore经常用于限制获取某种资源的线程数量。下面举个例子，比如说操场上有5个跑道，一个跑道一次只能有一个学生在上面跑步，一旦所有跑道在使用，那么后面的学生就需要等待，直到有一个学生不跑了</p><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><pre><code>public class SemaphoreTest {   private static final int THREAD_COUNT = 10;   private static ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);   // 创建5个许可，允许5个并发执行   private static Semaphore s = new Semaphore(5);   public static void main(String[] args) {           //创建10个线程执行任务           for (int i = 0; i &lt; THREAD_COUNT; i++) {               executorService.execute(new Runnable() {                   @Override                   public void run() {                       try {                           //同时只能有5个线程并发执行保存数据的任务                           s.acquire();                           System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot; 保存数据&quot;);                           Thread.sleep(2000);                           //5个线程保存完数据，释放1个许可，其他的线程才能获取许可，继续执行保存数据的任务                           s.release();                           System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot; 释放许可&quot;);                       } catch (InterruptedException e) {                           e.printStackTrace();                       }                   }               });           }           executorService.shutdown();       }   }</code></pre><p>结果：10个线程保存数据，但是只允许5个线程并发的执行，当5个线程都保存完数据以后，释放许可，其他线程才能拿到许可继续保存数据，直到10个线程都保存完数据释放许可为止。</p>]]></content>
    
    <summary type="html">
    
      Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，保证合理的使用公共资源。
    
    </summary>
    
      <category term="Thread" scheme="http://yoursite.com/categories/Thread/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
      <category term="Semaphpore" scheme="http://yoursite.com/tags/Semaphpore/"/>
    
  </entry>
  
  <entry>
    <title>多线程-CountDownLatch</title>
    <link href="http://yoursite.com/2019/02/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B-CountDownLatch/"/>
    <id>http://yoursite.com/2019/02/20/多线程-CountDownLatch/</id>
    <published>2019-02-20T04:01:20.000Z</published>
    <updated>2019-02-20T04:04:14.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h2><p>在一些应用场合中，需要等待某个条件达到要求后才能做后面的事情；同时当线程都完成后也会触发事件，以便进行后面的操作。这个时候就可以使用CountDownLatch。CountDownLatch最重要的方法是countDown()和await()，前者主要是倒数一次，后者是等待倒数到0，如果没有到达0，就只有阻塞等待了。</p><h2 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h2><p>应用程序的主线程希望在负责启动框架服务的线程已经完成之后再执行。在例子中，模拟了一个应用的启动类，具体实现如下。</p><p>Service.java：所有服务的基类，具体实现在execute方法实现。</p><pre><code>class Service implements Runnable {private CountDownLatch latch;public Service(CountDownLatch latch) {    this.latch = latch;}@Overridepublic void run() {    try {        execute();    } finally {        if (latch != null)            latch.countDown();    }}public void execute() {}}</code></pre><p>HealthCheckService.java：服务具体实现类，类似的还有DatabaseCheckerService，这里我们使用TimeUnit.SECONDS.sleep模拟长时间的操作。</p><pre><code>class HealthCheckService extends Service {public HealthCheckService(CountDownLatch latch) {    super(latch);}@Overridepublic void execute() {    try {        TimeUnit.SECONDS.sleep(2);    } catch (InterruptedException e) {        e.printStackTrace();    }}</code></pre><p>}<br>Application.java：应用启动类，使用线程池执行每个服务的任务。负责初始化闭锁，然后等待，直到所有服务都被检测完。</p><pre><code>class Application {    private CountDownLatch latch;    public void startUp() throws Exception {        latch = new CountDownLatch(2);        List&lt;Service&gt; services = new ArrayList&lt;&gt;();        services.add(new DatabaseCheckerService(latch));        services.add(new HealthCheckService(latch));        Executor executor = Executors.newFixedThreadPool(services.size());        for (Service service : services) {            executor.execute(service);        }        latch.await();        System.out.println(&quot;all service is start up&quot;);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      CountDownLatch最重要的方法是countDown()和await()，前者主要是倒数一次，后者是等待倒数到0，如果没有到达0，就只有阻塞等待了。
    
    </summary>
    
      <category term="Thread" scheme="http://yoursite.com/categories/Thread/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
      <category term="CountDownLatch" scheme="http://yoursite.com/tags/CountDownLatch/"/>
    
  </entry>
  
  <entry>
    <title>多线程-5种状态</title>
    <link href="http://yoursite.com/2019/02/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B-5%E7%A7%8D%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2019/02/19/多线程-5种状态/</id>
    <published>2019-02-19T06:42:33.000Z</published>
    <updated>2019-02-19T06:51:58.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>当new出线程对象，并没有调用该对象的start方法，这是线程处于创建状态。 </p><h2 id="就绪"><a href="#就绪" class="headerlink" title="就绪"></a>就绪</h2><p>当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，只是告诉CPU我已经进入了等待被调用的状态了，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。 </p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。 </p><h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><p>线程正在运行的时候，被暂停，通常是为了等待某个事件的发生(比如说某项资源就绪)之后再继续运行。sleep，suspend，wait等方法都可以导致线程阻塞。 </p><h2 id="死亡"><a href="#死亡" class="headerlink" title="死亡"></a>死亡</h2><p>如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪。</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="1-Thread-类中的start-和-run-方法有什么区别？"><a href="#1-Thread-类中的start-和-run-方法有什么区别？" class="headerlink" title="1.Thread 类中的start() 和 run() 方法有什么区别？"></a>1.Thread 类中的start() 和 run() 方法有什么区别？</h2><p>当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。</p>]]></content>
    
    <summary type="html">
    
      在Java当中，线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。
    
    </summary>
    
      <category term="Thread" scheme="http://yoursite.com/categories/Thread/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Netty-实战2（长连接心跳）</title>
    <link href="http://yoursite.com/2019/02/19/Netty-%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%BF%83%E8%B7%B3%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/19/Netty-长连接心跳（2）/</id>
    <published>2019-02-19T03:34:36.000Z</published>
    <updated>2019-02-19T04:13:27.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>netty服务端通过一个Map保存所有连接上来的客户端SocketChannel,客户端的Id作为Map的key。每次服务器端如果要向某个客户端发送消息，只需根据ClientId取出对应的SocketChannel,往里面写入message即可。心跳检测通过IdleEvent事件，定时向服务端放送Ping消息，检测SocketChannel是否终断。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="Client模块"><a href="#Client模块" class="headerlink" title="Client模块"></a>Client模块</h2><h3 id="NettyClientBootstrap"><a href="#NettyClientBootstrap" class="headerlink" title="NettyClientBootstrap"></a>NettyClientBootstrap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.AskMsg;</span><br><span class="line">import com.yao.module.AskParams;</span><br><span class="line">import com.yao.module.Constants;</span><br><span class="line">import com.yao.module.LoginMsg;</span><br><span class="line">import io.netty.bootstrap.Bootstrap;</span><br><span class="line">import io.netty.channel.ChannelFuture;</span><br><span class="line">import io.netty.channel.ChannelInitializer;</span><br><span class="line">import io.netty.channel.ChannelOption;</span><br><span class="line">import io.netty.channel.EventLoopGroup;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line">import io.netty.handler.codec.serialization.ClassResolvers;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectDecoder;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectEncoder;</span><br><span class="line">import io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line">import io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class="line">import io.netty.util.concurrent.EventExecutorGroup;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class NettyClientBootstrap &#123;</span><br><span class="line">    private int port;</span><br><span class="line">    private String host;</span><br><span class="line">    private SocketChannel socketChannel;</span><br><span class="line">    private static final EventExecutorGroup group = new DefaultEventExecutorGroup(20);</span><br><span class="line">    public NettyClientBootstrap(int port, String host) throws InterruptedException &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">        this.host = host;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line">    private void start() throws InterruptedException &#123;</span><br><span class="line">        EventLoopGroup eventLoopGroup=new NioEventLoopGroup();</span><br><span class="line">        Bootstrap bootstrap=new Bootstrap();</span><br><span class="line">        bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">        bootstrap.option(ChannelOption.SO_KEEPALIVE,true);</span><br><span class="line">        bootstrap.group(eventLoopGroup);</span><br><span class="line">        bootstrap.remoteAddress(host,port);</span><br><span class="line">        bootstrap.handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void initChannel(SocketChannel socketChannel) throws Exception &#123;</span><br><span class="line">                socketChannel.pipeline().addLast(new IdleStateHandler(20,10,0));</span><br><span class="line">                socketChannel.pipeline().addLast(new ObjectEncoder());</span><br><span class="line">                socketChannel.pipeline().addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));</span><br><span class="line">                socketChannel.pipeline().addLast(new NettyClientHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ChannelFuture future =bootstrap.connect(host,port).sync();</span><br><span class="line">        if (future.isSuccess()) &#123;</span><br><span class="line">            socketChannel = (SocketChannel)future.channel();</span><br><span class="line">            System.out.println(&quot;connect server  成功---------&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[]args) throws InterruptedException &#123;</span><br><span class="line">        Constants.setClientId(&quot;001&quot;);</span><br><span class="line">        NettyClientBootstrap bootstrap=new NettyClientBootstrap(9999,&quot;localhost&quot;);</span><br><span class="line"></span><br><span class="line">        LoginMsg loginMsg=new LoginMsg();</span><br><span class="line">        loginMsg.setPassword(&quot;yao&quot;);</span><br><span class="line">        loginMsg.setUserName(&quot;robin&quot;);</span><br><span class="line">        bootstrap.socketChannel.writeAndFlush(loginMsg);</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(3);</span><br><span class="line">            AskMsg askMsg=new AskMsg();</span><br><span class="line">            AskParams askParams=new AskParams();</span><br><span class="line">            askParams.setAuth(&quot;authToken&quot;);</span><br><span class="line">            askMsg.setParams(askParams);</span><br><span class="line">            bootstrap.socketChannel.writeAndFlush(askMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NettyClientHandler"><a href="#NettyClientHandler" class="headerlink" title="NettyClientHandler"></a>NettyClientHandler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.*;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line">import io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line">import io.netty.util.ReferenceCountUtil;</span><br><span class="line"></span><br><span class="line">public class NettyClientHandler extends SimpleChannelInboundHandler&lt;BaseMsg&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception &#123;</span><br><span class="line">        if (evt instanceof IdleStateEvent) &#123;</span><br><span class="line">            IdleStateEvent e = (IdleStateEvent) evt;</span><br><span class="line">            switch (e.state()) &#123;</span><br><span class="line">                case WRITER_IDLE:</span><br><span class="line">                    PingMsg pingMsg=new PingMsg();</span><br><span class="line">                    ctx.writeAndFlush(pingMsg);</span><br><span class="line">                    System.out.println(&quot;send ping to server----------&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void messageReceived(ChannelHandlerContext channelHandlerContext, BaseMsg baseMsg) throws Exception &#123;</span><br><span class="line">        MsgType msgType=baseMsg.getType();</span><br><span class="line">        switch (msgType)&#123;</span><br><span class="line">            case LOGIN:&#123;</span><br><span class="line">                //向服务器发起登录</span><br><span class="line">                LoginMsg loginMsg=new LoginMsg();</span><br><span class="line">                loginMsg.setPassword(&quot;yao&quot;);</span><br><span class="line">                loginMsg.setUserName(&quot;robin&quot;);</span><br><span class="line">                channelHandlerContext.writeAndFlush(loginMsg);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case PING:&#123;</span><br><span class="line">                System.out.println(&quot;receive ping from server----------&quot;);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case ASK:&#123;</span><br><span class="line">                ReplyClientBody replyClientBody=new ReplyClientBody(&quot;client info **** !!!&quot;);</span><br><span class="line">                ReplyMsg replyMsg=new ReplyMsg();</span><br><span class="line">                replyMsg.setBody(replyClientBody);</span><br><span class="line">                channelHandlerContext.writeAndFlush(replyMsg);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case REPLY:&#123;</span><br><span class="line">                ReplyMsg replyMsg=(ReplyMsg)baseMsg;</span><br><span class="line">                ReplyServerBody replyServerBody=(ReplyServerBody)replyMsg.getBody();</span><br><span class="line">                System.out.println(&quot;receive client msg: &quot;+replyServerBody.getServerInfo());</span><br><span class="line">            &#125;</span><br><span class="line">            default:break;</span><br><span class="line">        &#125;</span><br><span class="line">        ReferenceCountUtil.release(msgType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Server模块"><a href="#Server模块" class="headerlink" title="Server模块"></a>Server模块</h2><h3 id="NettyChannelMap"><a href="#NettyChannelMap" class="headerlink" title="NettyChannelMap"></a>NettyChannelMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import io.netty.channel.Channel;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class NettyChannelMap &#123;</span><br><span class="line">    private static Map&lt;String,SocketChannel&gt; map=new ConcurrentHashMap&lt;String, SocketChannel&gt;();</span><br><span class="line">    public static void add(String clientId,SocketChannel socketChannel)&#123;</span><br><span class="line">        map.put(clientId,socketChannel);</span><br><span class="line">    &#125;</span><br><span class="line">    public static Channel get(String clientId)&#123;</span><br><span class="line">       return map.get(clientId);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void remove(SocketChannel socketChannel)&#123;</span><br><span class="line">        for (Map.Entry entry:map.entrySet())&#123;</span><br><span class="line">            if (entry.getValue()==socketChannel)&#123;</span><br><span class="line">                map.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NettyServerBootstrap"><a href="#NettyServerBootstrap" class="headerlink" title="NettyServerBootstrap"></a>NettyServerBootstrap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.AskMsg;</span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line">import io.netty.handler.codec.serialization.ClassResolvers;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectDecoder;</span><br><span class="line">import io.netty.handler.codec.serialization.ObjectEncoder;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class NettyServerBootstrap &#123;</span><br><span class="line">    private int port;</span><br><span class="line">    private SocketChannel socketChannel;</span><br><span class="line">    public NettyServerBootstrap(int port) throws InterruptedException &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">        bind();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void bind() throws InterruptedException &#123;</span><br><span class="line">        EventLoopGroup boss=new NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup worker=new NioEventLoopGroup();</span><br><span class="line">        ServerBootstrap bootstrap=new ServerBootstrap();</span><br><span class="line">        bootstrap.group(boss,worker);</span><br><span class="line">        bootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">        bootstrap.option(ChannelOption.SO_BACKLOG, 128);</span><br><span class="line">        bootstrap.option(ChannelOption.TCP_NODELAY, true);</span><br><span class="line">        bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);</span><br><span class="line">        bootstrap.childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void initChannel(SocketChannel socketChannel) throws Exception &#123;</span><br><span class="line">                ChannelPipeline p = socketChannel.pipeline();</span><br><span class="line">                p.addLast(new ObjectEncoder());</span><br><span class="line">                p.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));</span><br><span class="line">                p.addLast(new NettyServerHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ChannelFuture f= bootstrap.bind(port).sync();</span><br><span class="line">        if(f.isSuccess())&#123;</span><br><span class="line">            System.out.println(&quot;server start---------------&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String []args) throws InterruptedException &#123;</span><br><span class="line">        NettyServerBootstrap bootstrap=new NettyServerBootstrap(9999);</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            SocketChannel channel=(SocketChannel)NettyChannelMap.get(&quot;001&quot;);</span><br><span class="line">            if(channel!=null)&#123;</span><br><span class="line">                AskMsg askMsg=new AskMsg();</span><br><span class="line">                channel.writeAndFlush(askMsg);</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.SECONDS.sleep(10);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NettyServerHandler"><a href="#NettyServerHandler" class="headerlink" title="NettyServerHandler"></a>NettyServerHandler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.yao;</span><br><span class="line"></span><br><span class="line">import com.yao.module.*;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.util.ReferenceCountUtil;</span><br><span class="line"></span><br><span class="line">public class NettyServerHandler extends SimpleChannelInboundHandler&lt;BaseMsg&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        NettyChannelMap.remove((SocketChannel)ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void messageReceived(ChannelHandlerContext channelHandlerContext, BaseMsg baseMsg) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        if(MsgType.LOGIN.equals(baseMsg.getType()))&#123;</span><br><span class="line">            LoginMsg loginMsg=(LoginMsg)baseMsg;</span><br><span class="line">            if(&quot;robin&quot;.equals(loginMsg.getUserName())&amp;&amp;&quot;yao&quot;.equals(loginMsg.getPassword()))&#123;</span><br><span class="line">                //登录成功,把channel存到服务端的map中</span><br><span class="line">                NettyChannelMap.add(loginMsg.getClientId(),(SocketChannel)channelHandlerContext.channel());</span><br><span class="line">                System.out.println(&quot;client&quot;+loginMsg.getClientId()+&quot; 登录成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(NettyChannelMap.get(baseMsg.getClientId())==null)&#123;</span><br><span class="line">                    //说明未登录，或者连接断了，服务器向客户端发起登录请求，让客户端重新登录</span><br><span class="line">                    LoginMsg loginMsg=new LoginMsg();</span><br><span class="line">                    channelHandlerContext.channel().writeAndFlush(loginMsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        switch (baseMsg.getType())&#123;</span><br><span class="line">            case PING:&#123;</span><br><span class="line">                PingMsg pingMsg=(PingMsg)baseMsg;</span><br><span class="line">                PingMsg replyPing=new PingMsg();</span><br><span class="line">                NettyChannelMap.get(pingMsg.getClientId()).writeAndFlush(replyPing);</span><br><span class="line">            &#125;break;</span><br><span class="line">            case ASK:&#123;</span><br><span class="line">                //收到客户端的请求</span><br><span class="line">                AskMsg askMsg=(AskMsg)baseMsg;</span><br><span class="line">                if(&quot;authToken&quot;.equals(askMsg.getParams().getAuth()))&#123;</span><br><span class="line">                    ReplyServerBody replyBody=new ReplyServerBody(&quot;server info $$$$ !!!&quot;);</span><br><span class="line">                    ReplyMsg replyMsg=new ReplyMsg();</span><br><span class="line">                    replyMsg.setBody(replyBody);</span><br><span class="line">                    NettyChannelMap.get(askMsg.getClientId()).writeAndFlush(replyMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;break;</span><br><span class="line">            case REPLY:&#123;</span><br><span class="line">                //收到客户端回复</span><br><span class="line">                ReplyMsg replyMsg=(ReplyMsg)baseMsg;</span><br><span class="line">                ReplyClientBody clientBody=(ReplyClientBody)replyMsg.getBody();</span><br><span class="line">                System.out.println(&quot;receive client msg: &quot;+clientBody.getClientInfo());</span><br><span class="line">            &#125;break;</span><br><span class="line">            default:break;</span><br><span class="line">        &#125;</span><br><span class="line">        ReferenceCountUtil.release(baseMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Share模块"><a href="#Share模块" class="headerlink" title="Share模块"></a>Share模块</h2><h3 id="AskMsg"><a href="#AskMsg" class="headerlink" title="AskMsg"></a>AskMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 请求类型的消息</span><br><span class="line"> */</span><br><span class="line">public class AskMsg extends BaseMsg &#123;</span><br><span class="line">    public AskMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.ASK);</span><br><span class="line">    &#125;</span><br><span class="line">    private AskParams params;</span><br><span class="line"></span><br><span class="line">    public AskParams getParams() &#123;</span><br><span class="line">        return params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setParams(AskParams params) &#123;</span><br><span class="line">        this.params = params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AskParams"><a href="#AskParams" class="headerlink" title="AskParams"></a>AskParams</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class AskParams implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    private String auth;</span><br><span class="line"></span><br><span class="line">    public String getAuth() &#123;</span><br><span class="line">        return auth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAuth(String auth) &#123;</span><br><span class="line">        this.auth = auth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BaseMsg"><a href="#BaseMsg" class="headerlink" title="BaseMsg"></a>BaseMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 必须实现序列,serialVersionUID 一定要有</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public abstract class BaseMsg  implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    private MsgType type;</span><br><span class="line">    //必须唯一，否者会出现channel调用混乱</span><br><span class="line">    private String clientId;</span><br><span class="line"></span><br><span class="line">    //初始化客户端id</span><br><span class="line">    public BaseMsg() &#123;</span><br><span class="line">        this.clientId = Constants.getClientId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getClientId() &#123;</span><br><span class="line">        return clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setClientId(String clientId) &#123;</span><br><span class="line">        this.clientId = clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MsgType getType() &#123;</span><br><span class="line">        return type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setType(MsgType type) &#123;</span><br><span class="line">        this.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Constants &#123;</span><br><span class="line">    private static String clientId;</span><br><span class="line"></span><br><span class="line">    public static String getClientId() &#123;</span><br><span class="line">        return clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void setClientId(String clientId) &#123;</span><br><span class="line">        Constants.clientId = clientId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoginMsg"><a href="#LoginMsg" class="headerlink" title="LoginMsg"></a>LoginMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 登录验证类型的消息</span><br><span class="line"> */</span><br><span class="line">public class LoginMsg extends BaseMsg &#123;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String password;</span><br><span class="line">    public LoginMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.LOGIN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MsgType"><a href="#MsgType" class="headerlink" title="MsgType"></a>MsgType</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public enum  MsgType &#123;</span><br><span class="line">    PING,ASK,REPLY,LOGIN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PingMsg"><a href="#PingMsg" class="headerlink" title="PingMsg"></a>PingMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 心跳检测的消息类型</span><br><span class="line"> */</span><br><span class="line">public class PingMsg extends BaseMsg &#123;</span><br><span class="line">    public PingMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.PING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyBody"><a href="#ReplyBody" class="headerlink" title="ReplyBody"></a>ReplyBody</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class ReplyBody implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyClientBody"><a href="#ReplyClientBody" class="headerlink" title="ReplyClientBody"></a>ReplyClientBody</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public class ReplyClientBody extends ReplyBody &#123;</span><br><span class="line">    private String clientInfo;</span><br><span class="line"></span><br><span class="line">    public ReplyClientBody(String clientInfo) &#123;</span><br><span class="line">        this.clientInfo = clientInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getClientInfo() &#123;</span><br><span class="line">        return clientInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setClientInfo(String clientInfo) &#123;</span><br><span class="line">        this.clientInfo = clientInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyMsg"><a href="#ReplyMsg" class="headerlink" title="ReplyMsg"></a>ReplyMsg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public class ReplyMsg extends BaseMsg &#123;</span><br><span class="line">    public ReplyMsg() &#123;</span><br><span class="line">        super();</span><br><span class="line">        setType(MsgType.REPLY);</span><br><span class="line">    &#125;</span><br><span class="line">    private ReplyBody body;</span><br><span class="line"></span><br><span class="line">    public ReplyBody getBody() &#123;</span><br><span class="line">        return body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBody(ReplyBody body) &#123;</span><br><span class="line">        this.body = body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReplyServerBody"><a href="#ReplyServerBody" class="headerlink" title="ReplyServerBody"></a>ReplyServerBody</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.yao.module;</span><br><span class="line"></span><br><span class="line">public class ReplyServerBody extends ReplyBody &#123;</span><br><span class="line">    private String serverInfo;</span><br><span class="line">    public ReplyServerBody(String serverInfo) &#123;</span><br><span class="line">        this.serverInfo = serverInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getServerInfo() &#123;</span><br><span class="line">        return serverInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setServerInfo(String serverInfo) &#123;</span><br><span class="line">        this.serverInfo = serverInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码：</p><p><a href="https://github.com/maojingios/MKNettyLongConnection" target="_blank" rel="noopener">https://github.com/maojingios/MKNettyLongConnection</a></p><p>（以上仅个人学习笔记，供参考！）</p>]]></content>
    
    <summary type="html">
    
      通过netty实现服务端与客户端的长连接通讯，及心跳检测。
    
    </summary>
    
      <category term="Netty" scheme="http://yoursite.com/categories/Netty/"/>
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty-实战1（简单客户端/服务端通信）</title>
    <link href="http://yoursite.com/2019/02/18/Netty-%E7%AE%80%E5%8D%95%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/18/Netty-简单客户端-服务端通信（1）/</id>
    <published>2019-02-18T14:48:26.000Z</published>
    <updated>2019-02-19T04:14:53.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>demo使用IntelliJ IDEA，基于Spring Boot。结构如下图：</p><img src="/2019/02/18/Netty-简单客户端-服务端通信（1）/image1.jpg"><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-Client"><a href="#1-Client" class="headerlink" title="1.Client"></a>1.Client</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.client;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.Bootstrap;</span><br><span class="line">import io.netty.channel.ChannelFuture;</span><br><span class="line">import io.netty.channel.ChannelInitializer;</span><br><span class="line">import io.netty.channel.EventLoopGroup;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line">import io.netty.handler.codec.bytes.ByteArrayEncoder;</span><br><span class="line">import io.netty.handler.codec.string.StringEncoder;</span><br><span class="line">import io.netty.handler.stream.ChunkedWriteHandler;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    private final String host;</span><br><span class="line">    private final int port;</span><br><span class="line"></span><br><span class="line">    public Client() &#123;</span><br><span class="line">        this(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Client(int port) &#123;</span><br><span class="line">        this(&quot;localhost&quot;, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Client(String host, int port) &#123;</span><br><span class="line">        this.host = host;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            Bootstrap b = new Bootstrap();</span><br><span class="line">            b.group(group) // 注册线程池</span><br><span class="line">                    .channel(NioSocketChannel.class) // 使用NioSocketChannel来作为连接用的channel类</span><br><span class="line">                    .remoteAddress(new InetSocketAddress(this.host, this.port)) // 绑定连接端口和host信息</span><br><span class="line">                    .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; // 绑定连接初始化器</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            System.out.println(&quot;正在连接中...&quot;);</span><br><span class="line">                            ch.pipeline().addLast(new StringEncoder(Charset.forName(&quot;GBK&quot;)));</span><br><span class="line">                            ch.pipeline().addLast(new ClientHandler());</span><br><span class="line">                            ch.pipeline().addLast(new ByteArrayEncoder());</span><br><span class="line">                            ch.pipeline().addLast(new ChunkedWriteHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            // System.out.println(&quot;服务端连接成功..&quot;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture cf = b.connect().sync(); // 异步连接服务器</span><br><span class="line">            System.out.println(&quot;服务端连接成功...&quot;); // 连接完成</span><br><span class="line"></span><br><span class="line">            cf.channel().closeFuture().sync(); // 异步等待关闭连接channel</span><br><span class="line">            System.out.println(&quot;连接已关闭..&quot;); // 关闭完成</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            group.shutdownGracefully().sync(); // 释放线程池资源</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        new Client(&quot;127.0.0.1&quot;, 8888).start(); // 连接127.0.0.1/65535，并启动</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ClientHandler"><a href="#2-ClientHandler" class="headerlink" title="2.ClientHandler"></a>2.ClientHandler</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.client;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.ByteBufUtil;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">public class ClientHandler extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 向服务端发送数据</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;客户端与服务端通道-开启：&quot; + ctx.channel().localAddress() + &quot;channelActive&quot;);</span><br><span class="line"></span><br><span class="line">        String sendInfo = &quot;Hello 这里是客户端  你好啊！&quot;;</span><br><span class="line">        System.out.println(&quot;客户端准备发送的数据包：&quot; + sendInfo);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(sendInfo, CharsetUtil.UTF_8)); // 必须有flush</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * channelInactive</span><br><span class="line">     *</span><br><span class="line">     * channel 通道 Inactive 不活跃的</span><br><span class="line">     *</span><br><span class="line">     * 当客户端主动断开服务端的链接后，这个通道就是不活跃的。也就是说客户端与服务端的关闭了通信通道并且不可以传输数据</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;客户端与服务端通道-关闭：&quot; + ctx.channel().localAddress() + &quot;channelInactive&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;读取客户端通道信息..&quot;);</span><br><span class="line">        ByteBuf buf = msg.readBytes(msg.readableBytes());</span><br><span class="line">        System.out.println(</span><br><span class="line">                &quot;客户端接收到的服务端信息:&quot; + ByteBufUtil.hexDump(buf) + &quot;; 数据包为:&quot; + buf.toString(Charset.forName(&quot;utf-8&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">        System.out.println(&quot;异常退出:&quot; + cause.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Server"><a href="#3-Server" class="headerlink" title="3.Server"></a>3.Server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.server;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.channel.ChannelFuture;</span><br><span class="line">import io.netty.channel.ChannelInitializer;</span><br><span class="line">import io.netty.channel.ChannelOption;</span><br><span class="line">import io.netty.channel.EventLoopGroup;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line">import io.netty.handler.codec.bytes.ByteArrayEncoder;</span><br><span class="line">import io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    private final int port;</span><br><span class="line"></span><br><span class="line">    public Server(int port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap sb = new ServerBootstrap();</span><br><span class="line">            sb.option(ChannelOption.SO_BACKLOG, 1024);</span><br><span class="line">            sb.group(group, bossGroup) // 绑定线程池</span><br><span class="line">                    .channel(NioServerSocketChannel.class) // 指定使用的channel</span><br><span class="line">                    .localAddress(this.port)// 绑定监听端口</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; // 绑定客户端连接时候触发操作</span><br><span class="line"></span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            System.out.println(&quot;报告&quot;);</span><br><span class="line">                            System.out.println(&quot;信息：有一客户端链接到本服务端&quot;);</span><br><span class="line">                            System.out.println(&quot;IP:&quot; + ch.localAddress().getHostName());</span><br><span class="line">                            System.out.println(&quot;Port:&quot; + ch.localAddress().getPort());</span><br><span class="line">                            System.out.println(&quot;报告完毕&quot;);</span><br><span class="line"></span><br><span class="line">                            ch.pipeline().addLast(new StringEncoder(Charset.forName(&quot;GBK&quot;)));</span><br><span class="line">                            ch.pipeline().addLast(new ServerHandler()); // 客户端触发操作</span><br><span class="line">                            ch.pipeline().addLast(new ByteArrayEncoder());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture cf = sb.bind().sync(); // 服务器异步创建绑定</span><br><span class="line">            System.out.println(Server.class + &quot; 启动正在监听： &quot; + cf.channel().localAddress());</span><br><span class="line">            cf.channel().closeFuture().sync(); // 关闭服务器通道</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            group.shutdownGracefully().sync(); // 释放线程池资源</span><br><span class="line">            bossGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        new Server(8888).start(); // 启动</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-ServerHandler"><a href="#4-ServerHandler" class="headerlink" title="4.ServerHandler"></a>4.ServerHandler</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">package com.mj.hello.netty.server;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedOutputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.ChannelFutureListener;</span><br><span class="line">import io.netty.channel.ChannelHandlerContext;</span><br><span class="line">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"></span><br><span class="line">public class ServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * channelAction</span><br><span class="line">     *</span><br><span class="line">     * channel 通道 action 活跃的</span><br><span class="line">     *</span><br><span class="line">     * 当客户端主动链接服务端的链接后，这个通道就是活跃的了。也就是客户端与服务端建立了通信通道并且可以传输数据</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(ctx.channel().localAddress().toString() + &quot; 通道已激活！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * channelInactive</span><br><span class="line">     *</span><br><span class="line">     * channel 通道 Inactive 不活跃的</span><br><span class="line">     *</span><br><span class="line">     * 当客户端主动断开服务端的链接后，这个通道就是不活跃的。也就是说客户端与服务端的关闭了通信通道并且不可以传输数据</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(ctx.channel().localAddress().toString() + &quot; 通道不活跃！&quot;);</span><br><span class="line">        // 关闭流</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @author Taowd</span><br><span class="line">     * TODO  此处用来处理收到的数据中含有中文的时  出现乱码的问题</span><br><span class="line">     * 2017年8月31日 下午7:57:28</span><br><span class="line">     * @param buf</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getMessage(ByteBuf buf) &#123;</span><br><span class="line">        byte[] con = new byte[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(con);</span><br><span class="line">        try &#123;</span><br><span class="line">            return new String(con, &quot;UTF-8&quot;);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 功能：读取服务器发送过来的信息</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        // 第一种：接收字符串时的处理</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        String rev = getMessage(buf);</span><br><span class="line">        System.out.println(&quot;客户端收到服务器数据:&quot; + rev);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 功能：读取完毕客户端发送过来的数据之后的操作</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;服务端接收数据完毕..&quot;);</span><br><span class="line">        // 第一种方法：写一个空的buf，并刷新写出区域。完成后关闭sock channel连接。</span><br><span class="line">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">        // ctx.flush();</span><br><span class="line">        // ctx.flush(); //</span><br><span class="line">        // 第二种方法：在client端关闭channel连接，这样的话，会触发两次channelReadComplete方法。</span><br><span class="line">        // ctx.flush().close().sync(); // 第三种：改成这种写法也可以，但是这中写法，没有第一种方法的好。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 功能：服务端发生异常的操作</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">        System.out.println(&quot;异常信息：\r\n&quot; + cause.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>先运行Server,再运行Client.</p><p>（以上仅个人学习笔记，供参考！）</p>]]></content>
    
    <summary type="html">
    
      这里的demo实现client与server通信。
    
    </summary>
    
      <category term="Netty" scheme="http://yoursite.com/categories/Netty/"/>
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty-初识（一）</title>
    <link href="http://yoursite.com/2019/02/18/Netty-%E5%88%9D%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/18/Netty-初识（一）/</id>
    <published>2019-02-18T11:25:13.000Z</published>
    <updated>2019-02-18T14:49:08.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Netty是由<a href="https://baike.baidu.com/item/JBOSS" target="_blank" rel="noopener">JBOSS</a>提供的一个<a href="https://baike.baidu.com/item/java%E5%BC%80%E6%BA%90/10795649" target="_blank" rel="noopener">java开源</a>框架。Netty提供异步的、<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519" target="_blank" rel="noopener">事件驱动</a>的网络应用程序框架和工具，用以快速开发高性能、高可靠性的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%99%A8/99096" target="_blank" rel="noopener">网络服务器</a>和客户端程序。</p><p>也就是说，Netty 是一个基于NIO的客户、服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316" target="_blank" rel="noopener">服务端</a>应用。Netty相当于简化和流线化了网络应用的编程开发过程，例如：基于TCP和UDP的socket服务开发。</p><p>“快速”和“简单”并不用产生维护性或性能上的问题。Netty 是一个吸收了多种协议（包括FTP、SMTP、HTTP等各种二进制文本协议）的实现经验，并经过相当精心设计的项目。最终，Netty 成功的找到了一种方式，在保证易于开发的同时还保证了其应用的性能，稳定性和伸缩性。</p><p>（来源：百度百科）</p><h1 id="为什么Netty受欢迎"><a href="#为什么Netty受欢迎" class="headerlink" title="为什么Netty受欢迎"></a>为什么Netty受欢迎</h1><p>目前像Facebook 和 Instagram 以及流行 开源项目如 Infinispan, HornetQ, Vert.x, Apache Cassandra 和 Elasticsearch 等，都利用Netty强大的对于网络抽象的核心代码。为什么Netty如此受欢迎？</p><h2 id="1-高并发"><a href="#1-高并发" class="headerlink" title="1.高并发"></a>1.高并发</h2><p>Netty是一款基于NIO（Nonblocking I/O，非阻塞IO）开发的网络通信框架，对比于BIO（Blocking I/O，阻塞IO），他的并发性能得到了很大提高。如下两张图：</p><p>BIO：</p><img src="/2019/02/18/Netty-初识（一）/image1.png"><p>NIO：</p><img src="/2019/02/18/Netty-初识（一）/image2.png"><p>当一个连接建立之后，他有两个步骤要做：</p><p>1.是接收完客户端发过来的全部数据；</p><p>2.是服务端处理完请求业务之后返回response给客户端。</p><p>NIO和BIO的区别主要是在第一步：<br> 在BIO中，等待客户端发数据这个过程是阻塞的，这样就造成了一个线程只能处理一个请求的情况，而机器能支持的最大线程数是有限的，这就是为什么BIO不能支持高并发的原因。<br> 而NIO中，当一个Socket建立好之后，Thread并不会阻塞去接受这个Socket，而是将这个请求交给Selector，Selector会不断的去遍历所有的Socket，一旦有一个Socket建立完成，他会通知Thread，然后Thread处理完数据再返回给客户端——<em>这个过程是阻塞的</em>，这样就能让一个Thread处理更多的请求了。</p><p>下面两张图是基于BIO的处理流程和netty的处理流程，辅助你理解两种方式的差别：</p><p>BIO：</p><img src="/2019/02/18/Netty-初识（一）/image3.png"><p>NIO：</p><img src="/2019/02/18/Netty-初识（一）/image4.png"><h2 id="2-传输快"><a href="#2-传输快" class="headerlink" title="2.传输快"></a>2.传输快</h2><p>Netty的传输快其实也是依赖了NIO的一个特性——<em>零拷贝</em>。我们知道，Java的内存有堆内存、栈内存和字符串常量池等等，其中堆内存是占用内存空间最大的一块，也是Java对象存放的地方，一般我们的数据如果需要从IO读取到堆内存，中间需要经过Socket缓冲区，也就是说一个数据会被拷贝两次才能到达他的的终点，如果数据量大，就会造成不必要的资源浪费。<br> Netty针对这种情况，使用了NIO中的另一大特性——零拷贝，当他需要接收数据的时候，他会在堆内存之外开辟一块内存，数据就直接从IO读到了那块内存中去，在netty里面通过ByteBuf可以直接对这些数据进行直接操作，从而加快了传输速度。<br> 下两图就介绍了两种拷贝方式的区别：</p><p>传统拷贝：</p><img src="/2019/02/18/Netty-初识（一）/image5.png"><p>零拷贝：</p><img src="/2019/02/18/Netty-初识（一）/image6.png"><h2 id="3-Netty封装好"><a href="#3-Netty封装好" class="headerlink" title="3.Netty封装好"></a>3.Netty封装好</h2><p>下面我们看看阻塞I/O，非阻塞I/O与Netty代码：</p><p>阻塞I/O：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class PlainOioServer &#123;</span><br><span class="line"></span><br><span class="line">    public void serve(int port) throws IOException &#123;</span><br><span class="line">        final ServerSocket socket = new ServerSocket(port); </span><br><span class="line">        try &#123;</span><br><span class="line">            for (;;) &#123;</span><br><span class="line">                final Socket clientSocket = socket.accept();   </span><br><span class="line">                System.out.println(&quot;Accepted connection from &quot; + clientSocket);</span><br><span class="line"></span><br><span class="line">                new Thread(new Runnable() &#123;  </span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        OutputStream out;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            out = clientSocket.getOutputStream();</span><br><span class="line">                            out.write(&quot;Hi!\r\n&quot;.getBytes(Charset.forName(&quot;UTF-8&quot;)));   </span><br><span class="line">                            out.flush();</span><br><span class="line">                            clientSocket.close();         </span><br><span class="line"></span><br><span class="line">                        &#125; catch (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            try &#123;</span><br><span class="line">                                clientSocket.close();</span><br><span class="line">                            &#125; catch (IOException ex) &#123;</span><br><span class="line">                                // ignore on close</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();                                      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非阻塞I/O：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class PlainNioServer &#123;</span><br><span class="line">    public void serve(int port) throws IOException &#123;</span><br><span class="line">        ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class="line">        serverChannel.configureBlocking(false);</span><br><span class="line">        ServerSocket ss = serverChannel.socket();</span><br><span class="line">        InetSocketAddress address = new InetSocketAddress(port);</span><br><span class="line">        ss.bind(address);                                            //1</span><br><span class="line">        Selector selector = Selector.open();                        //2</span><br><span class="line">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);    //3</span><br><span class="line">        final ByteBuffer msg = ByteBuffer.wrap(&quot;Hi!\r\n&quot;.getBytes());</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                selector.select();                                    //4</span><br><span class="line">            &#125; catch (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                // handle exception</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();    //5</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (key.isAcceptable()) &#123;                //6</span><br><span class="line">                        ServerSocketChannel server =</span><br><span class="line">                                (ServerSocketChannel)key.channel();</span><br><span class="line">                        SocketChannel client = server.accept();</span><br><span class="line">                        client.configureBlocking(false);</span><br><span class="line">                        client.register(selector, SelectionKey.OP_WRITE |</span><br><span class="line">                                SelectionKey.OP_READ, msg.duplicate());    //7</span><br><span class="line">                        System.out.println(</span><br><span class="line">                                &quot;Accepted connection from &quot; + client);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (key.isWritable()) &#123;                //8</span><br><span class="line">                        SocketChannel client =</span><br><span class="line">                                (SocketChannel)key.channel();</span><br><span class="line">                        ByteBuffer buffer =</span><br><span class="line">                                (ByteBuffer)key.attachment();</span><br><span class="line">                        while (buffer.hasRemaining()) &#123;</span><br><span class="line">                            if (client.write(buffer) == 0) &#123;        //9</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        client.close();                    //10</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (IOException ex) &#123;</span><br><span class="line">                    key.cancel();</span><br><span class="line">                    try &#123;</span><br><span class="line">                        key.channel().close();</span><br><span class="line">                    &#125; catch (IOException cex) &#123;</span><br><span class="line">                        // 在关闭时忽略</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Netty：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class NettyOioServer &#123;</span><br><span class="line"></span><br><span class="line">    public void server(int port) throws Exception &#123;</span><br><span class="line">        final ByteBuf buf = Unpooled.unreleasableBuffer(</span><br><span class="line">                Unpooled.copiedBuffer(&quot;Hi!\r\n&quot;, Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">        EventLoopGroup group = new OioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap b = new ServerBootstrap();        //1</span><br><span class="line"></span><br><span class="line">            b.group(group)                                    //2</span><br><span class="line">             .channel(OioServerSocketChannel.class)</span><br><span class="line">             .localAddress(new InetSocketAddress(port))</span><br><span class="line">             .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;//3</span><br><span class="line">                 @Override</span><br><span class="line">                 public void initChannel(SocketChannel ch) </span><br><span class="line">                     throws Exception &#123;</span><br><span class="line">                     ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;            //4</span><br><span class="line">                         @Override</span><br><span class="line">                         public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                             ctx.writeAndFlush(buf.duplicate()).addListener(ChannelFutureListener.CLOSE);//5</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">            ChannelFuture f = b.bind().sync();  //6</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            group.shutdownGracefully().sync();        //7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看代码量，便知道高下。</p>]]></content>
    
    <summary type="html">
    
      Netty是由JBOSS提供的一个java开源框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。(来源：百度百科)
    
    </summary>
    
      <category term="Netty" scheme="http://yoursite.com/categories/Netty/"/>
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>RSA-JavaWeb基于RSA算法加解密</title>
    <link href="http://yoursite.com/2019/01/28/RSA-Java%20Web%E5%9F%BA%E4%BA%8ERSA%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>http://yoursite.com/2019/01/28/RSA-Java Web基于RSA算法加解密/</id>
    <published>2019-01-28T11:46:16.000Z</published>
    <updated>2019-01-28T13:29:07.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>我这里使用的是IntelliJ IDEA 2018.2.2版本。创建一个基于Spring boot+thymeleaf项目。</p><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml:"></a>1.pom.xml:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.60&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;net.sourceforge.nekohtml&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;nekohtml&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.9.22&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2.application.properties"></a>2.application.properties</h2><p>application.properties设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.mode=LEGACYHTML5</span><br><span class="line">spring.thymeleaf.encoding=utf-8</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br></pre></td></tr></table></figure><h2 id="3-js文件"><a href="#3-js文件" class="headerlink" title="3.js文件"></a>3.js文件</h2><p>在static包下面新建js文件包，将security.js和jquery-3.3.1.min.js两个js文件拷贝至js文件包下。（默认这两个文件是居家必备）</p><h2 id="4-页面"><a href="#4-页面" class="headerlink" title="4.页面"></a>4.页面</h2><p>在templates包下创建。</p><p>home.html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html SYSTEM &quot;http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;这是首页&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span th:text=&quot;$&#123;loginstate&#125;&quot;&gt;未登录&lt;/span&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;去登陆界面&quot; name=&quot;gotologin&quot; onclick=&quot;goToLogin()&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function goToLogin() &#123;</span><br><span class="line">            location.href = &quot;/gotologin&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>login.heml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html SYSTEM &quot;http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;../js/jquery-3.3.1.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../js/security.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;登陆&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;span th:text=&quot;$&#123;loginstate&#125;&quot;&gt;未登录&lt;/span&gt;</span><br><span class="line">    &lt;form method=&quot;post&quot; name=&quot;loginForm&quot; id=&quot;loginForm&quot; action=&quot;/login&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;pubkeyModulus&quot; id=&quot;pubkeyModulus&quot; th:value=&quot;$&#123;pubkeyModulus&#125;&quot;/&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;pubkeyExponent&quot; id=&quot;pubkeyExponent&quot; th:value=&quot;$&#123;pubkeyExponent&#125;&quot;/&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;/&gt; &lt;br/&gt;</span><br><span class="line">        密  码：&lt;input type=&quot;text&quot; name=&quot;password&quot; id=&quot;password&quot;/&gt; &lt;br/&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;登陆&quot; onclick=&quot;login()&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-RSAUtils"><a href="#5-RSAUtils" class="headerlink" title="5.RSAUtils"></a>5.RSAUtils</h2><p>在util包下面新建RSAUtils工具类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.security.KeyFactory;</span><br><span class="line">import java.security.KeyPair;</span><br><span class="line">import java.security.KeyPairGenerator;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.interfaces.RSAPrivateKey;</span><br><span class="line">import java.security.interfaces.RSAPublicKey;</span><br><span class="line">import java.security.spec.RSAPrivateKeySpec;</span><br><span class="line">import java.security.spec.RSAPublicKeySpec;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line"></span><br><span class="line">public class RSAUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 生成公钥和私钥</span><br><span class="line">     * @throws NoSuchAlgorithmException</span><br><span class="line">     */</span><br><span class="line">    public static HashMap&lt;String, Object&gt; getKeys() throws NoSuchAlgorithmException &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">        keyPairGen.initialize(1024);</span><br><span class="line">        KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">        map.put(&quot;public&quot;, publicKey);</span><br><span class="line">        map.put(&quot;private&quot;, privateKey);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 使用模和指数生成RSA公钥</span><br><span class="line">     * @param modulus 模</span><br><span class="line">     * @param exponent 指数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static RSAPublicKey getPublicKey(String modulus, String exponent) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BigInteger b1 = new BigInteger(modulus);</span><br><span class="line">            BigInteger b2 = new BigInteger(exponent);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">            RSAPublicKeySpec keySpec = new RSAPublicKeySpec(b1, b2);</span><br><span class="line">            return (RSAPublicKey) keyFactory.generatePublic(keySpec);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用模和指数生成RSA私钥 /None/NoPadding</span><br><span class="line">     * @param modulus 模</span><br><span class="line">     * @param exponent 指数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static RSAPrivateKey getPrivateKey(String modulus, String exponent) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BigInteger b1 = new BigInteger(modulus);</span><br><span class="line">            BigInteger b2 = new BigInteger(exponent);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">            RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(b1, b2);</span><br><span class="line">            return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 公钥加密</span><br><span class="line">     * @param data</span><br><span class="line">     * @param publicKey</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String encryptByPublicKey(String data, RSAPublicKey publicKey)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">        // 模长</span><br><span class="line">        int key_len = publicKey.getModulus().bitLength() / 8;</span><br><span class="line">        // 加密数据长度 &lt;= 模长-11</span><br><span class="line">        String[] datas = splitString(data, key_len - 11);</span><br><span class="line">        String mi = &quot;&quot;;</span><br><span class="line">        //如果明文长度大于模长-11则要分组加密</span><br><span class="line">        for (String s : datas) &#123;</span><br><span class="line">            mi += bcd2Str(cipher.doFinal(s.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">        return mi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私钥解密</span><br><span class="line">     * @param data</span><br><span class="line">     * @param privateKey</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String decryptByPrivateKey(String data, RSAPrivateKey privateKey)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(&quot;RSA&quot;, new org.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">        //模长</span><br><span class="line">        int key_len = privateKey.getModulus().bitLength() / 8;</span><br><span class="line">        byte[] bytes = data.getBytes();</span><br><span class="line">        byte[] bcd = ASCII_To_BCD(bytes, bytes.length);</span><br><span class="line">        //System.err.println(bcd.length);</span><br><span class="line">        //如果密文长度大于模长则要分组解密</span><br><span class="line">        String ming = &quot;&quot;;</span><br><span class="line">        byte[][] arrays = splitArray(bcd, key_len);</span><br><span class="line">        for(byte[] arr : arrays)&#123;</span><br><span class="line">            ming += new String(cipher.doFinal(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        return new  StringBuilder(ming).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * ASCII码转BCD码</span><br><span class="line">     */</span><br><span class="line">    public static byte[] ASCII_To_BCD(byte[] ascii, int asc_len) &#123;</span><br><span class="line">        byte[] bcd = new byte[asc_len / 2];</span><br><span class="line">        int j = 0;</span><br><span class="line">        for (int i = 0; i &lt; (asc_len + 1) / 2; i++) &#123;</span><br><span class="line">            bcd[i] = asc_to_bcd(ascii[j++]);</span><br><span class="line">            bcd[i] = (byte) (((j &gt;= asc_len) ? 0x00 : asc_to_bcd(ascii[j++])) + (bcd[i] &lt;&lt; 4));</span><br><span class="line">        &#125;</span><br><span class="line">        return bcd;</span><br><span class="line">    &#125;</span><br><span class="line">    public static byte asc_to_bcd(byte asc) &#123;</span><br><span class="line">        byte bcd;</span><br><span class="line"></span><br><span class="line">        if ((asc &gt;= &apos;0&apos;) &amp;&amp; (asc &lt;= &apos;9&apos;))</span><br><span class="line">            bcd = (byte) (asc - &apos;0&apos;);</span><br><span class="line">        else if ((asc &gt;= &apos;A&apos;) &amp;&amp; (asc &lt;= &apos;F&apos;))</span><br><span class="line">            bcd = (byte) (asc - &apos;A&apos; + 10);</span><br><span class="line">        else if ((asc &gt;= &apos;a&apos;) &amp;&amp; (asc &lt;= &apos;f&apos;))</span><br><span class="line">            bcd = (byte) (asc - &apos;a&apos; + 10);</span><br><span class="line">        else</span><br><span class="line">            bcd = (byte) (asc - 48);</span><br><span class="line">        return bcd;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * BCD转字符串</span><br><span class="line">     */</span><br><span class="line">    public static String bcd2Str(byte[] bytes) &#123;</span><br><span class="line">        char temp[] = new char[bytes.length * 2], val;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            val = (char) (((bytes[i] &amp; 0xf0) &gt;&gt; 4) &amp; 0x0f);</span><br><span class="line">            temp[i * 2] = (char) (val &gt; 9 ? val + &apos;A&apos; - 10 : val + &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">            val = (char) (bytes[i] &amp; 0x0f);</span><br><span class="line">            temp[i * 2 + 1] = (char) (val &gt; 9 ? val + &apos;A&apos; - 10 : val + &apos;0&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        return new String(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 拆分字符串</span><br><span class="line">     */</span><br><span class="line">    public static String[] splitString(String string, int len) &#123;</span><br><span class="line">        int x = string.length() / len;</span><br><span class="line">        int y = string.length() % len;</span><br><span class="line">        int z = 0;</span><br><span class="line">        if (y != 0) &#123;</span><br><span class="line">            z = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strings = new String[x + z];</span><br><span class="line">        String str = &quot;&quot;;</span><br><span class="line">        for (int i=0; i&lt;x+z; i++) &#123;</span><br><span class="line">            if (i==x+z-1 &amp;&amp; y!=0) &#123;</span><br><span class="line">                str = string.substring(i*len, i*len+y);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                str = string.substring(i*len, i*len+len);</span><br><span class="line">            &#125;</span><br><span class="line">            strings[i] = str;</span><br><span class="line">        &#125;</span><br><span class="line">        return strings;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *拆分数组</span><br><span class="line">     */</span><br><span class="line">    public static byte[][] splitArray(byte[] data,int len)&#123;</span><br><span class="line">        int x = data.length / len;</span><br><span class="line">        int y = data.length % len;</span><br><span class="line">        int z = 0;</span><br><span class="line">        if(y!=0)&#123;</span><br><span class="line">            z = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        byte[][] arrays = new byte[x+z][];</span><br><span class="line">        byte[] arr;</span><br><span class="line">        for(int i=0; i&lt;x+z; i++)&#123;</span><br><span class="line">            arr = new byte[len];</span><br><span class="line">            if(i==x+z-1 &amp;&amp; y!=0)&#123;</span><br><span class="line">                System.arraycopy(data, i*len, arr, 0, y);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.arraycopy(data, i*len, arr, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">            arrays[i] = arr;</span><br><span class="line">        &#125;</span><br><span class="line">        return arrays;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = getKeys();</span><br><span class="line">        //生成公钥和私钥</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) map.get(&quot;public&quot;);</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) map.get(&quot;private&quot;);</span><br><span class="line"></span><br><span class="line">        //模</span><br><span class="line">        String modulus = publicKey.getModulus().toString();</span><br><span class="line">        System.out.println(&quot;pubkey modulus=&quot;+modulus);</span><br><span class="line">        //公钥指数</span><br><span class="line">        String public_exponent = publicKey.getPublicExponent().toString();</span><br><span class="line">        System.out.println(&quot;pubkey exponent=&quot;+public_exponent);</span><br><span class="line">        //私钥指数</span><br><span class="line">        String private_exponent = privateKey.getPrivateExponent().toString();</span><br><span class="line">        System.out.println(&quot;private exponent=&quot;+private_exponent);</span><br><span class="line">        //明文</span><br><span class="line">        String ming = &quot;123456&quot;;</span><br><span class="line">        //使用模和指数生成公钥和私钥</span><br><span class="line">        RSAPublicKey pubKey = RSAUtils.getPublicKey(modulus, public_exponent);</span><br><span class="line">        RSAPrivateKey priKey = RSAUtils.getPrivateKey(modulus, private_exponent);</span><br><span class="line">        //加密后的密文</span><br><span class="line">        String mi = RSAUtils.encryptByPublicKey(ming, pubKey);</span><br><span class="line">        System.err.println(&quot;mi=&quot;+mi);</span><br><span class="line">        //解密后的明文</span><br><span class="line">        String ming2 = RSAUtils.decryptByPrivateKey(mi, priKey);</span><br><span class="line">        System.err.println(&quot;ming2=&quot;+ming2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-controller"><a href="#6-controller" class="headerlink" title="6.controller"></a>6.controller</h2><p>新建web包，在下面新建LoginController:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.interfaces.RSAPrivateKey;</span><br><span class="line">import java.security.interfaces.RSAPublicKey;</span><br><span class="line">import com.mj.rsa.util.RSAUtils;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class LoginController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&#123;&quot;&quot;,&quot;/&quot;,&quot;home&quot;&#125;)</span><br><span class="line">    public String homePage()&#123;</span><br><span class="line">        return &quot;home&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(value = &quot;gotologin&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String goToLogin(HttpServletRequest req,Model model)&#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Object&gt; map = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            map = RSAUtils.getKeys();</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //生成公钥和私钥</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) map.get(&quot;public&quot;);</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) map.get(&quot;private&quot;);</span><br><span class="line"></span><br><span class="line">        //模</span><br><span class="line">        String modulus = publicKey.getModulus().toString(16);</span><br><span class="line">        //公钥指数</span><br><span class="line">        String public_exponent = publicKey.getPublicExponent().toString(16);</span><br><span class="line">        //保存到session,供前段使用</span><br><span class="line">        model.addAttribute(&quot;pubkeyModulus&quot;,modulus);</span><br><span class="line">        model.addAttribute(&quot;pubkeyExponent&quot;,public_exponent);</span><br><span class="line">        //session</span><br><span class="line">        req.getSession().setAttribute(&quot;priKey&quot;,privateKey);</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 登陆。验证成功后，返回home页面，并在home页面显示已登录</span><br><span class="line">     * 这里省略从数据库获取用户名密码以及MD5操作的操作</span><br><span class="line">     * 这里的账号密码假定为maojing,123456</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;login&quot;,method = RequestMethod.POST)</span><br><span class="line">    public String login(HttpServletRequest req, Model model) &#123;</span><br><span class="line"></span><br><span class="line">        String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = req.getParameter(&quot;password&quot;);</span><br><span class="line">        RSAPrivateKey priKey = (RSAPrivateKey) req.getSession().getAttribute(&quot;priKey&quot;);</span><br><span class="line"></span><br><span class="line">        //解密后的密码</span><br><span class="line">        try &#123;</span><br><span class="line">            String decodePassword = RSAUtils.decryptByPrivateKey(password, priKey);</span><br><span class="line">            if (&quot;123456&quot;.equals(decodePassword)) &#123;</span><br><span class="line">                model.addAttribute(&quot;loginstate&quot;, &quot;已登陆&quot;);</span><br><span class="line">                return &quot;home&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                model.addAttribute(&quot;loginstate&quot;, &quot;账号或密码错误！&quot;);</span><br><span class="line">                return &quot;login&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-BouncyCastleProvider"><a href="#7-BouncyCastleProvider" class="headerlink" title="7.BouncyCastleProvider"></a>7.BouncyCastleProvider</h2><p>来到C:\Program Files\Java\jre1.8.0_161\lib\security下的java.security文件，在下面加上security.provider.x=org.bouncycastle.jce.provider.BouncyCastleProvider，x为顺序号，修改后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># List of providers and their preference orders (see above):</span><br><span class="line">#</span><br><span class="line">security.provider.1=sun.security.provider.Sun</span><br><span class="line">security.provider.2=sun.security.rsa.SunRsaSign</span><br><span class="line">security.provider.3=sun.security.ec.SunEC</span><br><span class="line">security.provider.4=com.sun.net.ssl.internal.ssl.Provider</span><br><span class="line">security.provider.5=com.sun.crypto.provider.SunJCE</span><br><span class="line">security.provider.6=sun.security.jgss.SunProvider</span><br><span class="line">security.provider.7=com.sun.security.sasl.Provider</span><br><span class="line">security.provider.8=org.jcp.xml.dsig.internal.dom.XMLDSigRI</span><br><span class="line">security.provider.9=sun.security.smartcardio.SunPCSC</span><br><span class="line">security.provider.10=sun.security.mscapi.SunMSCAPI</span><br><span class="line">security.provider.11=org.bouncycastle.jce.provider.BouncyCastleProvider</span><br></pre></td></tr></table></figure><h2 id="8-bcprov-jdk15on-1-59-jar"><a href="#8-bcprov-jdk15on-1-59-jar" class="headerlink" title="8.bcprov-jdk15on-1.59.jar"></a>8.bcprov-jdk15on-1.59.jar</h2><p>来到C:\Program Files\Java\jre1.8.0_161\lib\ext文件目录，将bcprov-jdk15on-1.59.jar包放入。</p><p>（注意：第7、8步骤我这里是不用配置也可）</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>至此，测试工程搭建完成。</p><p>当用户访问<code>http://localhost:8080/login</code>时，后台会基于RSA算法生成公钥私钥，同时将公钥告知web前端；</p><p>前端完成用户信息输入后，在点击提交时，前端会使用上面后台给的公钥，对密码进行加密，然后传给服务器；</p><p>服务器收到客户端登陆请求后，将使用私钥对密文进行解密，让后与后台用户密码比较验证。</p><p>这里省略了注册，数据库存储和读取数据。</p>]]></content>
    
    <summary type="html">
    
      这里将介绍基于RSA算法，web前端加密，java后端解密操作。
    
    </summary>
    
      <category term="RSA应用" scheme="http://yoursite.com/categories/RSA%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="RSA" scheme="http://yoursite.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>小心呵护孩子的‘好奇心’</title>
    <link href="http://yoursite.com/2019/01/27/%E5%B0%8F%E5%BF%83%E5%91%B5%E6%8A%A4%E5%AD%A9%E5%AD%90%E7%9A%84%E2%80%98%E5%A5%BD%E5%A5%87%E5%BF%83%E2%80%99/"/>
    <id>http://yoursite.com/2019/01/27/小心呵护孩子的‘好奇心’/</id>
    <published>2019-01-27T05:58:38.000Z</published>
    <updated>2019-01-27T08:07:15.731Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/27/小心呵护孩子的‘好奇心’/image1.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    研究表明，0~3岁是宝宝好奇心最强烈的时段，这个时段也是孩子的敏感期，作为父母的我们如果抓住这个机会对自己宝贝的好奇心加以适当引导，这对孩子的大脑开发，习惯的培养，性格的形成都将起到非常重要的作用。</p><a id="more"></a><h1 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h1><p>​    最近丫丫小脑袋里住进了一位小精灵，她的名字叫“好奇”，时不时的她就会蹦出来。</p><p>​    “爸爸，为什么是红灯呀？”（等红绿灯时）。</p><p>​    “爸爸，为什么小猫还不回家呀？”（天黑后楼下看见只猫）。</p><p>​    “爸爸，为什么小熊猫受伤了呀？”（动物园看见一只小熊猫脚受伤）。</p><p>​    ……</p><p>​    就是这样一类司空见惯的问题，有时问的问题本身可能都还需要爸爸给他捋清楚，不然除了我也就只有她妈妈能明白是什么意思（这是我们家的小默契），我很喜欢听女儿提问时那稚嫩的童声，但我也不可否认，应该有4层左右的问题，我是敷衍了女儿，即使我真的很想尽力的用心的回应她的提问。</p><p>​    看着女儿瞪着眼睛向我提问，有几次我会在耐心回答她之后，内心竟会有这样的独白：“菇凉，算你运气好，遇到我这样的超赞奶爸，愿意这么耐着性子回答你这些问题，那要是搁在你爸那个年代，只能是个留守儿童……”。</p><p>​    在中国那个特殊的年代里，太多留守儿童，他们童年时，“好奇”精灵应该也曾陪伴过他们，可孩子那么小，没有爸爸妈妈的帮助呵护，“好奇”精灵会消失吗？作为曾是留守儿童的我，最深的体会是，儿时大多数问题是得不到及时的正确的回答，虽然好奇依旧，但明显好奇心会随着得不到答案的次数增多而慢慢减少，直至平淡。</p><p>​    即使有爸妈陪着孩子，“好奇”精灵可能也会跑掉。在面对像上面我的女儿提的那一类问题时，作为成年人的我们，会觉得太正常（正常到不想回答），一两次还好，但孩子一直问，很多时候，我们就会失去耐心，并会采取一些敷衍，甚至训斥，惩罚的方式处理掉孩子的问题，逐渐地孩子便会沮丧，从而放弃提问。</p><p>​    没有了好奇心，失去了探索世界的欲望，也失去了前进的动力，这才是最可怕的。因此我意识到保护孩子的”好奇”精灵是件必须时刻注意的重要事情。</p><h1 id="什么是好奇心？"><a href="#什么是好奇心？" class="headerlink" title="什么是好奇心？"></a>什么是好奇心？</h1><p>​    通俗而言，大概就是思考一些司空见惯的现象并多问几个“为什么”。而用科学的话来说，好奇心是当我们想要知道某种不知道的事物时，表现出来的一种认知上的复杂情感，它可以理解为一种内在动机，这种内在动机是主动学习和自发探索的关键。</p><h1 id="有什么作用？"><a href="#有什么作用？" class="headerlink" title="有什么作用？"></a>有什么作用？</h1><p>科学家研究得出，好奇心的作用主要有三点：</p><ul><li>第一，它能促使我们主动学习，并且能让我们从学习中获得快乐；</li><li>第二，它会延长记忆在大脑中留存的时间；</li><li>第三，也是最重要的一点，它能引发一系列我们自己预料不到的成长，这种成长不仅体现在知识的增长上，还体现在对未来预测和判断误差的降低上。综上所得，好奇心对于人成长成才都大有裨益。</li></ul><h1 id="好奇名人"><a href="#好奇名人" class="headerlink" title="好奇名人"></a>好奇名人</h1><h2 id="1-牛顿"><a href="#1-牛顿" class="headerlink" title="1.牛顿"></a>1.牛顿</h2><p>​    成熟后的苹果为什么往下掉，而不是往天上掉，这个问题牛顿很好奇，这也促使他发现万有引力定律。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image2.jpg"><h2 id="2-伽利略"><a href="#2-伽利略" class="headerlink" title="2.伽利略"></a>2.伽利略</h2><p>​    400多年前，伽利略用铁桶煮水时发现：水开时，铁桶水位上升，当水冷后，水位就降下来。他对这个现象产生了强烈的好奇感，并由此受到启发，就有了后来的体温计。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image3.jpg"><h2 id="3-德莱斯"><a href="#3-德莱斯" class="headerlink" title="3.德莱斯"></a>3.德莱斯</h2><p>​    200年前，德莱斯发现一个现象：伐木工人在山上会将砍倒后的树的树枝清理掉，把树往山下滚。他很好奇：为什么圆的树木可以快速滚动？这促使他发明了自行车。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image4.jpg"><h1 id="怎么办？"><a href="#怎么办？" class="headerlink" title="怎么办？"></a>怎么办？</h1><p>​    我也是查阅了一些文章，其中在搜狐网上面得到了一些方法。这里我就引用，供参考。</p><img src="/2019/01/27/小心呵护孩子的‘好奇心’/image5.jpg"><h2 id="1-创设满足孩子好奇心的环境"><a href="#1-创设满足孩子好奇心的环境" class="headerlink" title="1.创设满足孩子好奇心的环境"></a>1.创设满足孩子好奇心的环境</h2><p>​    对孩子来说，日常生活环境中到处都蕴含着可供探索的资源，随便哪个情境，都可能成为引发孩子好奇心、引导孩子提出问题的学习场所。家长要做的首先是消除环境中的不安全因素，然后就可以依据孩子的兴趣提供各种实践材料和工具，放手让孩子去探索。</p><h2 id="2-不要以成人的思维约束孩子"><a href="#2-不要以成人的思维约束孩子" class="headerlink" title="2. 不要以成人的思维约束孩子"></a>2. 不要以成人的思维约束孩子</h2><p>​    由于年幼宝宝的认知有限，可能会有很奇怪、超出成人逻辑的设想，这个时候家长切忌以成人的思维方式来束缚孩子的想象力。比如孩子观察到绝大多数落叶掉在地上都是“掌心向下”，他会认为那是“落叶宝宝”在亲吻大地，家长可以鼓励这个想法，而不必强调说“落叶不是宝宝，落叶只是飘下来，落叶没有亲吻大地”。</p><h2 id="3-满足好奇心的同时锻炼孩子的生活能力"><a href="#3-满足好奇心的同时锻炼孩子的生活能力" class="headerlink" title="3.满足好奇心的同时锻炼孩子的生活能力"></a>3.满足好奇心的同时锻炼孩子的生活能力</h2><p>​    好奇的孩子多半有超乎常人的“动手欲望”。有时表现为孩子一定要拿家中的电视遥控器当“玩具”，不给他就大哭大闹；或者还够不着水池的孩子，自告奋勇在帮家长洗菜、做饭，与其担心他们“闯祸”，破坏遥控器或弄伤自己，不如教给他各种用具的使用方法。只要家长因势利导，重要的收获还包括锻炼孩子的生活能力，帮助他在未来的探索活动中积累基本的经验，也更有自信。</p><h2 id="4-鼓励孩子有更多非常规的玩法"><a href="#4-鼓励孩子有更多非常规的玩法" class="headerlink" title="4. 鼓励孩子有更多非常规的玩法"></a>4. 鼓励孩子有更多非常规的玩法</h2><p>​    好奇心何以能够上升为创造力？有时靠的正是一种非常规的的游戏手段。比如孩子把自己爱吃的怪味豆和鱼皮花生埋进土里等待“发芽”，家长不要迫不及待地干涉孩子，试图将孩子拽回所谓“正确的轨道”上来，这样恰恰使孩子错过了许多发现问题、解决问题的机会。</p><h2 id="5-做“不知道”家长"><a href="#5-做“不知道”家长" class="headerlink" title="5.做“不知道”家长"></a>5.做“不知道”家长</h2><p>​    做“不知道”家长，有时候也会激发孩子的探究心。家长对孩子的问题一概敷衍说“不知道”，当然会打击孩子“打破砂锅问到底”的热情，但若孩子每次问“为什么”，家长都忙不迭地给出标准答案，不见得是好事，这等于是替孩子省却了探究的过程，而培养孩子好奇心的最佳方式是教会孩子“研究方法”，教他学会思考，学会去找寻正确的答案。</p><h2 id="6-适时提出建议"><a href="#6-适时提出建议" class="headerlink" title="6.适时提出建议"></a>6.适时提出建议</h2><p>​    虽然在不危及宝宝安全的前提下，家长不要过分干涉宝宝的思考和决策过程，做“不知道”家长。但在宝宝面临问题时，应适时提出建议，并尽量避免给予负面、主观的说词，例如：“你怎么这么笨？”“上次不是已经教过你了吗?怎么这次还不会！”而应该试着将指导者的立场转化为辅导者，站在客观的角度上给宝宝提出建议：“你要不要用这个方法试试看？”这样不但可以给宝宝自己解答好奇心一个正确的方向，也能让他感受到父母对自己的尊重。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>​    肯定方法不止这6种，但也不一定6种爸爸妈妈们都要会，掌握其中几个点灵活运用起来，我相信，是能够最大限度留住宝贝们的“好奇”精灵，这将让孩子受益终身。</p><p>参考：<a href="https://www.sohu.com/a/152534069_809987" target="_blank" rel="noopener">https://www.sohu.com/a/152534069_809987</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/01/27/小心呵护孩子的‘好奇心’/image1.jpg&quot;&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​    研究表明，0~3岁是宝宝好奇心最强烈的时段，这个时段也是孩子的敏感期，作为父母的我们如果抓住这个机会对自己宝贝的好奇心加以适当引导，这对孩子的大脑开发，习惯的培养，性格的形成都将起到非常重要的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="育儿" scheme="http://yoursite.com/tags/%E8%82%B2%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx-必须知道的nginx.conf</title>
    <link href="http://yoursite.com/2019/01/26/Nginx-%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84nginx.conf/"/>
    <id>http://yoursite.com/2019/01/26/Nginx-必须知道的nginx.conf/</id>
    <published>2019-01-26T09:15:53.000Z</published>
    <updated>2019-01-26T09:41:37.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nginx是什么以及它有多厉害这里就不多赘述，大家可自行上网科普下。我们先了解下Nginx几个常用功能，当然这不是这篇博客的重点（如何使用后面再逐一介绍），在这里我们将重点记录下nginx.conf配置文件。</p><h1 id="功能概要"><a href="#功能概要" class="headerlink" title="功能概要"></a>功能概要</h1><p>看图理解，多的不说。</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1.正向代理"></a>1.正向代理</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image1.jpg"><h3 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2.反向代理"></a>2.反向代理</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image2.jpg"><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="1-轮询策略"><a href="#1-轮询策略" class="headerlink" title="1.轮询策略"></a>1.轮询策略</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image3.jpg"><h3 id="2-加权轮询"><a href="#2-加权轮询" class="headerlink" title="2.加权轮询"></a>2.加权轮询</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image4.jpg"><h3 id="3-IP-Hash"><a href="#3-IP-Hash" class="headerlink" title="3.IP Hash"></a>3.IP Hash</h3><img src="/2019/01/26/Nginx-必须知道的nginx.conf/image5.jpg"><h2 id="web缓存"><a href="#web缓存" class="headerlink" title="web缓存"></a>web缓存</h2><p>Nginx可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。</p><h1 id="配置文件nginx-conf"><a href="#配置文件nginx-conf" class="headerlink" title="配置文件nginx.conf"></a>配置文件nginx.conf</h1><p>默认内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理后其结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个模块功能注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</span><br><span class="line"></span><br><span class="line">2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</span><br><span class="line"></span><br><span class="line">3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</span><br><span class="line"></span><br><span class="line">4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</span><br><span class="line"></span><br><span class="line">5、location块：配置请求的路由，以及各种页面的处理情况。</span><br></pre></td></tr></table></figure><h1 id="配置例子"><a href="#配置例子" class="headerlink" title="配置例子"></a>配置例子</h1><p>下面有个配置案例作为参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &apos;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&apos;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/knowledgesea/p/5175711.html" target="_blank" rel="noopener">https://www.cnblogs.com/knowledgesea/p/5175711.html</a></p>]]></content>
    
    <summary type="html">
    
      这里将简要介绍Nginx，重点在于它的配置文件nginx.conf。
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>SSL-Let&#39;s Encrypt 免费证书制作</title>
    <link href="http://yoursite.com/2019/01/26/SSL-Let&#39;s%20Encrypt%20%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E5%88%B6%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/01/26/SSL-Let&#39;s Encrypt 免费证书制作/</id>
    <published>2019-01-26T04:10:10.000Z</published>
    <updated>2019-01-26T04:44:59.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>是Let’s Encrypt推出的获取证书的客户端，可以让我们免费快速地获取Let’s Encrypt证书。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-Certbot"><a href="#1-Certbot" class="headerlink" title="1.Certbot"></a>1.Certbot</h2><p>进入<a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>官网,选取使用的软件和系统环境，然后会出现安装方法（Nginx+Ubuntu 14.04），如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image1.jpg"><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install software-properties-common</span><br><span class="line">$ sudo add-apt-repository universe</span><br><span class="line">$ sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure><h2 id="2-申请"><a href="#2-申请" class="headerlink" title="2.申请"></a>2.申请</h2><p>上面个安装无误下执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1.example为你的项目根目录，我这里以我的静态博客为例，根目录为/var/www/blog</span><br><span class="line">2.后面则为你的域名，如myhaloj.com,www.myhaloj.com</span><br></pre></td></tr></table></figure><p>另外过程中会让输入邮箱，请正确输入，如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image2.jpg"><p>然后会收到一封邮件，按引导确认下。</p><p>申请成功后，证书会自动保存在<code>/etc/letsencrypt/live/</code>这个路径下：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image3.jpg"><h2 id="3-Nginx配置证书"><a href="#3-Nginx配置证书" class="headerlink" title="3.Nginx配置证书"></a>3.Nginx配置证书</h2><p>配置如下（这里是以个人blog静态站为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">   listen 80;</span><br><span class="line">   server_name www.myhaloj.com myhaloj.com;</span><br><span class="line">   return 301 https://www.myhaloj.com$request_uri;</span><br><span class="line"> &#125; </span><br><span class="line">server &#123;</span><br><span class="line">   listen 443 ssl;</span><br><span class="line">   server_name www.myhaloj.com myhaloj.com;</span><br><span class="line">   ssl on;</span><br><span class="line">   ssl_certificate /etc/letsencrypt/live/myhaloj.com/fullchain.pem;</span><br><span class="line">   ssl_certificate_key /etc/letsencrypt/live/myhaloj.com/privkey.pem;</span><br><span class="line">   ssl_session_timeout 5m;</span><br><span class="line">   ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">   ssl_prefer_server_ciphers on;</span><br><span class="line">   </span><br><span class="line">   location / &#123;</span><br><span class="line">      root /var/www/blog;</span><br><span class="line">      index  index.html index.htm;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-阿里云ECS证书上传部署"><a href="#4-阿里云ECS证书上传部署" class="headerlink" title="4.阿里云ECS证书上传部署"></a>4.阿里云ECS证书上传部署</h2><p>来到阿里云SSL证书控制台，将上面制作的证书上传上去，然后控制台将会出现证书，如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image4.jpg"><p>让后在证书下面选择<code>部署到云产品</code>选项中进行设置即可。</p><h2 id="5-证书自动续期"><a href="#5-证书自动续期" class="headerlink" title="5.证书自动续期"></a>5.证书自动续期</h2><p>细心的你可以看见上面制作的证书效期只有3个月，如下图：</p><img src="/2019/01/26/SSL-Let%27s%20Encrypt%20免费证书制作/image5.jpg"><p>自动续期配置：</p><p>1.先到任意合适的目录下新建一个文件，文件名自己定义即可：如autoRenewal，只要方便自己管理。</p><p>2.然后在文件里面编辑内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 */12 * * * certbot renew --quiet --renew-hook &quot;/etc/init.d/nginx reload&quot;</span><br></pre></td></tr></table></figure><p>保存退出</p><p>3.运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab autoRenewal</span><br></pre></td></tr></table></figure><p>原理是autoRenewal里存入了一个每天检查更新两次的命令，这个命令会自动续期服务器里存在的来自Certbot的SSL证书。然后把autoRenewal里存在的命令导入进Certbot的定时程序里。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了上面<a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>，通过命令方式申请免费证书外，国内的便宜SSL证书提供商给他家提供了基于图形化操作的SLL证书制作流程，这里给出链接，不做演示。</p><p>便宜SSL：<a href="https://www.pianyissl.com/?i121522" target="_blank" rel="noopener">https://www.pianyissl.com</a></p>]]></content>
    
    <summary type="html">
    
      这里将介绍从Let’s Encrypt获得网站域名的免费的证书。
    
    </summary>
    
      <category term="SSL" scheme="http://yoursite.com/categories/SSL/"/>
    
    
      <category term="SSL" scheme="http://yoursite.com/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>SSL-付费和免费</title>
    <link href="http://yoursite.com/2019/01/26/SSL-%E4%BB%98%E8%B4%B9%E5%92%8C%E5%85%8D%E8%B4%B9/"/>
    <id>http://yoursite.com/2019/01/26/SSL-付费和免费/</id>
    <published>2019-01-26T03:10:09.000Z</published>
    <updated>2019-01-26T03:32:03.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>目前国内外的科技巨头企业，如google，apple，百度等，不断推动HTTPS的普及，SSL证书作为HTTPS安全协议必备配置，便成为网站，App开发最重要的部署项目之一。</p><p>SSL证书的作用—加密信息，提高可信度。</p><p>各大网站之所以选择 SSL 是因为它对网络发送的敏感信息进行加密，只有目标接收方才能对信息进行解密，查看信息的内容。这样可以防止信息在传输 过程中被第三方窃取或者篡改，确保信息完整的传送到目标服务器。</p><p>SSL 证书可以验证网站的真实身份，确保数据来源的正确，并且能增强用户对网站信任：Chrome、Firefox 等浏览器会对 HTTPS 网站显示安全标志，HTTP 网站则显示不安全网站。百度、谷歌等搜索引擎也已经将 HTTPS 网站权重加大，HTTPS 网站在搜索列表中 排名更加靠前。</p><h1 id="免费-amp-付费"><a href="#免费-amp-付费" class="headerlink" title="免费&amp;付费"></a>免费&amp;付费</h1><p>免费SSL证书即为免费型的 DV SSL 证书，可以保护一个完整的域名，不支持通配符。免费 SSL 证书只需验证域名信息，但签发速度相对较慢的。</p><p>付费 SSL 证书主要分为付费的 DV SSL 证书、企业型 OV SSL 证书和增强型 EV SSL 证书三大类。OV SSL 证书、EV SSL 证书证书对申请者都需 要做严格的身份审核验证，需要提供可信身份证明。签发时间一般在 3 至 15 个工作日。相比 DV SSL 证书，OV SSL 证书、EV SSL 证书需要严格 的身份审核，其中涉及的资料包括申请人授权书、营业执照、组织机构代码证等等的重要信息。</p><p>免费 DV 证书对于个人博客、小微企业、API 服务等的服务，可以节省一笔不菲的开支，并且免费 DV 证书足以满足基本的加密要求，提高用户对网站的信任，以及搜索引擎对SEO的优化。当然如果在有经济条件的情况下，付费 SSL 证书不失为一种更好的选择;对于中大型企业网站、金融平台和政府机关等付费的 OV、EV 证书则更加适用。付费 SSL 证书对信息传输过程有更高的加密验证，还可以通过 SSL 证书来彰显品牌形象，为消费者塑造更加可靠的形象。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，如果企业不差钱，且注重品牌形象，则可选择付费版SSL证书，反之，免费版将是不错的选择。</p><p>参考：<a href="https://www.jianshu.com/p/0b52288fca67" target="_blank" rel="noopener">https://www.jianshu.com/p/0b52288fca67</a></p><p>如果需要代办付费版SSL证书申请，原文作者也给出一个链接：<a href="http://ssl.idcspy.net/（没收广告费的哦）" target="_blank" rel="noopener">http://ssl.idcspy.net/（没收广告费的哦）</a></p>]]></content>
    
    <summary type="html">
    
      这里简要介绍SSL证书，以及付费和免费的区别，供实际开发中，选取最合适的方式制作证书。
    
    </summary>
    
      <category term="SSL" scheme="http://yoursite.com/categories/SSL/"/>
    
    
      <category term="SSL" scheme="http://yoursite.com/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>SSL-阿里云免费证书</title>
    <link href="http://yoursite.com/2019/01/26/SSL-%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2019/01/26/SSL-阿里云免费证书/</id>
    <published>2019-01-26T02:49:00.000Z</published>
    <updated>2019-01-26T03:03:44.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-SSL证书控制台"><a href="#1-SSL证书控制台" class="headerlink" title="1.SSL证书控制台"></a>1.SSL证书控制台</h2><p>登陆阿里云控制台，在顶部搜索框输入<code>ssl</code>,会出现如下提示，点击进入<code>ssl(应用安全)控制台</code>：</p><img src="/2019/01/26/SSL-阿里云免费证书/image1.jpg"><h2 id="2-制作并提交申请"><a href="#2-制作并提交申请" class="headerlink" title="2.制作并提交申请"></a>2.制作并提交申请</h2><p>根据界面提示和指引制作免费证书并提交由阿里云审核，然后耐心等待审核，一般一天内会给出结果，通过后如下图：</p><img src="/2019/01/26/SSL-阿里云免费证书/image2.jpg"><h2 id="3-部署到云产品"><a href="#3-部署到云产品" class="headerlink" title="3.部署到云产品"></a>3.部署到云产品</h2><p>点击后设置如下图，这里仅供参考：</p><img src="/2019/01/26/SSL-阿里云免费证书/image3.jpg"><h2 id="4-安全组配置"><a href="#4-安全组配置" class="headerlink" title="4.安全组配置"></a>4.安全组配置</h2><p>别忘了ECS实例安全组配置里面端口范围配置<code>443/443</code>（不然不行的哦）：</p><img src="/2019/01/26/SSL-阿里云免费证书/image4.jpg">]]></content>
    
    <summary type="html">
    
      这里将简要介绍阿里云免费SSL证书生成过程
    
    </summary>
    
      <category term="SSL" scheme="http://yoursite.com/categories/SSL/"/>
    
    
      <category term="SSL" scheme="http://yoursite.com/tags/SSL/"/>
    
  </entry>
  
</feed>
